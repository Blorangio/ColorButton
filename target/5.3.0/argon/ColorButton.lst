
/Users/admin/Documents/CTD_2023/Personal_Projects/ColorButton/target/5.3.0/argon/ColorButton.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001774  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b5790  000b5790  00005790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         0000006c  2003e630  000b57b4  0000e630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000154  2003e69c  2003e69c  0001e69c  2**2
                  ALLOC
  6 .backup       00000004  2003f400  000b5820  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000b5824  000b5824  00015824  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000b582a  000b582a  0001582a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000b584e  000b584e  0001584e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   000f2ff4  00000000  00000000  00015852  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000f4af  00000000  00000000  00108846  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    00032ab9  00000000  00000000  00117cf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002668  00000000  00000000  0014a7ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00009848  00000000  00000000  0014ce16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000335d9  00000000  00000000  0015665e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00033eec  00000000  00000000  00189c37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00135297  00000000  00000000  001bdb23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00006b70  00000000  00000000  002f2dbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <__aeabi_drsub>:
   b401c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b4020:	e002      	b.n	b4028 <__adddf3>
   b4022:	bf00      	nop

000b4024 <__aeabi_dsub>:
   b4024:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b4028 <__adddf3>:
   b4028:	b530      	push	{r4, r5, lr}
   b402a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b402e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b4032:	ea94 0f05 	teq	r4, r5
   b4036:	bf08      	it	eq
   b4038:	ea90 0f02 	teqeq	r0, r2
   b403c:	bf1f      	itttt	ne
   b403e:	ea54 0c00 	orrsne.w	ip, r4, r0
   b4042:	ea55 0c02 	orrsne.w	ip, r5, r2
   b4046:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b404a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b404e:	f000 80e2 	beq.w	b4216 <__adddf3+0x1ee>
   b4052:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b4056:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b405a:	bfb8      	it	lt
   b405c:	426d      	neglt	r5, r5
   b405e:	dd0c      	ble.n	b407a <__adddf3+0x52>
   b4060:	442c      	add	r4, r5
   b4062:	ea80 0202 	eor.w	r2, r0, r2
   b4066:	ea81 0303 	eor.w	r3, r1, r3
   b406a:	ea82 0000 	eor.w	r0, r2, r0
   b406e:	ea83 0101 	eor.w	r1, r3, r1
   b4072:	ea80 0202 	eor.w	r2, r0, r2
   b4076:	ea81 0303 	eor.w	r3, r1, r3
   b407a:	2d36      	cmp	r5, #54	; 0x36
   b407c:	bf88      	it	hi
   b407e:	bd30      	pophi	{r4, r5, pc}
   b4080:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b4084:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b4088:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b408c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b4090:	d002      	beq.n	b4098 <__adddf3+0x70>
   b4092:	4240      	negs	r0, r0
   b4094:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4098:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b409c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b40a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b40a4:	d002      	beq.n	b40ac <__adddf3+0x84>
   b40a6:	4252      	negs	r2, r2
   b40a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b40ac:	ea94 0f05 	teq	r4, r5
   b40b0:	f000 80a7 	beq.w	b4202 <__adddf3+0x1da>
   b40b4:	f1a4 0401 	sub.w	r4, r4, #1
   b40b8:	f1d5 0e20 	rsbs	lr, r5, #32
   b40bc:	db0d      	blt.n	b40da <__adddf3+0xb2>
   b40be:	fa02 fc0e 	lsl.w	ip, r2, lr
   b40c2:	fa22 f205 	lsr.w	r2, r2, r5
   b40c6:	1880      	adds	r0, r0, r2
   b40c8:	f141 0100 	adc.w	r1, r1, #0
   b40cc:	fa03 f20e 	lsl.w	r2, r3, lr
   b40d0:	1880      	adds	r0, r0, r2
   b40d2:	fa43 f305 	asr.w	r3, r3, r5
   b40d6:	4159      	adcs	r1, r3
   b40d8:	e00e      	b.n	b40f8 <__adddf3+0xd0>
   b40da:	f1a5 0520 	sub.w	r5, r5, #32
   b40de:	f10e 0e20 	add.w	lr, lr, #32
   b40e2:	2a01      	cmp	r2, #1
   b40e4:	fa03 fc0e 	lsl.w	ip, r3, lr
   b40e8:	bf28      	it	cs
   b40ea:	f04c 0c02 	orrcs.w	ip, ip, #2
   b40ee:	fa43 f305 	asr.w	r3, r3, r5
   b40f2:	18c0      	adds	r0, r0, r3
   b40f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b40f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b40fc:	d507      	bpl.n	b410e <__adddf3+0xe6>
   b40fe:	f04f 0e00 	mov.w	lr, #0
   b4102:	f1dc 0c00 	rsbs	ip, ip, #0
   b4106:	eb7e 0000 	sbcs.w	r0, lr, r0
   b410a:	eb6e 0101 	sbc.w	r1, lr, r1
   b410e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b4112:	d31b      	bcc.n	b414c <__adddf3+0x124>
   b4114:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b4118:	d30c      	bcc.n	b4134 <__adddf3+0x10c>
   b411a:	0849      	lsrs	r1, r1, #1
   b411c:	ea5f 0030 	movs.w	r0, r0, rrx
   b4120:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b4124:	f104 0401 	add.w	r4, r4, #1
   b4128:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b412c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b4130:	f080 809a 	bcs.w	b4268 <__adddf3+0x240>
   b4134:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b4138:	bf08      	it	eq
   b413a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b413e:	f150 0000 	adcs.w	r0, r0, #0
   b4142:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b4146:	ea41 0105 	orr.w	r1, r1, r5
   b414a:	bd30      	pop	{r4, r5, pc}
   b414c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b4150:	4140      	adcs	r0, r0
   b4152:	eb41 0101 	adc.w	r1, r1, r1
   b4156:	3c01      	subs	r4, #1
   b4158:	bf28      	it	cs
   b415a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b415e:	d2e9      	bcs.n	b4134 <__adddf3+0x10c>
   b4160:	f091 0f00 	teq	r1, #0
   b4164:	bf04      	itt	eq
   b4166:	4601      	moveq	r1, r0
   b4168:	2000      	moveq	r0, #0
   b416a:	fab1 f381 	clz	r3, r1
   b416e:	bf08      	it	eq
   b4170:	3320      	addeq	r3, #32
   b4172:	f1a3 030b 	sub.w	r3, r3, #11
   b4176:	f1b3 0220 	subs.w	r2, r3, #32
   b417a:	da0c      	bge.n	b4196 <__adddf3+0x16e>
   b417c:	320c      	adds	r2, #12
   b417e:	dd08      	ble.n	b4192 <__adddf3+0x16a>
   b4180:	f102 0c14 	add.w	ip, r2, #20
   b4184:	f1c2 020c 	rsb	r2, r2, #12
   b4188:	fa01 f00c 	lsl.w	r0, r1, ip
   b418c:	fa21 f102 	lsr.w	r1, r1, r2
   b4190:	e00c      	b.n	b41ac <__adddf3+0x184>
   b4192:	f102 0214 	add.w	r2, r2, #20
   b4196:	bfd8      	it	le
   b4198:	f1c2 0c20 	rsble	ip, r2, #32
   b419c:	fa01 f102 	lsl.w	r1, r1, r2
   b41a0:	fa20 fc0c 	lsr.w	ip, r0, ip
   b41a4:	bfdc      	itt	le
   b41a6:	ea41 010c 	orrle.w	r1, r1, ip
   b41aa:	4090      	lslle	r0, r2
   b41ac:	1ae4      	subs	r4, r4, r3
   b41ae:	bfa2      	ittt	ge
   b41b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b41b4:	4329      	orrge	r1, r5
   b41b6:	bd30      	popge	{r4, r5, pc}
   b41b8:	ea6f 0404 	mvn.w	r4, r4
   b41bc:	3c1f      	subs	r4, #31
   b41be:	da1c      	bge.n	b41fa <__adddf3+0x1d2>
   b41c0:	340c      	adds	r4, #12
   b41c2:	dc0e      	bgt.n	b41e2 <__adddf3+0x1ba>
   b41c4:	f104 0414 	add.w	r4, r4, #20
   b41c8:	f1c4 0220 	rsb	r2, r4, #32
   b41cc:	fa20 f004 	lsr.w	r0, r0, r4
   b41d0:	fa01 f302 	lsl.w	r3, r1, r2
   b41d4:	ea40 0003 	orr.w	r0, r0, r3
   b41d8:	fa21 f304 	lsr.w	r3, r1, r4
   b41dc:	ea45 0103 	orr.w	r1, r5, r3
   b41e0:	bd30      	pop	{r4, r5, pc}
   b41e2:	f1c4 040c 	rsb	r4, r4, #12
   b41e6:	f1c4 0220 	rsb	r2, r4, #32
   b41ea:	fa20 f002 	lsr.w	r0, r0, r2
   b41ee:	fa01 f304 	lsl.w	r3, r1, r4
   b41f2:	ea40 0003 	orr.w	r0, r0, r3
   b41f6:	4629      	mov	r1, r5
   b41f8:	bd30      	pop	{r4, r5, pc}
   b41fa:	fa21 f004 	lsr.w	r0, r1, r4
   b41fe:	4629      	mov	r1, r5
   b4200:	bd30      	pop	{r4, r5, pc}
   b4202:	f094 0f00 	teq	r4, #0
   b4206:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b420a:	bf06      	itte	eq
   b420c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b4210:	3401      	addeq	r4, #1
   b4212:	3d01      	subne	r5, #1
   b4214:	e74e      	b.n	b40b4 <__adddf3+0x8c>
   b4216:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b421a:	bf18      	it	ne
   b421c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4220:	d029      	beq.n	b4276 <__adddf3+0x24e>
   b4222:	ea94 0f05 	teq	r4, r5
   b4226:	bf08      	it	eq
   b4228:	ea90 0f02 	teqeq	r0, r2
   b422c:	d005      	beq.n	b423a <__adddf3+0x212>
   b422e:	ea54 0c00 	orrs.w	ip, r4, r0
   b4232:	bf04      	itt	eq
   b4234:	4619      	moveq	r1, r3
   b4236:	4610      	moveq	r0, r2
   b4238:	bd30      	pop	{r4, r5, pc}
   b423a:	ea91 0f03 	teq	r1, r3
   b423e:	bf1e      	ittt	ne
   b4240:	2100      	movne	r1, #0
   b4242:	2000      	movne	r0, #0
   b4244:	bd30      	popne	{r4, r5, pc}
   b4246:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b424a:	d105      	bne.n	b4258 <__adddf3+0x230>
   b424c:	0040      	lsls	r0, r0, #1
   b424e:	4149      	adcs	r1, r1
   b4250:	bf28      	it	cs
   b4252:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b4256:	bd30      	pop	{r4, r5, pc}
   b4258:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b425c:	bf3c      	itt	cc
   b425e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b4262:	bd30      	popcc	{r4, r5, pc}
   b4264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4268:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b426c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b4270:	f04f 0000 	mov.w	r0, #0
   b4274:	bd30      	pop	{r4, r5, pc}
   b4276:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b427a:	bf1a      	itte	ne
   b427c:	4619      	movne	r1, r3
   b427e:	4610      	movne	r0, r2
   b4280:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b4284:	bf1c      	itt	ne
   b4286:	460b      	movne	r3, r1
   b4288:	4602      	movne	r2, r0
   b428a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b428e:	bf06      	itte	eq
   b4290:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b4294:	ea91 0f03 	teqeq	r1, r3
   b4298:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b429c:	bd30      	pop	{r4, r5, pc}
   b429e:	bf00      	nop

000b42a0 <__aeabi_ui2d>:
   b42a0:	f090 0f00 	teq	r0, #0
   b42a4:	bf04      	itt	eq
   b42a6:	2100      	moveq	r1, #0
   b42a8:	4770      	bxeq	lr
   b42aa:	b530      	push	{r4, r5, lr}
   b42ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42b4:	f04f 0500 	mov.w	r5, #0
   b42b8:	f04f 0100 	mov.w	r1, #0
   b42bc:	e750      	b.n	b4160 <__adddf3+0x138>
   b42be:	bf00      	nop

000b42c0 <__aeabi_i2d>:
   b42c0:	f090 0f00 	teq	r0, #0
   b42c4:	bf04      	itt	eq
   b42c6:	2100      	moveq	r1, #0
   b42c8:	4770      	bxeq	lr
   b42ca:	b530      	push	{r4, r5, lr}
   b42cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b42d8:	bf48      	it	mi
   b42da:	4240      	negmi	r0, r0
   b42dc:	f04f 0100 	mov.w	r1, #0
   b42e0:	e73e      	b.n	b4160 <__adddf3+0x138>
   b42e2:	bf00      	nop

000b42e4 <__aeabi_f2d>:
   b42e4:	0042      	lsls	r2, r0, #1
   b42e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b42ea:	ea4f 0131 	mov.w	r1, r1, rrx
   b42ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b42f2:	bf1f      	itttt	ne
   b42f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b42f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b42fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b4300:	4770      	bxne	lr
   b4302:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b4306:	bf08      	it	eq
   b4308:	4770      	bxeq	lr
   b430a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b430e:	bf04      	itt	eq
   b4310:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b4314:	4770      	bxeq	lr
   b4316:	b530      	push	{r4, r5, lr}
   b4318:	f44f 7460 	mov.w	r4, #896	; 0x380
   b431c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4320:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b4324:	e71c      	b.n	b4160 <__adddf3+0x138>
   b4326:	bf00      	nop

000b4328 <__aeabi_ul2d>:
   b4328:	ea50 0201 	orrs.w	r2, r0, r1
   b432c:	bf08      	it	eq
   b432e:	4770      	bxeq	lr
   b4330:	b530      	push	{r4, r5, lr}
   b4332:	f04f 0500 	mov.w	r5, #0
   b4336:	e00a      	b.n	b434e <__aeabi_l2d+0x16>

000b4338 <__aeabi_l2d>:
   b4338:	ea50 0201 	orrs.w	r2, r0, r1
   b433c:	bf08      	it	eq
   b433e:	4770      	bxeq	lr
   b4340:	b530      	push	{r4, r5, lr}
   b4342:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b4346:	d502      	bpl.n	b434e <__aeabi_l2d+0x16>
   b4348:	4240      	negs	r0, r0
   b434a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b434e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b4352:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b4356:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b435a:	f43f aed8 	beq.w	b410e <__adddf3+0xe6>
   b435e:	f04f 0203 	mov.w	r2, #3
   b4362:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b4366:	bf18      	it	ne
   b4368:	3203      	addne	r2, #3
   b436a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b436e:	bf18      	it	ne
   b4370:	3203      	addne	r2, #3
   b4372:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b4376:	f1c2 0320 	rsb	r3, r2, #32
   b437a:	fa00 fc03 	lsl.w	ip, r0, r3
   b437e:	fa20 f002 	lsr.w	r0, r0, r2
   b4382:	fa01 fe03 	lsl.w	lr, r1, r3
   b4386:	ea40 000e 	orr.w	r0, r0, lr
   b438a:	fa21 f102 	lsr.w	r1, r1, r2
   b438e:	4414      	add	r4, r2
   b4390:	e6bd      	b.n	b410e <__adddf3+0xe6>
   b4392:	bf00      	nop

000b4394 <__aeabi_d2iz>:
   b4394:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b4398:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b439c:	d215      	bcs.n	b43ca <__aeabi_d2iz+0x36>
   b439e:	d511      	bpl.n	b43c4 <__aeabi_d2iz+0x30>
   b43a0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b43a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b43a8:	d912      	bls.n	b43d0 <__aeabi_d2iz+0x3c>
   b43aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b43ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b43b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b43b6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b43ba:	fa23 f002 	lsr.w	r0, r3, r2
   b43be:	bf18      	it	ne
   b43c0:	4240      	negne	r0, r0
   b43c2:	4770      	bx	lr
   b43c4:	f04f 0000 	mov.w	r0, #0
   b43c8:	4770      	bx	lr
   b43ca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b43ce:	d105      	bne.n	b43dc <__aeabi_d2iz+0x48>
   b43d0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   b43d4:	bf08      	it	eq
   b43d6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   b43da:	4770      	bx	lr
   b43dc:	f04f 0000 	mov.w	r0, #0
   b43e0:	4770      	bx	lr
   b43e2:	bf00      	nop

000b43e4 <strlen>:
   b43e4:	4603      	mov	r3, r0
   b43e6:	f813 2b01 	ldrb.w	r2, [r3], #1
   b43ea:	2a00      	cmp	r2, #0
   b43ec:	d1fb      	bne.n	b43e6 <strlen+0x2>
   b43ee:	1a18      	subs	r0, r3, r0
   b43f0:	3801      	subs	r0, #1
   b43f2:	4770      	bx	lr

000b43f4 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b43f4:	4809      	ldr	r0, [pc, #36]	; (b441c <module_user_pre_init+0x28>)
   b43f6:	490a      	ldr	r1, [pc, #40]	; (b4420 <module_user_pre_init+0x2c>)
   b43f8:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b43fa:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b43fc:	d005      	beq.n	b440a <module_user_pre_init+0x16>
   b43fe:	4a09      	ldr	r2, [pc, #36]	; (b4424 <module_user_pre_init+0x30>)
   b4400:	4282      	cmp	r2, r0
   b4402:	d002      	beq.n	b440a <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4404:	1a12      	subs	r2, r2, r0
   b4406:	f001 f805 	bl	b5414 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b440a:	4807      	ldr	r0, [pc, #28]	; (b4428 <module_user_pre_init+0x34>)
   b440c:	4a07      	ldr	r2, [pc, #28]	; (b442c <module_user_pre_init+0x38>)
   b440e:	2100      	movs	r1, #0
   b4410:	1a12      	subs	r2, r2, r0
   b4412:	f001 f80d 	bl	b5430 <memset>
    return &link_global_data_start;
}
   b4416:	4801      	ldr	r0, [pc, #4]	; (b441c <module_user_pre_init+0x28>)
   b4418:	bd08      	pop	{r3, pc}
   b441a:	bf00      	nop
   b441c:	2003e630 	.word	0x2003e630
   b4420:	000b57b4 	.word	0x000b57b4
   b4424:	2003e69c 	.word	0x2003e69c
   b4428:	2003e69c 	.word	0x2003e69c
   b442c:	2003e7f0 	.word	0x2003e7f0

000b4430 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4430:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4432:	4e07      	ldr	r6, [pc, #28]	; (b4450 <module_user_init+0x20>)
   b4434:	4c07      	ldr	r4, [pc, #28]	; (b4454 <module_user_init+0x24>)
    module_user_init_hook();
   b4436:	f000 fe7b 	bl	b5130 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b443a:	1ba4      	subs	r4, r4, r6
   b443c:	08a4      	lsrs	r4, r4, #2
   b443e:	2500      	movs	r5, #0
   b4440:	42ac      	cmp	r4, r5
   b4442:	d100      	bne.n	b4446 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4444:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4446:	f856 3b04 	ldr.w	r3, [r6], #4
   b444a:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b444c:	3501      	adds	r5, #1
   b444e:	e7f7      	b.n	b4440 <module_user_init+0x10>
   b4450:	000b576c 	.word	0x000b576c
   b4454:	000b5790 	.word	0x000b5790

000b4458 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4458:	f000 b828 	b.w	b44ac <setup>

000b445c <module_user_loop>:
}

void module_user_loop() {
   b445c:	b508      	push	{r3, lr}
    loop();
   b445e:	f000 f84f 	bl	b4500 <loop>
    _post_loop();
}
   b4462:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4466:	f000 be1b 	b.w	b50a0 <_post_loop>

000b446a <_Znaj>:
   b446a:	f000 ba75 	b.w	b4958 <malloc>

000b446e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b446e:	f000 ba7b 	b.w	b4968 <free>

000b4472 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b4472:	7800      	ldrb	r0, [r0, #0]
   b4474:	fab0 f080 	clz	r0, r0
   b4478:	0940      	lsrs	r0, r0, #5
   b447a:	4770      	bx	lr

000b447c <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b447c:	2301      	movs	r3, #1
   b447e:	7003      	strb	r3, [r0, #0]
   b4480:	4770      	bx	lr
	...

000b4484 <_Z5roundIiET_S0_>:
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }

template <typename T>
static inline
T round (T x) { return ((x)>=0?(long)((x)+0.5):(long)((x)-0.5)); }
   b4484:	b510      	push	{r4, lr}
   b4486:	4604      	mov	r4, r0
   b4488:	f7ff ff1a 	bl	b42c0 <__aeabi_i2d>
   b448c:	2c00      	cmp	r4, #0
   b448e:	4b06      	ldr	r3, [pc, #24]	; (b44a8 <_Z5roundIiET_S0_+0x24>)
   b4490:	f04f 0200 	mov.w	r2, #0
   b4494:	db04      	blt.n	b44a0 <_Z5roundIiET_S0_+0x1c>
   b4496:	f7ff fdc7 	bl	b4028 <__adddf3>
   b449a:	f7ff ff7b 	bl	b4394 <__aeabi_d2iz>
   b449e:	bd10      	pop	{r4, pc}
   b44a0:	f7ff fdc0 	bl	b4024 <__aeabi_dsub>
   b44a4:	e7f9      	b.n	b449a <_Z5roundIiET_S0_+0x16>
   b44a6:	bf00      	nop
   b44a8:	3fe00000 	.word	0x3fe00000

000b44ac <setup>:
SYSTEM_MODE(MANUAL);
SYSTEM_THREAD(ENABLED);
void setup() {
   b44ac:	b508      	push	{r3, lr}
  pinMode(A5, INPUT);
   b44ae:	2100      	movs	r1, #0
   b44b0:	200e      	movs	r0, #14
   b44b2:	f000 fead 	bl	b5210 <pinMode>
  pinMode(D0, INPUT);
   b44b6:	2100      	movs	r1, #0
   b44b8:	4608      	mov	r0, r1
   b44ba:	f000 fea9 	bl	b5210 <pinMode>
  pinMode(D4, OUTPUT);
   b44be:	2101      	movs	r1, #1
   b44c0:	2004      	movs	r0, #4
   b44c2:	f000 fea5 	bl	b5210 <pinMode>
  pinMode(D5, OUTPUT);
   b44c6:	2101      	movs	r1, #1
   b44c8:	2005      	movs	r0, #5
   b44ca:	f000 fea1 	bl	b5210 <pinMode>
  pinMode(D6, OUTPUT);
   b44ce:	2101      	movs	r1, #1
   b44d0:	2006      	movs	r0, #6
   b44d2:	f000 fe9d 	bl	b5210 <pinMode>
  digitalWrite(D4, HIGH);
   b44d6:	2101      	movs	r1, #1
   b44d8:	2004      	movs	r0, #4
   b44da:	f000 feaa 	bl	b5232 <digitalWrite>
  digitalWrite(D5, HIGH);
   b44de:	2101      	movs	r1, #1
   b44e0:	2005      	movs	r0, #5
   b44e2:	f000 fea6 	bl	b5232 <digitalWrite>
  digitalWrite(D6, HIGH);
   b44e6:	2101      	movs	r1, #1
   b44e8:	2006      	movs	r0, #6
   b44ea:	f000 fea2 	bl	b5232 <digitalWrite>
  Serial.begin(9600);
   b44ee:	f000 fd51 	bl	b4f94 <_Z16_fetch_usbserialv>
}
   b44f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Serial.begin(9600);
   b44f6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b44fa:	f000 bd3f 	b.w	b4f7c <_ZN9USBSerial5beginEl>
	...

000b4500 <loop>:
bool onOff = false;
int red = 0;
int green = 0;
int blue = 0;
int current = 0;
void loop() {
   b4500:	b570      	push	{r4, r5, r6, lr}
  if(current==0) {
   b4502:	4d28      	ldr	r5, [pc, #160]	; (b45a4 <loop+0xa4>)
   b4504:	4c28      	ldr	r4, [pc, #160]	; (b45a8 <loop+0xa8>)
   b4506:	682b      	ldr	r3, [r5, #0]
    int analog = analogRead(A5);
   b4508:	200e      	movs	r0, #14
  if(current==0) {
   b450a:	bb63      	cbnz	r3, b4566 <loop+0x66>
    int analog = analogRead(A5);
   b450c:	f000 febd 	bl	b528a <analogRead>
    red = round((analog*255/4095));
   b4510:	f640 73ff 	movw	r3, #4095	; 0xfff
   b4514:	ebc0 2000 	rsb	r0, r0, r0, lsl #8
   b4518:	fb90 f0f3 	sdiv	r0, r0, r3
   b451c:	f7ff ffb2 	bl	b4484 <_Z5roundIiET_S0_>
   b4520:	4601      	mov	r1, r0
   b4522:	6020      	str	r0, [r4, #0]
    analogWrite(D4, red);
   b4524:	2004      	movs	r0, #4
    red = round((analog*255/4095));
    analogWrite(D5, red);
  } else {
    int analog = analogRead(A5);
    red = round((analog*255/4095));
    analogWrite(D6, red);
   b4526:	f000 fec7 	bl	b52b8 <_Z11analogWritetm>
  }
  if(digitalRead(D0)==HIGH&&!cont) {
   b452a:	2000      	movs	r0, #0
   b452c:	f000 fe9a 	bl	b5264 <digitalRead>
   b4530:	2801      	cmp	r0, #1
   b4532:	4604      	mov	r4, r0
   b4534:	d110      	bne.n	b4558 <loop+0x58>
   b4536:	4e1d      	ldr	r6, [pc, #116]	; (b45ac <loop+0xac>)
   b4538:	7833      	ldrb	r3, [r6, #0]
   b453a:	b96b      	cbnz	r3, b4558 <loop+0x58>
    Serial.println("Button Down");
   b453c:	f000 fd2a 	bl	b4f94 <_Z16_fetch_usbserialv>
   b4540:	491b      	ldr	r1, [pc, #108]	; (b45b0 <loop+0xb0>)
   b4542:	f000 fc22 	bl	b4d8a <_ZN5Print7printlnEPKc>
    onOff = !onOff;
   b4546:	4a1b      	ldr	r2, [pc, #108]	; (b45b4 <loop+0xb4>)
    current+=1;
    cont=true;
   b4548:	7034      	strb	r4, [r6, #0]
    onOff = !onOff;
   b454a:	7813      	ldrb	r3, [r2, #0]
   b454c:	f083 0301 	eor.w	r3, r3, #1
   b4550:	7013      	strb	r3, [r2, #0]
    current+=1;
   b4552:	682b      	ldr	r3, [r5, #0]
   b4554:	3301      	adds	r3, #1
   b4556:	602b      	str	r3, [r5, #0]
  }
  if(digitalRead(D0)==LOW) {
   b4558:	2000      	movs	r0, #0
   b455a:	f000 fe83 	bl	b5264 <digitalRead>
   b455e:	b908      	cbnz	r0, b4564 <loop+0x64>
    cont = false;
   b4560:	4b12      	ldr	r3, [pc, #72]	; (b45ac <loop+0xac>)
   b4562:	7018      	strb	r0, [r3, #0]
  }
   b4564:	bd70      	pop	{r4, r5, r6, pc}
  } else if(current==1) {
   b4566:	2b01      	cmp	r3, #1
   b4568:	d10d      	bne.n	b4586 <loop+0x86>
    int analog = analogRead(A5);
   b456a:	f000 fe8e 	bl	b528a <analogRead>
    red = round((analog*255/4095));
   b456e:	f640 73ff 	movw	r3, #4095	; 0xfff
   b4572:	ebc0 2000 	rsb	r0, r0, r0, lsl #8
   b4576:	fb90 f0f3 	sdiv	r0, r0, r3
   b457a:	f7ff ff83 	bl	b4484 <_Z5roundIiET_S0_>
   b457e:	4601      	mov	r1, r0
   b4580:	6020      	str	r0, [r4, #0]
    analogWrite(D5, red);
   b4582:	2005      	movs	r0, #5
   b4584:	e7cf      	b.n	b4526 <loop+0x26>
    int analog = analogRead(A5);
   b4586:	f000 fe80 	bl	b528a <analogRead>
    red = round((analog*255/4095));
   b458a:	f640 73ff 	movw	r3, #4095	; 0xfff
   b458e:	ebc0 2000 	rsb	r0, r0, r0, lsl #8
   b4592:	fb90 f0f3 	sdiv	r0, r0, r3
   b4596:	f7ff ff75 	bl	b4484 <_Z5roundIiET_S0_>
   b459a:	4601      	mov	r1, r0
   b459c:	6020      	str	r0, [r4, #0]
    analogWrite(D6, red);
   b459e:	2006      	movs	r0, #6
   b45a0:	e7c1      	b.n	b4526 <loop+0x26>
   b45a2:	bf00      	nop
   b45a4:	2003e6ac 	.word	0x2003e6ac
   b45a8:	2003e6b4 	.word	0x2003e6b4
   b45ac:	2003e6a8 	.word	0x2003e6a8
   b45b0:	000b557c 	.word	0x000b557c
   b45b4:	2003e6b0 	.word	0x2003e6b0

000b45b8 <_GLOBAL__sub_I_SystemMode>:
   b45b8:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b45ba:	4b07      	ldr	r3, [pc, #28]	; (b45d8 <_GLOBAL__sub_I_SystemMode+0x20>)
    SleepResult() {}
   b45bc:	4a07      	ldr	r2, [pc, #28]	; (b45dc <_GLOBAL__sub_I_SystemMode+0x24>)
   b45be:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b45c0:	2400      	movs	r4, #0
   b45c2:	e9c3 4400 	strd	r4, r4, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b45c6:	2003      	movs	r0, #3
   b45c8:	f000 f93a 	bl	b4840 <set_system_mode>
SYSTEM_THREAD(ENABLED);
   b45cc:	4621      	mov	r1, r4
   b45ce:	2001      	movs	r0, #1
   b45d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SYSTEM_THREAD(ENABLED);
   b45d4:	f000 b93c 	b.w	b4850 <system_thread_set_state>
   b45d8:	2003e69c 	.word	0x2003e69c
   b45dc:	ffff0000 	.word	0xffff0000

000b45e0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b45e0:	b508      	push	{r3, lr}
   b45e2:	4b02      	ldr	r3, [pc, #8]	; (b45ec <os_mutex_recursive_create+0xc>)
   b45e4:	681b      	ldr	r3, [r3, #0]
   b45e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b45e8:	9301      	str	r3, [sp, #4]
   b45ea:	bd08      	pop	{r3, pc}
   b45ec:	00030248 	.word	0x00030248

000b45f0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b45f0:	b508      	push	{r3, lr}
   b45f2:	4b02      	ldr	r3, [pc, #8]	; (b45fc <HAL_RNG_GetRandomNumber+0xc>)
   b45f4:	681b      	ldr	r3, [r3, #0]
   b45f6:	685b      	ldr	r3, [r3, #4]
   b45f8:	9301      	str	r3, [sp, #4]
   b45fa:	bd08      	pop	{r3, pc}
   b45fc:	00030218 	.word	0x00030218

000b4600 <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4600:	b508      	push	{r3, lr}
   b4602:	4b02      	ldr	r3, [pc, #8]	; (b460c <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4604:	681b      	ldr	r3, [r3, #0]
   b4606:	695b      	ldr	r3, [r3, #20]
   b4608:	9301      	str	r3, [sp, #4]
   b460a:	bd08      	pop	{r3, pc}
   b460c:	00030218 	.word	0x00030218

000b4610 <hal_pin_validate_function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
   b4610:	b508      	push	{r3, lr}
   b4612:	4b02      	ldr	r3, [pc, #8]	; (b461c <hal_pin_validate_function+0xc>)
   b4614:	681b      	ldr	r3, [r3, #0]
   b4616:	685b      	ldr	r3, [r3, #4]
   b4618:	9301      	str	r3, [sp, #4]
   b461a:	bd08      	pop	{r3, pc}
   b461c:	0003022c 	.word	0x0003022c

000b4620 <hal_gpio_mode>:
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
   b4620:	b508      	push	{r3, lr}
   b4622:	4b02      	ldr	r3, [pc, #8]	; (b462c <hal_gpio_mode+0xc>)
   b4624:	681b      	ldr	r3, [r3, #0]
   b4626:	689b      	ldr	r3, [r3, #8]
   b4628:	9301      	str	r3, [sp, #4]
   b462a:	bd08      	pop	{r3, pc}
   b462c:	0003022c 	.word	0x0003022c

000b4630 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
   b4630:	b508      	push	{r3, lr}
   b4632:	4b02      	ldr	r3, [pc, #8]	; (b463c <hal_gpio_get_mode+0xc>)
   b4634:	681b      	ldr	r3, [r3, #0]
   b4636:	68db      	ldr	r3, [r3, #12]
   b4638:	9301      	str	r3, [sp, #4]
   b463a:	bd08      	pop	{r3, pc}
   b463c:	0003022c 	.word	0x0003022c

000b4640 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
   b4640:	b508      	push	{r3, lr}
   b4642:	4b02      	ldr	r3, [pc, #8]	; (b464c <hal_gpio_write+0xc>)
   b4644:	681b      	ldr	r3, [r3, #0]
   b4646:	691b      	ldr	r3, [r3, #16]
   b4648:	9301      	str	r3, [sp, #4]
   b464a:	bd08      	pop	{r3, pc}
   b464c:	0003022c 	.word	0x0003022c

000b4650 <hal_gpio_read>:
DYNALIB_FN(5, hal_gpio, hal_gpio_read, int32_t(hal_pin_t))
   b4650:	b508      	push	{r3, lr}
   b4652:	4b02      	ldr	r3, [pc, #8]	; (b465c <hal_gpio_read+0xc>)
   b4654:	681b      	ldr	r3, [r3, #0]
   b4656:	695b      	ldr	r3, [r3, #20]
   b4658:	9301      	str	r3, [sp, #4]
   b465a:	bd08      	pop	{r3, pc}
   b465c:	0003022c 	.word	0x0003022c

000b4660 <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, hal_interrupt_attach, int(uint16_t, hal_interrupt_handler_t, void*, InterruptMode, hal_interrupt_extra_configuration_t*))
DYNALIB_FN(7, hal_gpio, hal_interrupt_detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, hal_interrupt_enable_all, void(void))
DYNALIB_FN(9, hal_gpio, hal_interrupt_disable_all, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(hal_pin_t, uint16_t))
   b4660:	b508      	push	{r3, lr}
   b4662:	4b02      	ldr	r3, [pc, #8]	; (b466c <HAL_DAC_Write+0xc>)
   b4664:	681b      	ldr	r3, [r3, #0]
   b4666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4668:	9301      	str	r3, [sp, #4]
   b466a:	bd08      	pop	{r3, pc}
   b466c:	0003022c 	.word	0x0003022c

000b4670 <hal_adc_read>:
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b4670:	b508      	push	{r3, lr}
   b4672:	4b02      	ldr	r3, [pc, #8]	; (b467c <hal_adc_read+0xc>)
   b4674:	681b      	ldr	r3, [r3, #0]
   b4676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4678:	9301      	str	r3, [sp, #4]
   b467a:	bd08      	pop	{r3, pc}
   b467c:	0003022c 	.word	0x0003022c

000b4680 <hal_pwm_write_ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(hal_pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(hal_pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(hal_pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, hal_pwm_get_resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, hal_pwm_set_resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, hal_pwm_write_ext, void(uint16_t, uint32_t))
   b4680:	b508      	push	{r3, lr}
   b4682:	4b02      	ldr	r3, [pc, #8]	; (b468c <hal_pwm_write_ext+0xc>)
   b4684:	681b      	ldr	r3, [r3, #0]
   b4686:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b4688:	9301      	str	r3, [sp, #4]
   b468a:	bd08      	pop	{r3, pc}
   b468c:	0003022c 	.word	0x0003022c

000b4690 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b4690:	b508      	push	{r3, lr}
   b4692:	4b02      	ldr	r3, [pc, #8]	; (b469c <hal_i2c_write+0xc>)
   b4694:	681b      	ldr	r3, [r3, #0]
   b4696:	6a1b      	ldr	r3, [r3, #32]
   b4698:	9301      	str	r3, [sp, #4]
   b469a:	bd08      	pop	{r3, pc}
   b469c:	00030228 	.word	0x00030228

000b46a0 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b46a0:	b508      	push	{r3, lr}
   b46a2:	4b02      	ldr	r3, [pc, #8]	; (b46ac <hal_i2c_available+0xc>)
   b46a4:	681b      	ldr	r3, [r3, #0]
   b46a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b46a8:	9301      	str	r3, [sp, #4]
   b46aa:	bd08      	pop	{r3, pc}
   b46ac:	00030228 	.word	0x00030228

000b46b0 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b46b0:	b508      	push	{r3, lr}
   b46b2:	4b02      	ldr	r3, [pc, #8]	; (b46bc <hal_i2c_read+0xc>)
   b46b4:	681b      	ldr	r3, [r3, #0]
   b46b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b46b8:	9301      	str	r3, [sp, #4]
   b46ba:	bd08      	pop	{r3, pc}
   b46bc:	00030228 	.word	0x00030228

000b46c0 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b46c0:	b508      	push	{r3, lr}
   b46c2:	4b02      	ldr	r3, [pc, #8]	; (b46cc <hal_i2c_peek+0xc>)
   b46c4:	681b      	ldr	r3, [r3, #0]
   b46c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b46c8:	9301      	str	r3, [sp, #4]
   b46ca:	bd08      	pop	{r3, pc}
   b46cc:	00030228 	.word	0x00030228

000b46d0 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b46d0:	b508      	push	{r3, lr}
   b46d2:	4b02      	ldr	r3, [pc, #8]	; (b46dc <hal_i2c_flush+0xc>)
   b46d4:	681b      	ldr	r3, [r3, #0]
   b46d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b46d8:	9301      	str	r3, [sp, #4]
   b46da:	bd08      	pop	{r3, pc}
   b46dc:	00030228 	.word	0x00030228

000b46e0 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b46e0:	b508      	push	{r3, lr}
   b46e2:	4b02      	ldr	r3, [pc, #8]	; (b46ec <hal_i2c_is_enabled+0xc>)
   b46e4:	681b      	ldr	r3, [r3, #0]
   b46e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b46e8:	9301      	str	r3, [sp, #4]
   b46ea:	bd08      	pop	{r3, pc}
   b46ec:	00030228 	.word	0x00030228

000b46f0 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b46f0:	b508      	push	{r3, lr}
   b46f2:	4b02      	ldr	r3, [pc, #8]	; (b46fc <hal_i2c_init+0xc>)
   b46f4:	681b      	ldr	r3, [r3, #0]
   b46f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b46f8:	9301      	str	r3, [sp, #4]
   b46fa:	bd08      	pop	{r3, pc}
   b46fc:	00030228 	.word	0x00030228

000b4700 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4700:	b508      	push	{r3, lr}
   b4702:	4b02      	ldr	r3, [pc, #8]	; (b470c <inet_inet_ntop+0xc>)
   b4704:	681b      	ldr	r3, [r3, #0]
   b4706:	695b      	ldr	r3, [r3, #20]
   b4708:	9301      	str	r3, [sp, #4]
   b470a:	bd08      	pop	{r3, pc}
   b470c:	00030264 	.word	0x00030264

000b4710 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4710:	b508      	push	{r3, lr}
   b4712:	4b02      	ldr	r3, [pc, #8]	; (b471c <netdb_freeaddrinfo+0xc>)
   b4714:	681b      	ldr	r3, [r3, #0]
   b4716:	689b      	ldr	r3, [r3, #8]
   b4718:	9301      	str	r3, [sp, #4]
   b471a:	bd08      	pop	{r3, pc}
   b471c:	00030268 	.word	0x00030268

000b4720 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4720:	b508      	push	{r3, lr}
   b4722:	4b02      	ldr	r3, [pc, #8]	; (b472c <netdb_getaddrinfo+0xc>)
   b4724:	681b      	ldr	r3, [r3, #0]
   b4726:	68db      	ldr	r3, [r3, #12]
   b4728:	9301      	str	r3, [sp, #4]
   b472a:	bd08      	pop	{r3, pc}
   b472c:	00030268 	.word	0x00030268

000b4730 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b4730:	b508      	push	{r3, lr}
   b4732:	4b02      	ldr	r3, [pc, #8]	; (b473c <hal_spi_init+0xc>)
   b4734:	681b      	ldr	r3, [r3, #0]
   b4736:	69db      	ldr	r3, [r3, #28]
   b4738:	9301      	str	r3, [sp, #4]
   b473a:	bd08      	pop	{r3, pc}
   b473c:	00030230 	.word	0x00030230

000b4740 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b4740:	b508      	push	{r3, lr}
   b4742:	4b02      	ldr	r3, [pc, #8]	; (b474c <hal_spi_is_enabled+0xc>)
   b4744:	681b      	ldr	r3, [r3, #0]
   b4746:	6a1b      	ldr	r3, [r3, #32]
   b4748:	9301      	str	r3, [sp, #4]
   b474a:	bd08      	pop	{r3, pc}
   b474c:	00030230 	.word	0x00030230

000b4750 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4750:	b508      	push	{r3, lr}
   b4752:	4b02      	ldr	r3, [pc, #8]	; (b475c <hal_usart_write+0xc>)
   b4754:	681b      	ldr	r3, [r3, #0]
   b4756:	68db      	ldr	r3, [r3, #12]
   b4758:	9301      	str	r3, [sp, #4]
   b475a:	bd08      	pop	{r3, pc}
   b475c:	0003023c 	.word	0x0003023c

000b4760 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4760:	b508      	push	{r3, lr}
   b4762:	4b02      	ldr	r3, [pc, #8]	; (b476c <hal_usart_available+0xc>)
   b4764:	681b      	ldr	r3, [r3, #0]
   b4766:	691b      	ldr	r3, [r3, #16]
   b4768:	9301      	str	r3, [sp, #4]
   b476a:	bd08      	pop	{r3, pc}
   b476c:	0003023c 	.word	0x0003023c

000b4770 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4770:	b508      	push	{r3, lr}
   b4772:	4b02      	ldr	r3, [pc, #8]	; (b477c <hal_usart_read+0xc>)
   b4774:	681b      	ldr	r3, [r3, #0]
   b4776:	695b      	ldr	r3, [r3, #20]
   b4778:	9301      	str	r3, [sp, #4]
   b477a:	bd08      	pop	{r3, pc}
   b477c:	0003023c 	.word	0x0003023c

000b4780 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4780:	b508      	push	{r3, lr}
   b4782:	4b02      	ldr	r3, [pc, #8]	; (b478c <hal_usart_peek+0xc>)
   b4784:	681b      	ldr	r3, [r3, #0]
   b4786:	699b      	ldr	r3, [r3, #24]
   b4788:	9301      	str	r3, [sp, #4]
   b478a:	bd08      	pop	{r3, pc}
   b478c:	0003023c 	.word	0x0003023c

000b4790 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4790:	b508      	push	{r3, lr}
   b4792:	4b02      	ldr	r3, [pc, #8]	; (b479c <hal_usart_flush+0xc>)
   b4794:	681b      	ldr	r3, [r3, #0]
   b4796:	69db      	ldr	r3, [r3, #28]
   b4798:	9301      	str	r3, [sp, #4]
   b479a:	bd08      	pop	{r3, pc}
   b479c:	0003023c 	.word	0x0003023c

000b47a0 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b47a0:	b508      	push	{r3, lr}
   b47a2:	4b02      	ldr	r3, [pc, #8]	; (b47ac <hal_usart_is_enabled+0xc>)
   b47a4:	681b      	ldr	r3, [r3, #0]
   b47a6:	6a1b      	ldr	r3, [r3, #32]
   b47a8:	9301      	str	r3, [sp, #4]
   b47aa:	bd08      	pop	{r3, pc}
   b47ac:	0003023c 	.word	0x0003023c

000b47b0 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b47b0:	b508      	push	{r3, lr}
   b47b2:	4b02      	ldr	r3, [pc, #8]	; (b47bc <hal_usart_available_data_for_write+0xc>)
   b47b4:	681b      	ldr	r3, [r3, #0]
   b47b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b47b8:	9301      	str	r3, [sp, #4]
   b47ba:	bd08      	pop	{r3, pc}
   b47bc:	0003023c 	.word	0x0003023c

000b47c0 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b47c0:	b508      	push	{r3, lr}
   b47c2:	4b02      	ldr	r3, [pc, #8]	; (b47cc <hal_usart_init_ex+0xc>)
   b47c4:	681b      	ldr	r3, [r3, #0]
   b47c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b47c8:	9301      	str	r3, [sp, #4]
   b47ca:	bd08      	pop	{r3, pc}
   b47cc:	0003023c 	.word	0x0003023c

000b47d0 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b47d0:	b508      	push	{r3, lr}
   b47d2:	4b02      	ldr	r3, [pc, #8]	; (b47dc <HAL_USB_USART_Init+0xc>)
   b47d4:	681b      	ldr	r3, [r3, #0]
   b47d6:	681b      	ldr	r3, [r3, #0]
   b47d8:	9301      	str	r3, [sp, #4]
   b47da:	bd08      	pop	{r3, pc}
   b47dc:	0003024c 	.word	0x0003024c

000b47e0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b47e0:	b508      	push	{r3, lr}
   b47e2:	4b02      	ldr	r3, [pc, #8]	; (b47ec <HAL_USB_USART_Begin+0xc>)
   b47e4:	681b      	ldr	r3, [r3, #0]
   b47e6:	685b      	ldr	r3, [r3, #4]
   b47e8:	9301      	str	r3, [sp, #4]
   b47ea:	bd08      	pop	{r3, pc}
   b47ec:	0003024c 	.word	0x0003024c

000b47f0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b47f0:	b508      	push	{r3, lr}
   b47f2:	4b02      	ldr	r3, [pc, #8]	; (b47fc <HAL_USB_USART_Available_Data+0xc>)
   b47f4:	681b      	ldr	r3, [r3, #0]
   b47f6:	691b      	ldr	r3, [r3, #16]
   b47f8:	9301      	str	r3, [sp, #4]
   b47fa:	bd08      	pop	{r3, pc}
   b47fc:	0003024c 	.word	0x0003024c

000b4800 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4800:	b508      	push	{r3, lr}
   b4802:	4b02      	ldr	r3, [pc, #8]	; (b480c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4804:	681b      	ldr	r3, [r3, #0]
   b4806:	695b      	ldr	r3, [r3, #20]
   b4808:	9301      	str	r3, [sp, #4]
   b480a:	bd08      	pop	{r3, pc}
   b480c:	0003024c 	.word	0x0003024c

000b4810 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4810:	b508      	push	{r3, lr}
   b4812:	4b02      	ldr	r3, [pc, #8]	; (b481c <HAL_USB_USART_Receive_Data+0xc>)
   b4814:	681b      	ldr	r3, [r3, #0]
   b4816:	699b      	ldr	r3, [r3, #24]
   b4818:	9301      	str	r3, [sp, #4]
   b481a:	bd08      	pop	{r3, pc}
   b481c:	0003024c 	.word	0x0003024c

000b4820 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4820:	b508      	push	{r3, lr}
   b4822:	4b02      	ldr	r3, [pc, #8]	; (b482c <HAL_USB_USART_Send_Data+0xc>)
   b4824:	681b      	ldr	r3, [r3, #0]
   b4826:	69db      	ldr	r3, [r3, #28]
   b4828:	9301      	str	r3, [sp, #4]
   b482a:	bd08      	pop	{r3, pc}
   b482c:	0003024c 	.word	0x0003024c

000b4830 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4830:	b508      	push	{r3, lr}
   b4832:	4b02      	ldr	r3, [pc, #8]	; (b483c <HAL_USB_USART_Flush_Data+0xc>)
   b4834:	681b      	ldr	r3, [r3, #0]
   b4836:	6a1b      	ldr	r3, [r3, #32]
   b4838:	9301      	str	r3, [sp, #4]
   b483a:	bd08      	pop	{r3, pc}
   b483c:	0003024c 	.word	0x0003024c

000b4840 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4840:	b508      	push	{r3, lr}
   b4842:	4b02      	ldr	r3, [pc, #8]	; (b484c <set_system_mode+0xc>)
   b4844:	681b      	ldr	r3, [r3, #0]
   b4846:	685b      	ldr	r3, [r3, #4]
   b4848:	9301      	str	r3, [sp, #4]
   b484a:	bd08      	pop	{r3, pc}
   b484c:	00030220 	.word	0x00030220

000b4850 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b4850:	b508      	push	{r3, lr}
   b4852:	4b02      	ldr	r3, [pc, #8]	; (b485c <system_thread_set_state+0xc>)
   b4854:	681b      	ldr	r3, [r3, #0]
   b4856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4858:	9301      	str	r3, [sp, #4]
   b485a:	bd08      	pop	{r3, pc}
   b485c:	00030220 	.word	0x00030220

000b4860 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4860:	b508      	push	{r3, lr}
   b4862:	4b03      	ldr	r3, [pc, #12]	; (b4870 <system_ctrl_set_app_request_handler+0x10>)
   b4864:	681b      	ldr	r3, [r3, #0]
   b4866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b486a:	9301      	str	r3, [sp, #4]
   b486c:	bd08      	pop	{r3, pc}
   b486e:	0000      	.short	0x0000
   b4870:	00030220 	.word	0x00030220

000b4874 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b4874:	b508      	push	{r3, lr}
   b4876:	4b03      	ldr	r3, [pc, #12]	; (b4884 <system_ctrl_set_result+0x10>)
   b4878:	681b      	ldr	r3, [r3, #0]
   b487a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b487e:	9301      	str	r3, [sp, #4]
   b4880:	bd08      	pop	{r3, pc}
   b4882:	0000      	.short	0x0000
   b4884:	00030220 	.word	0x00030220

000b4888 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b4888:	b508      	push	{r3, lr}
   b488a:	4b02      	ldr	r3, [pc, #8]	; (b4894 <spark_set_random_seed_from_cloud_handler+0xc>)
   b488c:	681b      	ldr	r3, [r3, #0]
   b488e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4890:	9301      	str	r3, [sp, #4]
   b4892:	bd08      	pop	{r3, pc}
   b4894:	00030244 	.word	0x00030244

000b4898 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4898:	b508      	push	{r3, lr}
   b489a:	4b02      	ldr	r3, [pc, #8]	; (b48a4 <network_connect+0xc>)
   b489c:	681b      	ldr	r3, [r3, #0]
   b489e:	685b      	ldr	r3, [r3, #4]
   b48a0:	9301      	str	r3, [sp, #4]
   b48a2:	bd08      	pop	{r3, pc}
   b48a4:	00030240 	.word	0x00030240

000b48a8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b48a8:	b508      	push	{r3, lr}
   b48aa:	4b02      	ldr	r3, [pc, #8]	; (b48b4 <network_connecting+0xc>)
   b48ac:	681b      	ldr	r3, [r3, #0]
   b48ae:	689b      	ldr	r3, [r3, #8]
   b48b0:	9301      	str	r3, [sp, #4]
   b48b2:	bd08      	pop	{r3, pc}
   b48b4:	00030240 	.word	0x00030240

000b48b8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b48b8:	b508      	push	{r3, lr}
   b48ba:	4b02      	ldr	r3, [pc, #8]	; (b48c4 <network_disconnect+0xc>)
   b48bc:	681b      	ldr	r3, [r3, #0]
   b48be:	68db      	ldr	r3, [r3, #12]
   b48c0:	9301      	str	r3, [sp, #4]
   b48c2:	bd08      	pop	{r3, pc}
   b48c4:	00030240 	.word	0x00030240

000b48c8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b48c8:	b508      	push	{r3, lr}
   b48ca:	4b02      	ldr	r3, [pc, #8]	; (b48d4 <network_ready+0xc>)
   b48cc:	681b      	ldr	r3, [r3, #0]
   b48ce:	691b      	ldr	r3, [r3, #16]
   b48d0:	9301      	str	r3, [sp, #4]
   b48d2:	bd08      	pop	{r3, pc}
   b48d4:	00030240 	.word	0x00030240

000b48d8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b48d8:	b508      	push	{r3, lr}
   b48da:	4b02      	ldr	r3, [pc, #8]	; (b48e4 <network_on+0xc>)
   b48dc:	681b      	ldr	r3, [r3, #0]
   b48de:	695b      	ldr	r3, [r3, #20]
   b48e0:	9301      	str	r3, [sp, #4]
   b48e2:	bd08      	pop	{r3, pc}
   b48e4:	00030240 	.word	0x00030240

000b48e8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b48e8:	b508      	push	{r3, lr}
   b48ea:	4b02      	ldr	r3, [pc, #8]	; (b48f4 <network_off+0xc>)
   b48ec:	681b      	ldr	r3, [r3, #0]
   b48ee:	699b      	ldr	r3, [r3, #24]
   b48f0:	9301      	str	r3, [sp, #4]
   b48f2:	bd08      	pop	{r3, pc}
   b48f4:	00030240 	.word	0x00030240

000b48f8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b48f8:	b508      	push	{r3, lr}
   b48fa:	4b02      	ldr	r3, [pc, #8]	; (b4904 <network_listen+0xc>)
   b48fc:	681b      	ldr	r3, [r3, #0]
   b48fe:	69db      	ldr	r3, [r3, #28]
   b4900:	9301      	str	r3, [sp, #4]
   b4902:	bd08      	pop	{r3, pc}
   b4904:	00030240 	.word	0x00030240

000b4908 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b4908:	b508      	push	{r3, lr}
   b490a:	4b02      	ldr	r3, [pc, #8]	; (b4914 <network_listening+0xc>)
   b490c:	681b      	ldr	r3, [r3, #0]
   b490e:	6a1b      	ldr	r3, [r3, #32]
   b4910:	9301      	str	r3, [sp, #4]
   b4912:	bd08      	pop	{r3, pc}
   b4914:	00030240 	.word	0x00030240

000b4918 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4918:	b508      	push	{r3, lr}
   b491a:	4b02      	ldr	r3, [pc, #8]	; (b4924 <network_set_listen_timeout+0xc>)
   b491c:	681b      	ldr	r3, [r3, #0]
   b491e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4920:	9301      	str	r3, [sp, #4]
   b4922:	bd08      	pop	{r3, pc}
   b4924:	00030240 	.word	0x00030240

000b4928 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b4928:	b508      	push	{r3, lr}
   b492a:	4b02      	ldr	r3, [pc, #8]	; (b4934 <network_get_listen_timeout+0xc>)
   b492c:	681b      	ldr	r3, [r3, #0]
   b492e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4930:	9301      	str	r3, [sp, #4]
   b4932:	bd08      	pop	{r3, pc}
   b4934:	00030240 	.word	0x00030240

000b4938 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b4938:	b508      	push	{r3, lr}
   b493a:	4b02      	ldr	r3, [pc, #8]	; (b4944 <network_is_on+0xc>)
   b493c:	681b      	ldr	r3, [r3, #0]
   b493e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4940:	9301      	str	r3, [sp, #4]
   b4942:	bd08      	pop	{r3, pc}
   b4944:	00030240 	.word	0x00030240

000b4948 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b4948:	b508      	push	{r3, lr}
   b494a:	4b02      	ldr	r3, [pc, #8]	; (b4954 <network_is_off+0xc>)
   b494c:	681b      	ldr	r3, [r3, #0]
   b494e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4950:	9301      	str	r3, [sp, #4]
   b4952:	bd08      	pop	{r3, pc}
   b4954:	00030240 	.word	0x00030240

000b4958 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b4958:	b508      	push	{r3, lr}
   b495a:	4b02      	ldr	r3, [pc, #8]	; (b4964 <malloc+0xc>)
   b495c:	681b      	ldr	r3, [r3, #0]
   b495e:	681b      	ldr	r3, [r3, #0]
   b4960:	9301      	str	r3, [sp, #4]
   b4962:	bd08      	pop	{r3, pc}
   b4964:	0003021c 	.word	0x0003021c

000b4968 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b4968:	b508      	push	{r3, lr}
   b496a:	4b02      	ldr	r3, [pc, #8]	; (b4974 <free+0xc>)
   b496c:	681b      	ldr	r3, [r3, #0]
   b496e:	685b      	ldr	r3, [r3, #4]
   b4970:	9301      	str	r3, [sp, #4]
   b4972:	bd08      	pop	{r3, pc}
   b4974:	0003021c 	.word	0x0003021c

000b4978 <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b4978:	b508      	push	{r3, lr}
   b497a:	4b02      	ldr	r3, [pc, #8]	; (b4984 <__assert_func+0xc>)
   b497c:	681b      	ldr	r3, [r3, #0]
   b497e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4980:	9301      	str	r3, [sp, #4]
   b4982:	bd08      	pop	{r3, pc}
   b4984:	0003021c 	.word	0x0003021c

000b4988 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b4988:	b508      	push	{r3, lr}
   b498a:	4b02      	ldr	r3, [pc, #8]	; (b4994 <newlib_impure_ptr_callback+0xc>)
   b498c:	681b      	ldr	r3, [r3, #0]
   b498e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4990:	9301      	str	r3, [sp, #4]
   b4992:	bd08      	pop	{r3, pc}
   b4994:	0003021c 	.word	0x0003021c

000b4998 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b4998:	4802      	ldr	r0, [pc, #8]	; (b49a4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b499a:	2300      	movs	r3, #0
   b499c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b499e:	f7ff be1f 	b.w	b45e0 <os_mutex_recursive_create>
   b49a2:	bf00      	nop
   b49a4:	2003e6b8 	.word	0x2003e6b8

000b49a8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b49a8:	2200      	movs	r2, #0
   b49aa:	6840      	ldr	r0, [r0, #4]
   b49ac:	4611      	mov	r1, r2
   b49ae:	f7ff bfab 	b.w	b4908 <network_listening>

000b49b2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b49b2:	2200      	movs	r2, #0
   b49b4:	6840      	ldr	r0, [r0, #4]
   b49b6:	4611      	mov	r1, r2
   b49b8:	f7ff bfb6 	b.w	b4928 <network_get_listen_timeout>

000b49bc <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b49bc:	6840      	ldr	r0, [r0, #4]
   b49be:	2200      	movs	r2, #0
   b49c0:	f7ff bfaa 	b.w	b4918 <network_set_listen_timeout>

000b49c4 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b49c4:	6840      	ldr	r0, [r0, #4]
   b49c6:	2200      	movs	r2, #0
   b49c8:	f081 0101 	eor.w	r1, r1, #1
   b49cc:	f7ff bf94 	b.w	b48f8 <network_listen>

000b49d0 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b49d0:	2300      	movs	r3, #0
   b49d2:	6840      	ldr	r0, [r0, #4]
   b49d4:	461a      	mov	r2, r3
   b49d6:	4619      	mov	r1, r3
   b49d8:	f7ff bf86 	b.w	b48e8 <network_off>

000b49dc <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b49dc:	2300      	movs	r3, #0
   b49de:	6840      	ldr	r0, [r0, #4]
   b49e0:	461a      	mov	r2, r3
   b49e2:	4619      	mov	r1, r3
   b49e4:	f7ff bf78 	b.w	b48d8 <network_on>

000b49e8 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b49e8:	2200      	movs	r2, #0
   b49ea:	6840      	ldr	r0, [r0, #4]
   b49ec:	4611      	mov	r1, r2
   b49ee:	f7ff bf6b 	b.w	b48c8 <network_ready>

000b49f2 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b49f2:	2200      	movs	r2, #0
   b49f4:	6840      	ldr	r0, [r0, #4]
   b49f6:	4611      	mov	r1, r2
   b49f8:	f7ff bf56 	b.w	b48a8 <network_connecting>

000b49fc <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b49fc:	6840      	ldr	r0, [r0, #4]
   b49fe:	2200      	movs	r2, #0
   b4a00:	2102      	movs	r1, #2
   b4a02:	f7ff bf59 	b.w	b48b8 <network_disconnect>

000b4a06 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b4a06:	2300      	movs	r3, #0
   b4a08:	6840      	ldr	r0, [r0, #4]
   b4a0a:	461a      	mov	r2, r3
   b4a0c:	f7ff bf44 	b.w	b4898 <network_connect>

000b4a10 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b4a10:	4b02      	ldr	r3, [pc, #8]	; (b4a1c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b4a12:	2203      	movs	r2, #3
   b4a14:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b4a16:	4a02      	ldr	r2, [pc, #8]	; (b4a20 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b4a18:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b4a1a:	4770      	bx	lr
   b4a1c:	2003e6bc 	.word	0x2003e6bc
   b4a20:	000b5590 	.word	0x000b5590

000b4a24 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b4a24:	4770      	bx	lr

000b4a26 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b4a26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4a28:	4606      	mov	r6, r0
   b4a2a:	4615      	mov	r5, r2
   b4a2c:	460c      	mov	r4, r1
   b4a2e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b4a30:	42bc      	cmp	r4, r7
   b4a32:	d006      	beq.n	b4a42 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b4a34:	6833      	ldr	r3, [r6, #0]
   b4a36:	f814 1b01 	ldrb.w	r1, [r4], #1
   b4a3a:	689b      	ldr	r3, [r3, #8]
   b4a3c:	4630      	mov	r0, r6
   b4a3e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b4a40:	e7f6      	b.n	b4a30 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b4a42:	4628      	mov	r0, r5
   b4a44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4a46 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b4a46:	7c00      	ldrb	r0, [r0, #16]
   b4a48:	2200      	movs	r2, #0
   b4a4a:	f7ff be21 	b.w	b4690 <hal_i2c_write>

000b4a4e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b4a4e:	7c00      	ldrb	r0, [r0, #16]
   b4a50:	2100      	movs	r1, #0
   b4a52:	f7ff be25 	b.w	b46a0 <hal_i2c_available>

000b4a56 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b4a56:	7c00      	ldrb	r0, [r0, #16]
   b4a58:	2100      	movs	r1, #0
   b4a5a:	f7ff be29 	b.w	b46b0 <hal_i2c_read>

000b4a5e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b4a5e:	7c00      	ldrb	r0, [r0, #16]
   b4a60:	2100      	movs	r1, #0
   b4a62:	f7ff be2d 	b.w	b46c0 <hal_i2c_peek>

000b4a66 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b4a66:	7c00      	ldrb	r0, [r0, #16]
   b4a68:	2100      	movs	r1, #0
   b4a6a:	f7ff be31 	b.w	b46d0 <hal_i2c_flush>

000b4a6e <_ZN7TwoWireD0Ev>:
   b4a6e:	b510      	push	{r4, lr}
   b4a70:	2114      	movs	r1, #20
   b4a72:	4604      	mov	r4, r0
   b4a74:	f7ff fcfb 	bl	b446e <_ZdlPvj>
   b4a78:	4620      	mov	r0, r4
   b4a7a:	bd10      	pop	{r4, pc}

000b4a7c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b4a7c:	b538      	push	{r3, r4, r5, lr}
   b4a7e:	4604      	mov	r4, r0
   b4a80:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b4a82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4a86:	2200      	movs	r2, #0
   b4a88:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b4a8c:	4b09      	ldr	r3, [pc, #36]	; (b4ab4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b4a8e:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b4a90:	4608      	mov	r0, r1
   b4a92:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b4a94:	4629      	mov	r1, r5
   b4a96:	f7ff fe2b 	bl	b46f0 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b4a9a:	30bf      	adds	r0, #191	; 0xbf
   b4a9c:	d108      	bne.n	b4ab0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b4a9e:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b4aa0:	07db      	lsls	r3, r3, #31
   b4aa2:	d505      	bpl.n	b4ab0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b4aa4:	6868      	ldr	r0, [r5, #4]
   b4aa6:	f7ff ff5f 	bl	b4968 <free>
    free(conf.tx_buffer);
   b4aaa:	68e8      	ldr	r0, [r5, #12]
   b4aac:	f7ff ff5c 	bl	b4968 <free>
}
   b4ab0:	4620      	mov	r0, r4
   b4ab2:	bd38      	pop	{r3, r4, r5, pc}
   b4ab4:	000b55cc 	.word	0x000b55cc

000b4ab8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b4ab8:	4770      	bx	lr

000b4aba <_ZN9IPAddressD0Ev>:
   b4aba:	b510      	push	{r4, lr}
   b4abc:	2118      	movs	r1, #24
   b4abe:	4604      	mov	r4, r0
   b4ac0:	f7ff fcd5 	bl	b446e <_ZdlPvj>
   b4ac4:	4620      	mov	r0, r4
   b4ac6:	bd10      	pop	{r4, pc}

000b4ac8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b4ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b4aca:	7d03      	ldrb	r3, [r0, #20]
   b4acc:	2b06      	cmp	r3, #6
{
   b4ace:	b08d      	sub	sp, #52	; 0x34
   b4ad0:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4ad2:	f100 0704 	add.w	r7, r0, #4
   b4ad6:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b4ada:	d012      	beq.n	b4b02 <_ZNK9IPAddress7printToER5Print+0x3a>
   b4adc:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4ae0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b4ae4:	220a      	movs	r2, #10
   b4ae6:	4630      	mov	r0, r6
   b4ae8:	f000 f959 	bl	b4d9e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b4aec:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b4aee:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b4af0:	d019      	beq.n	b4b26 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b4af2:	2c00      	cmp	r4, #0
   b4af4:	d0f4      	beq.n	b4ae0 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b4af6:	212e      	movs	r1, #46	; 0x2e
   b4af8:	4630      	mov	r0, r6
   b4afa:	f000 f937 	bl	b4d6c <_ZN5Print5printEc>
   b4afe:	4404      	add	r4, r0
   b4b00:	e7ee      	b.n	b4ae0 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4b02:	232f      	movs	r3, #47	; 0x2f
   b4b04:	466a      	mov	r2, sp
   b4b06:	4639      	mov	r1, r7
   b4b08:	200a      	movs	r0, #10
		buf[0] = 0;
   b4b0a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4b0e:	f7ff fdf7 	bl	b4700 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b4b12:	4668      	mov	r0, sp
   b4b14:	f7ff fc66 	bl	b43e4 <strlen>
   b4b18:	6833      	ldr	r3, [r6, #0]
   b4b1a:	4602      	mov	r2, r0
   b4b1c:	68db      	ldr	r3, [r3, #12]
   b4b1e:	4669      	mov	r1, sp
   b4b20:	4630      	mov	r0, r6
   b4b22:	4798      	blx	r3
   b4b24:	4604      	mov	r4, r0
    }
    return n;
}
   b4b26:	4620      	mov	r0, r4
   b4b28:	b00d      	add	sp, #52	; 0x34
   b4b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b4b2c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b4b2c:	b510      	push	{r4, lr}
   b4b2e:	4b05      	ldr	r3, [pc, #20]	; (b4b44 <_ZN9IPAddressC1Ev+0x18>)
   b4b30:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b4b32:	2211      	movs	r2, #17
   b4b34:	f840 3b04 	str.w	r3, [r0], #4
   b4b38:	2100      	movs	r1, #0
   b4b3a:	f000 fc79 	bl	b5430 <memset>
}
   b4b3e:	4620      	mov	r0, r4
   b4b40:	bd10      	pop	{r4, pc}
   b4b42:	bf00      	nop
   b4b44:	000b55f4 	.word	0x000b55f4

000b4b48 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b4b48:	4603      	mov	r3, r0
   b4b4a:	4a07      	ldr	r2, [pc, #28]	; (b4b68 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b4b4c:	b510      	push	{r4, lr}
   b4b4e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b4b52:	f101 0210 	add.w	r2, r1, #16
   b4b56:	f851 4b04 	ldr.w	r4, [r1], #4
   b4b5a:	f843 4b04 	str.w	r4, [r3], #4
   b4b5e:	4291      	cmp	r1, r2
   b4b60:	d1f9      	bne.n	b4b56 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b4b62:	780a      	ldrb	r2, [r1, #0]
   b4b64:	701a      	strb	r2, [r3, #0]
}
   b4b66:	bd10      	pop	{r4, pc}
   b4b68:	000b55f4 	.word	0x000b55f4

000b4b6c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b4b6c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b4b6e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b4b72:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b4b76:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b4b7a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b4b7e:	2304      	movs	r3, #4
   b4b80:	6041      	str	r1, [r0, #4]
   b4b82:	7503      	strb	r3, [r0, #20]
}
   b4b84:	bd10      	pop	{r4, pc}
	...

000b4b88 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b4b88:	b507      	push	{r0, r1, r2, lr}
   b4b8a:	4b06      	ldr	r3, [pc, #24]	; (b4ba4 <_ZN9IPAddressC1EPKh+0x1c>)
   b4b8c:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b4b8e:	78cb      	ldrb	r3, [r1, #3]
   b4b90:	9300      	str	r3, [sp, #0]
   b4b92:	788b      	ldrb	r3, [r1, #2]
   b4b94:	784a      	ldrb	r2, [r1, #1]
   b4b96:	7809      	ldrb	r1, [r1, #0]
   b4b98:	f7ff ffe8 	bl	b4b6c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b4b9c:	b003      	add	sp, #12
   b4b9e:	f85d fb04 	ldr.w	pc, [sp], #4
   b4ba2:	bf00      	nop
   b4ba4:	000b55f4 	.word	0x000b55f4

000b4ba8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b4ba8:	4b01      	ldr	r3, [pc, #4]	; (b4bb0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b4baa:	4a02      	ldr	r2, [pc, #8]	; (b4bb4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b4bac:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b4bae:	4770      	bx	lr
   b4bb0:	2003e6c4 	.word	0x2003e6c4
   b4bb4:	000b5600 	.word	0x000b5600

000b4bb8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b4bb8:	2300      	movs	r3, #0
   b4bba:	6840      	ldr	r0, [r0, #4]
   b4bbc:	461a      	mov	r2, r3
   b4bbe:	f7ff be6b 	b.w	b4898 <network_connect>

000b4bc2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b4bc2:	6840      	ldr	r0, [r0, #4]
   b4bc4:	2200      	movs	r2, #0
   b4bc6:	2102      	movs	r1, #2
   b4bc8:	f7ff be76 	b.w	b48b8 <network_disconnect>

000b4bcc <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b4bcc:	2200      	movs	r2, #0
   b4bce:	6840      	ldr	r0, [r0, #4]
   b4bd0:	4611      	mov	r1, r2
   b4bd2:	f7ff be69 	b.w	b48a8 <network_connecting>

000b4bd6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b4bd6:	2200      	movs	r2, #0
   b4bd8:	6840      	ldr	r0, [r0, #4]
   b4bda:	4611      	mov	r1, r2
   b4bdc:	f7ff be74 	b.w	b48c8 <network_ready>

000b4be0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b4be0:	2300      	movs	r3, #0
   b4be2:	6840      	ldr	r0, [r0, #4]
   b4be4:	461a      	mov	r2, r3
   b4be6:	4619      	mov	r1, r3
   b4be8:	f7ff be76 	b.w	b48d8 <network_on>

000b4bec <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b4bec:	2300      	movs	r3, #0
   b4bee:	6840      	ldr	r0, [r0, #4]
   b4bf0:	461a      	mov	r2, r3
   b4bf2:	4619      	mov	r1, r3
   b4bf4:	f7ff be78 	b.w	b48e8 <network_off>

000b4bf8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b4bf8:	6840      	ldr	r0, [r0, #4]
   b4bfa:	2100      	movs	r1, #0
   b4bfc:	f7ff be9c 	b.w	b4938 <network_is_on>

000b4c00 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b4c00:	6840      	ldr	r0, [r0, #4]
   b4c02:	2100      	movs	r1, #0
   b4c04:	f7ff bea0 	b.w	b4948 <network_is_off>

000b4c08 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b4c08:	6840      	ldr	r0, [r0, #4]
   b4c0a:	2200      	movs	r2, #0
   b4c0c:	f081 0101 	eor.w	r1, r1, #1
   b4c10:	f7ff be72 	b.w	b48f8 <network_listen>

000b4c14 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b4c14:	6840      	ldr	r0, [r0, #4]
   b4c16:	2200      	movs	r2, #0
   b4c18:	f7ff be7e 	b.w	b4918 <network_set_listen_timeout>

000b4c1c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b4c1c:	2200      	movs	r2, #0
   b4c1e:	6840      	ldr	r0, [r0, #4]
   b4c20:	4611      	mov	r1, r2
   b4c22:	f7ff be81 	b.w	b4928 <network_get_listen_timeout>

000b4c26 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b4c26:	2200      	movs	r2, #0
   b4c28:	6840      	ldr	r0, [r0, #4]
   b4c2a:	4611      	mov	r1, r2
   b4c2c:	f7ff be6c 	b.w	b4908 <network_listening>

000b4c30 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b4c30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b4c34:	b095      	sub	sp, #84	; 0x54
   b4c36:	4614      	mov	r4, r2
   b4c38:	460d      	mov	r5, r1
   b4c3a:	4607      	mov	r7, r0
    IPAddress addr;
   b4c3c:	f7ff ff76 	bl	b4b2c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b4c40:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b4c42:	221c      	movs	r2, #28
   b4c44:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b4c46:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b4c48:	f000 fbf2 	bl	b5430 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b4c4c:	2340      	movs	r3, #64	; 0x40
   b4c4e:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b4c50:	4620      	mov	r0, r4
   b4c52:	466b      	mov	r3, sp
   b4c54:	aa0c      	add	r2, sp, #48	; 0x30
   b4c56:	2100      	movs	r1, #0
   b4c58:	f7ff fd62 	bl	b4720 <netdb_getaddrinfo>
    if (!r) {
   b4c5c:	4604      	mov	r4, r0
   b4c5e:	2800      	cmp	r0, #0
   b4c60:	d14b      	bne.n	b4cfa <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b4c62:	4602      	mov	r2, r0
   b4c64:	2101      	movs	r1, #1
   b4c66:	6868      	ldr	r0, [r5, #4]
   b4c68:	f7ff fe2e 	bl	b48c8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b4c6c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b4c6e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b4c70:	4622      	mov	r2, r4
   b4c72:	6868      	ldr	r0, [r5, #4]
   b4c74:	f7ff fe28 	bl	b48c8 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4c78:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b4c7a:	4681      	mov	r9, r0
        bool ok = false;
   b4c7c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4c7e:	2e00      	cmp	r6, #0
   b4c80:	d03b      	beq.n	b4cfa <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b4c82:	2900      	cmp	r1, #0
   b4c84:	d139      	bne.n	b4cfa <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b4c86:	6873      	ldr	r3, [r6, #4]
   b4c88:	2b02      	cmp	r3, #2
   b4c8a:	d003      	beq.n	b4c94 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b4c8c:	2b0a      	cmp	r3, #10
   b4c8e:	d011      	beq.n	b4cb4 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4c90:	69f6      	ldr	r6, [r6, #28]
   b4c92:	e7f4      	b.n	b4c7e <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b4c94:	f1b8 0f00 	cmp.w	r8, #0
   b4c98:	d0fa      	beq.n	b4c90 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b4c9a:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b4c9c:	a806      	add	r0, sp, #24
   b4c9e:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b4ca0:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b4ca2:	f7ff ff71 	bl	b4b88 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b4ca6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4ca8:	1d3c      	adds	r4, r7, #4
   b4caa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4cac:	682b      	ldr	r3, [r5, #0]
   b4cae:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b4cb0:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b4cb2:	e7ed      	b.n	b4c90 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b4cb4:	f1b9 0f00 	cmp.w	r9, #0
   b4cb8:	d0ea      	beq.n	b4c90 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b4cba:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b4cbc:	2210      	movs	r2, #16
   b4cbe:	a801      	add	r0, sp, #4
   b4cc0:	f000 fbb6 	bl	b5430 <memset>
                    a.v = 6;
   b4cc4:	2306      	movs	r3, #6
   b4cc6:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b4cca:	ad01      	add	r5, sp, #4
   b4ccc:	f104 0308 	add.w	r3, r4, #8
   b4cd0:	3418      	adds	r4, #24
   b4cd2:	6818      	ldr	r0, [r3, #0]
   b4cd4:	6859      	ldr	r1, [r3, #4]
   b4cd6:	462a      	mov	r2, r5
   b4cd8:	c203      	stmia	r2!, {r0, r1}
   b4cda:	3308      	adds	r3, #8
   b4cdc:	42a3      	cmp	r3, r4
   b4cde:	4615      	mov	r5, r2
   b4ce0:	d1f7      	bne.n	b4cd2 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b4ce2:	a901      	add	r1, sp, #4
   b4ce4:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b4ce6:	ad07      	add	r5, sp, #28
   b4ce8:	f7ff ff2e 	bl	b4b48 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b4cec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4cee:	1d3c      	adds	r4, r7, #4
   b4cf0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4cf2:	682b      	ldr	r3, [r5, #0]
   b4cf4:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b4cf6:	4649      	mov	r1, r9
   b4cf8:	e7ca      	b.n	b4c90 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b4cfa:	9800      	ldr	r0, [sp, #0]
   b4cfc:	f7ff fd08 	bl	b4710 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b4d00:	4638      	mov	r0, r7
   b4d02:	b015      	add	sp, #84	; 0x54
   b4d04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b4d08 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b4d08:	4b02      	ldr	r3, [pc, #8]	; (b4d14 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b4d0a:	4a03      	ldr	r2, [pc, #12]	; (b4d18 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b4d0c:	601a      	str	r2, [r3, #0]
   b4d0e:	2200      	movs	r2, #0
   b4d10:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
   b4d12:	4770      	bx	lr
   b4d14:	2003e6c8 	.word	0x2003e6c8
   b4d18:	000b560c 	.word	0x000b560c

000b4d1c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b4d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4d1e:	4606      	mov	r6, r0
   b4d20:	460d      	mov	r5, r1
  size_t n = 0;
   b4d22:	188f      	adds	r7, r1, r2
   b4d24:	2400      	movs	r4, #0
  while (size--) {
   b4d26:	42bd      	cmp	r5, r7
   b4d28:	d00c      	beq.n	b4d44 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b4d2a:	6833      	ldr	r3, [r6, #0]
   b4d2c:	f815 1b01 	ldrb.w	r1, [r5], #1
   b4d30:	689b      	ldr	r3, [r3, #8]
   b4d32:	4630      	mov	r0, r6
   b4d34:	4798      	blx	r3
     if (chunk>=0)
   b4d36:	1e03      	subs	r3, r0, #0
   b4d38:	db01      	blt.n	b4d3e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b4d3a:	441c      	add	r4, r3
  while (size--) {
   b4d3c:	e7f3      	b.n	b4d26 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b4d3e:	2c00      	cmp	r4, #0
   b4d40:	bf08      	it	eq
   b4d42:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b4d44:	4620      	mov	r0, r4
   b4d46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4d48 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b4d48:	b513      	push	{r0, r1, r4, lr}
   b4d4a:	4604      	mov	r4, r0
    }
   b4d4c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b4d4e:	b159      	cbz	r1, b4d68 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b4d50:	9101      	str	r1, [sp, #4]
   b4d52:	f7ff fb47 	bl	b43e4 <strlen>
   b4d56:	6823      	ldr	r3, [r4, #0]
   b4d58:	9901      	ldr	r1, [sp, #4]
   b4d5a:	68db      	ldr	r3, [r3, #12]
   b4d5c:	4602      	mov	r2, r0
   b4d5e:	4620      	mov	r0, r4
    }
   b4d60:	b002      	add	sp, #8
   b4d62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b4d66:	4718      	bx	r3
    }
   b4d68:	b002      	add	sp, #8
   b4d6a:	bd10      	pop	{r4, pc}

000b4d6c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b4d6c:	6803      	ldr	r3, [r0, #0]
   b4d6e:	689b      	ldr	r3, [r3, #8]
   b4d70:	4718      	bx	r3

000b4d72 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b4d72:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b4d74:	210d      	movs	r1, #13
{
   b4d76:	4605      	mov	r5, r0
  size_t n = print('\r');
   b4d78:	f7ff fff8 	bl	b4d6c <_ZN5Print5printEc>
  n += print('\n');
   b4d7c:	210a      	movs	r1, #10
  size_t n = print('\r');
   b4d7e:	4604      	mov	r4, r0
  n += print('\n');
   b4d80:	4628      	mov	r0, r5
   b4d82:	f7ff fff3 	bl	b4d6c <_ZN5Print5printEc>
  return n;
}
   b4d86:	4420      	add	r0, r4
   b4d88:	bd38      	pop	{r3, r4, r5, pc}

000b4d8a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b4d8a:	b538      	push	{r3, r4, r5, lr}
   b4d8c:	4605      	mov	r5, r0
  return write(str);
   b4d8e:	f7ff ffdb 	bl	b4d48 <_ZN5Print5writeEPKc>
   b4d92:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b4d94:	4628      	mov	r0, r5
   b4d96:	f7ff ffec 	bl	b4d72 <_ZN5Print7printlnEv>
  return n;
}
   b4d9a:	4420      	add	r0, r4
   b4d9c:	bd38      	pop	{r3, r4, r5, pc}

000b4d9e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b4d9e:	b530      	push	{r4, r5, lr}
   b4da0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b4da2:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b4da4:	2a01      	cmp	r2, #1
  *str = '\0';
   b4da6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b4daa:	bf98      	it	ls
   b4dac:	220a      	movls	r2, #10
   b4dae:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b4db0:	460d      	mov	r5, r1
   b4db2:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b4db6:	fb01 5312 	mls	r3, r1, r2, r5
   b4dba:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4dbe:	2b09      	cmp	r3, #9
   b4dc0:	bf94      	ite	ls
   b4dc2:	3330      	addls	r3, #48	; 0x30
   b4dc4:	3337      	addhi	r3, #55	; 0x37
   b4dc6:	b2db      	uxtb	r3, r3
  } while(n);
   b4dc8:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4dca:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b4dce:	d9ef      	bls.n	b4db0 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b4dd0:	4621      	mov	r1, r4
   b4dd2:	f7ff ffb9 	bl	b4d48 <_ZN5Print5writeEPKc>
}
   b4dd6:	b00b      	add	sp, #44	; 0x2c
   b4dd8:	bd30      	pop	{r4, r5, pc}
	...

000b4ddc <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b4ddc:	4b01      	ldr	r3, [pc, #4]	; (b4de4 <_GLOBAL__sub_I_RGB+0x8>)
   b4dde:	2200      	movs	r2, #0
   b4de0:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b4de2:	4770      	bx	lr
   b4de4:	2003e6d0 	.word	0x2003e6d0

000b4de8 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b4de8:	b510      	push	{r4, lr}
   b4dea:	4604      	mov	r4, r0
   b4dec:	4608      	mov	r0, r1
{
    _spi = spi;
   b4dee:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b4df0:	f7ff fc9e 	bl	b4730 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b4df4:	2300      	movs	r3, #0
   b4df6:	6063      	str	r3, [r4, #4]
}
   b4df8:	4620      	mov	r0, r4
   b4dfa:	bd10      	pop	{r4, pc}

000b4dfc <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b4dfc:	4b05      	ldr	r3, [pc, #20]	; (b4e14 <_GLOBAL__sub_I_System+0x18>)
   b4dfe:	2202      	movs	r2, #2
   b4e00:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4e02:	4b05      	ldr	r3, [pc, #20]	; (b4e18 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b4e04:	4a05      	ldr	r2, [pc, #20]	; (b4e1c <_GLOBAL__sub_I_System+0x20>)
   b4e06:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4e08:	2000      	movs	r0, #0
   b4e0a:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4e0e:	f7ff bd17 	b.w	b4840 <set_system_mode>
   b4e12:	bf00      	nop
   b4e14:	2003e6ec 	.word	0x2003e6ec
   b4e18:	2003e6e0 	.word	0x2003e6e0
   b4e1c:	ffff0000 	.word	0xffff0000

000b4e20 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b4e20:	4b02      	ldr	r3, [pc, #8]	; (b4e2c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b4e22:	681a      	ldr	r2, [r3, #0]
   b4e24:	4b02      	ldr	r3, [pc, #8]	; (b4e30 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b4e26:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b4e28:	4770      	bx	lr
   b4e2a:	bf00      	nop
   b4e2c:	2003e630 	.word	0x2003e630
   b4e30:	2003e6f0 	.word	0x2003e6f0

000b4e34 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b4e34:	4770      	bx	lr

000b4e36 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b4e36:	7441      	strb	r1, [r0, #17]
}
   b4e38:	4770      	bx	lr

000b4e3a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b4e3a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b4e3c:	7c00      	ldrb	r0, [r0, #16]
   b4e3e:	f7ff fcb7 	bl	b47b0 <hal_usart_available_data_for_write>
}
   b4e42:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4e46:	bd08      	pop	{r3, pc}

000b4e48 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b4e48:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b4e4a:	7c00      	ldrb	r0, [r0, #16]
   b4e4c:	f7ff fc88 	bl	b4760 <hal_usart_available>
}
   b4e50:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4e54:	bd08      	pop	{r3, pc}

000b4e56 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b4e56:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b4e58:	7c00      	ldrb	r0, [r0, #16]
   b4e5a:	f7ff fc91 	bl	b4780 <hal_usart_peek>
}
   b4e5e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4e62:	bd08      	pop	{r3, pc}

000b4e64 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b4e64:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b4e66:	7c00      	ldrb	r0, [r0, #16]
   b4e68:	f7ff fc82 	bl	b4770 <hal_usart_read>
}
   b4e6c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4e70:	bd08      	pop	{r3, pc}

000b4e72 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b4e72:	7c00      	ldrb	r0, [r0, #16]
   b4e74:	f7ff bc8c 	b.w	b4790 <hal_usart_flush>

000b4e78 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b4e78:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b4e7a:	7c45      	ldrb	r5, [r0, #17]
{
   b4e7c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b4e7e:	b12d      	cbz	r5, b4e8c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b4e80:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b4e82:	b003      	add	sp, #12
   b4e84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b4e88:	f7ff bc62 	b.w	b4750 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b4e8c:	7c00      	ldrb	r0, [r0, #16]
   b4e8e:	9101      	str	r1, [sp, #4]
   b4e90:	f7ff fc8e 	bl	b47b0 <hal_usart_available_data_for_write>
   b4e94:	2800      	cmp	r0, #0
   b4e96:	9901      	ldr	r1, [sp, #4]
   b4e98:	dcf2      	bgt.n	b4e80 <_ZN11USARTSerial5writeEh+0x8>
}
   b4e9a:	4628      	mov	r0, r5
   b4e9c:	b003      	add	sp, #12
   b4e9e:	bd30      	pop	{r4, r5, pc}

000b4ea0 <_ZN11USARTSerialD0Ev>:
   b4ea0:	b510      	push	{r4, lr}
   b4ea2:	2114      	movs	r1, #20
   b4ea4:	4604      	mov	r4, r0
   b4ea6:	f7ff fae2 	bl	b446e <_ZdlPvj>
   b4eaa:	4620      	mov	r0, r4
   b4eac:	bd10      	pop	{r4, pc}
	...

000b4eb0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b4eb0:	b510      	push	{r4, lr}
   b4eb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4eb6:	4604      	mov	r4, r0
   b4eb8:	4608      	mov	r0, r1
   b4eba:	4611      	mov	r1, r2
   b4ebc:	2200      	movs	r2, #0
   b4ebe:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b4ec2:	4b04      	ldr	r3, [pc, #16]	; (b4ed4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b4ec4:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b4ec6:	2301      	movs	r3, #1
  _serial = serial;
   b4ec8:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b4eca:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b4ecc:	f7ff fc78 	bl	b47c0 <hal_usart_init_ex>
}
   b4ed0:	4620      	mov	r0, r4
   b4ed2:	bd10      	pop	{r4, pc}
   b4ed4:	000b5664 	.word	0x000b5664

000b4ed8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b4ed8:	7441      	strb	r1, [r0, #17]
}
   b4eda:	4770      	bx	lr

000b4edc <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4edc:	4770      	bx	lr

000b4ede <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b4ede:	4770      	bx	lr

000b4ee0 <_ZN9USBSerial4readEv>:
{
   b4ee0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b4ee2:	2100      	movs	r1, #0
   b4ee4:	7c00      	ldrb	r0, [r0, #16]
   b4ee6:	f7ff fc93 	bl	b4810 <HAL_USB_USART_Receive_Data>
}
   b4eea:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4eee:	bd08      	pop	{r3, pc}

000b4ef0 <_ZN9USBSerial4peekEv>:
{
   b4ef0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b4ef2:	2101      	movs	r1, #1
   b4ef4:	7c00      	ldrb	r0, [r0, #16]
   b4ef6:	f7ff fc8b 	bl	b4810 <HAL_USB_USART_Receive_Data>
}
   b4efa:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4efe:	bd08      	pop	{r3, pc}

000b4f00 <_ZN9USBSerial17availableForWriteEv>:
{
   b4f00:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b4f02:	7c00      	ldrb	r0, [r0, #16]
   b4f04:	f7ff fc7c 	bl	b4800 <HAL_USB_USART_Available_Data_For_Write>
}
   b4f08:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4f0c:	bd08      	pop	{r3, pc}

000b4f0e <_ZN9USBSerial9availableEv>:
{
   b4f0e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b4f10:	7c00      	ldrb	r0, [r0, #16]
   b4f12:	f7ff fc6d 	bl	b47f0 <HAL_USB_USART_Available_Data>
}
   b4f16:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4f1a:	bd08      	pop	{r3, pc}

000b4f1c <_ZN9USBSerial5writeEh>:
{
   b4f1c:	b513      	push	{r0, r1, r4, lr}
   b4f1e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b4f20:	7c00      	ldrb	r0, [r0, #16]
{
   b4f22:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b4f24:	f7ff fc6c 	bl	b4800 <HAL_USB_USART_Available_Data_For_Write>
   b4f28:	2800      	cmp	r0, #0
   b4f2a:	9901      	ldr	r1, [sp, #4]
   b4f2c:	dc01      	bgt.n	b4f32 <_ZN9USBSerial5writeEh+0x16>
   b4f2e:	7c60      	ldrb	r0, [r4, #17]
   b4f30:	b120      	cbz	r0, b4f3c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b4f32:	7c20      	ldrb	r0, [r4, #16]
   b4f34:	f7ff fc74 	bl	b4820 <HAL_USB_USART_Send_Data>
   b4f38:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b4f3c:	b002      	add	sp, #8
   b4f3e:	bd10      	pop	{r4, pc}

000b4f40 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b4f40:	7c00      	ldrb	r0, [r0, #16]
   b4f42:	f7ff bc75 	b.w	b4830 <HAL_USB_USART_Flush_Data>

000b4f46 <_ZN9USBSerialD0Ev>:
   b4f46:	b510      	push	{r4, lr}
   b4f48:	2114      	movs	r1, #20
   b4f4a:	4604      	mov	r4, r0
   b4f4c:	f7ff fa8f 	bl	b446e <_ZdlPvj>
   b4f50:	4620      	mov	r0, r4
   b4f52:	bd10      	pop	{r4, pc}

000b4f54 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b4f54:	b510      	push	{r4, lr}
   b4f56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4f5a:	4604      	mov	r4, r0
   b4f5c:	4608      	mov	r0, r1
   b4f5e:	2100      	movs	r1, #0
   b4f60:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b4f64:	4b04      	ldr	r3, [pc, #16]	; (b4f78 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b4f66:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b4f68:	2301      	movs	r3, #1
  _serial = serial;
   b4f6a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b4f6c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b4f6e:	4611      	mov	r1, r2
   b4f70:	f7ff fc2e 	bl	b47d0 <HAL_USB_USART_Init>
}
   b4f74:	4620      	mov	r0, r4
   b4f76:	bd10      	pop	{r4, pc}
   b4f78:	000b5694 	.word	0x000b5694

000b4f7c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b4f7c:	7c00      	ldrb	r0, [r0, #16]
   b4f7e:	2200      	movs	r2, #0
   b4f80:	f7ff bc2e 	b.w	b47e0 <HAL_USB_USART_Begin>

000b4f84 <_Z19acquireSerialBufferv>:
{
   b4f84:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b4f86:	2214      	movs	r2, #20
{
   b4f88:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b4f8a:	2100      	movs	r1, #0
   b4f8c:	f000 fa50 	bl	b5430 <memset>
}
   b4f90:	4620      	mov	r0, r4
   b4f92:	bd10      	pop	{r4, pc}

000b4f94 <_Z16_fetch_usbserialv>:
{
   b4f94:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4f96:	4c0f      	ldr	r4, [pc, #60]	; (b4fd4 <_Z16_fetch_usbserialv+0x40>)
{
   b4f98:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b4f9a:	a803      	add	r0, sp, #12
   b4f9c:	f7ff fff2 	bl	b4f84 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4fa0:	7821      	ldrb	r1, [r4, #0]
   b4fa2:	f3bf 8f5b 	dmb	ish
   b4fa6:	f011 0101 	ands.w	r1, r1, #1
   b4faa:	d10f      	bne.n	b4fcc <_Z16_fetch_usbserialv+0x38>
   b4fac:	4620      	mov	r0, r4
   b4fae:	9101      	str	r1, [sp, #4]
   b4fb0:	f7ff fa5f 	bl	b4472 <__cxa_guard_acquire>
   b4fb4:	9901      	ldr	r1, [sp, #4]
   b4fb6:	b148      	cbz	r0, b4fcc <_Z16_fetch_usbserialv+0x38>
   b4fb8:	aa03      	add	r2, sp, #12
   b4fba:	4807      	ldr	r0, [pc, #28]	; (b4fd8 <_Z16_fetch_usbserialv+0x44>)
   b4fbc:	f7ff ffca 	bl	b4f54 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b4fc0:	4620      	mov	r0, r4
   b4fc2:	f7ff fa5b 	bl	b447c <__cxa_guard_release>
   b4fc6:	4805      	ldr	r0, [pc, #20]	; (b4fdc <_Z16_fetch_usbserialv+0x48>)
   b4fc8:	f000 fa1e 	bl	b5408 <atexit>
	return _usbserial;
}
   b4fcc:	4802      	ldr	r0, [pc, #8]	; (b4fd8 <_Z16_fetch_usbserialv+0x44>)
   b4fce:	b008      	add	sp, #32
   b4fd0:	bd10      	pop	{r4, pc}
   b4fd2:	bf00      	nop
   b4fd4:	2003e6f4 	.word	0x2003e6f4
   b4fd8:	2003e6f8 	.word	0x2003e6f8
   b4fdc:	000b4edd 	.word	0x000b4edd

000b4fe0 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b4fe0:	2200      	movs	r2, #0
   b4fe2:	6840      	ldr	r0, [r0, #4]
   b4fe4:	4611      	mov	r1, r2
   b4fe6:	f7ff bc6f 	b.w	b48c8 <network_ready>

000b4fea <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4fea:	2200      	movs	r2, #0
   b4fec:	6840      	ldr	r0, [r0, #4]
   b4fee:	4611      	mov	r1, r2
   b4ff0:	f7ff bc8a 	b.w	b4908 <network_listening>

000b4ff4 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4ff4:	2200      	movs	r2, #0
   b4ff6:	6840      	ldr	r0, [r0, #4]
   b4ff8:	4611      	mov	r1, r2
   b4ffa:	f7ff bc95 	b.w	b4928 <network_get_listen_timeout>

000b4ffe <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4ffe:	6840      	ldr	r0, [r0, #4]
   b5000:	2200      	movs	r2, #0
   b5002:	f7ff bc89 	b.w	b4918 <network_set_listen_timeout>

000b5006 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5006:	6840      	ldr	r0, [r0, #4]
   b5008:	2200      	movs	r2, #0
   b500a:	f081 0101 	eor.w	r1, r1, #1
   b500e:	f7ff bc73 	b.w	b48f8 <network_listen>

000b5012 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5012:	2300      	movs	r3, #0
   b5014:	6840      	ldr	r0, [r0, #4]
   b5016:	461a      	mov	r2, r3
   b5018:	4619      	mov	r1, r3
   b501a:	f7ff bc65 	b.w	b48e8 <network_off>

000b501e <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b501e:	2300      	movs	r3, #0
   b5020:	6840      	ldr	r0, [r0, #4]
   b5022:	461a      	mov	r2, r3
   b5024:	4619      	mov	r1, r3
   b5026:	f7ff bc57 	b.w	b48d8 <network_on>

000b502a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b502a:	2200      	movs	r2, #0
   b502c:	6840      	ldr	r0, [r0, #4]
   b502e:	4611      	mov	r1, r2
   b5030:	f7ff bc3a 	b.w	b48a8 <network_connecting>

000b5034 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5034:	6840      	ldr	r0, [r0, #4]
   b5036:	2200      	movs	r2, #0
   b5038:	2102      	movs	r1, #2
   b503a:	f7ff bc3d 	b.w	b48b8 <network_disconnect>

000b503e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b503e:	2300      	movs	r3, #0
   b5040:	6840      	ldr	r0, [r0, #4]
   b5042:	461a      	mov	r2, r3
   b5044:	f7ff bc28 	b.w	b4898 <network_connect>

000b5048 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b5048:	4b02      	ldr	r3, [pc, #8]	; (b5054 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b504a:	2204      	movs	r2, #4
   b504c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b504e:	4a02      	ldr	r2, [pc, #8]	; (b5058 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b5050:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b5052:	4770      	bx	lr
   b5054:	2003e70c 	.word	0x2003e70c
   b5058:	000b56c4 	.word	0x000b56c4

000b505c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b505c:	4b01      	ldr	r3, [pc, #4]	; (b5064 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b505e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b5060:	4770      	bx	lr
   b5062:	bf00      	nop
   b5064:	2003e634 	.word	0x2003e634

000b5068 <serialEventRun>:
{
   b5068:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b506a:	4b0b      	ldr	r3, [pc, #44]	; (b5098 <serialEventRun+0x30>)
   b506c:	b143      	cbz	r3, b5080 <serialEventRun+0x18>
   b506e:	f7ff ff91 	bl	b4f94 <_Z16_fetch_usbserialv>
   b5072:	6803      	ldr	r3, [r0, #0]
   b5074:	691b      	ldr	r3, [r3, #16]
   b5076:	4798      	blx	r3
   b5078:	2800      	cmp	r0, #0
   b507a:	dd01      	ble.n	b5080 <serialEventRun+0x18>
        serialEvent();
   b507c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b5080:	4b06      	ldr	r3, [pc, #24]	; (b509c <serialEventRun+0x34>)
   b5082:	b143      	cbz	r3, b5096 <serialEventRun+0x2e>
   b5084:	f000 f99a 	bl	b53bc <_Z22__fetch_global_Serial1v>
   b5088:	6803      	ldr	r3, [r0, #0]
   b508a:	691b      	ldr	r3, [r3, #16]
   b508c:	4798      	blx	r3
   b508e:	2800      	cmp	r0, #0
   b5090:	dd01      	ble.n	b5096 <serialEventRun+0x2e>
        serialEvent1();
   b5092:	f3af 8000 	nop.w
}
   b5096:	bd08      	pop	{r3, pc}
	...

000b50a0 <_post_loop>:
{
   b50a0:	b508      	push	{r3, lr}
	serialEventRun();
   b50a2:	f7ff ffe1 	bl	b5068 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b50a6:	f7ff faab 	bl	b4600 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b50aa:	4b01      	ldr	r3, [pc, #4]	; (b50b0 <_post_loop+0x10>)
   b50ac:	6018      	str	r0, [r3, #0]
}
   b50ae:	bd08      	pop	{r3, pc}
   b50b0:	2003e728 	.word	0x2003e728

000b50b4 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b50b4:	4805      	ldr	r0, [pc, #20]	; (b50cc <_Z33system_initialize_user_backup_ramv+0x18>)
   b50b6:	4a06      	ldr	r2, [pc, #24]	; (b50d0 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b50b8:	4906      	ldr	r1, [pc, #24]	; (b50d4 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b50ba:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b50bc:	1a12      	subs	r2, r2, r0
   b50be:	f000 f9a9 	bl	b5414 <memcpy>
    __backup_sram_signature = signature;
   b50c2:	4b05      	ldr	r3, [pc, #20]	; (b50d8 <_Z33system_initialize_user_backup_ramv+0x24>)
   b50c4:	4a05      	ldr	r2, [pc, #20]	; (b50dc <_Z33system_initialize_user_backup_ramv+0x28>)
   b50c6:	601a      	str	r2, [r3, #0]
}
   b50c8:	bd08      	pop	{r3, pc}
   b50ca:	bf00      	nop
   b50cc:	2003f400 	.word	0x2003f400
   b50d0:	2003f404 	.word	0x2003f404
   b50d4:	000b5820 	.word	0x000b5820
   b50d8:	2003f400 	.word	0x2003f400
   b50dc:	9a271c1e 	.word	0x9a271c1e

000b50e0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b50e0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b50e2:	2300      	movs	r3, #0
   b50e4:	9300      	str	r3, [sp, #0]
   b50e6:	461a      	mov	r2, r3
   b50e8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b50ec:	f7ff fbc2 	bl	b4874 <system_ctrl_set_result>
}
   b50f0:	b003      	add	sp, #12
   b50f2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b50f8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b50f8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b50fa:	8843      	ldrh	r3, [r0, #2]
   b50fc:	2b0a      	cmp	r3, #10
   b50fe:	d008      	beq.n	b5112 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b5100:	2b50      	cmp	r3, #80	; 0x50
   b5102:	d10b      	bne.n	b511c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b5104:	4b09      	ldr	r3, [pc, #36]	; (b512c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b5106:	681b      	ldr	r3, [r3, #0]
   b5108:	b14b      	cbz	r3, b511e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b510a:	b003      	add	sp, #12
   b510c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b5110:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b5112:	f7ff ffe5 	bl	b50e0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b5116:	b003      	add	sp, #12
   b5118:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b511c:	2300      	movs	r3, #0
   b511e:	9300      	str	r3, [sp, #0]
   b5120:	461a      	mov	r2, r3
   b5122:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5126:	f7ff fba5 	bl	b4874 <system_ctrl_set_result>
}
   b512a:	e7f4      	b.n	b5116 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b512c:	2003e718 	.word	0x2003e718

000b5130 <module_user_init_hook>:
{
   b5130:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b5132:	4812      	ldr	r0, [pc, #72]	; (b517c <module_user_init_hook+0x4c>)
   b5134:	2100      	movs	r1, #0
   b5136:	f7ff fc27 	bl	b4988 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b513a:	4b11      	ldr	r3, [pc, #68]	; (b5180 <module_user_init_hook+0x50>)
   b513c:	681a      	ldr	r2, [r3, #0]
   b513e:	4b11      	ldr	r3, [pc, #68]	; (b5184 <module_user_init_hook+0x54>)
   b5140:	429a      	cmp	r2, r3
   b5142:	4b11      	ldr	r3, [pc, #68]	; (b5188 <module_user_init_hook+0x58>)
   b5144:	bf0c      	ite	eq
   b5146:	2201      	moveq	r2, #1
   b5148:	2200      	movne	r2, #0
   b514a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b514c:	d001      	beq.n	b5152 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b514e:	f7ff ffb1 	bl	b50b4 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b5152:	f7ff fa4d 	bl	b45f0 <HAL_RNG_GetRandomNumber>
   b5156:	4604      	mov	r4, r0
    srand(seed);
   b5158:	f000 f972 	bl	b5440 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b515c:	4b0b      	ldr	r3, [pc, #44]	; (b518c <module_user_init_hook+0x5c>)
   b515e:	b113      	cbz	r3, b5166 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b5160:	4620      	mov	r0, r4
   b5162:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b5166:	2100      	movs	r1, #0
   b5168:	4808      	ldr	r0, [pc, #32]	; (b518c <module_user_init_hook+0x5c>)
   b516a:	f7ff fb8d 	bl	b4888 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b516e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b5172:	4807      	ldr	r0, [pc, #28]	; (b5190 <module_user_init_hook+0x60>)
   b5174:	2100      	movs	r1, #0
   b5176:	f7ff bb73 	b.w	b4860 <system_ctrl_set_app_request_handler>
   b517a:	bf00      	nop
   b517c:	000b505d 	.word	0x000b505d
   b5180:	2003f400 	.word	0x2003f400
   b5184:	9a271c1e 	.word	0x9a271c1e
   b5188:	2003e714 	.word	0x2003e714
   b518c:	00000000 	.word	0x00000000
   b5190:	000b50f9 	.word	0x000b50f9

000b5194 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b5194:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b5196:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b5198:	d902      	bls.n	b51a0 <pinAvailable+0xc>
    return false;
   b519a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b519c:	b002      	add	sp, #8
   b519e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b51a0:	f1a0 030b 	sub.w	r3, r0, #11
   b51a4:	2b02      	cmp	r3, #2
   b51a6:	d81a      	bhi.n	b51de <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b51a8:	4c17      	ldr	r4, [pc, #92]	; (b5208 <pinAvailable+0x74>)
   b51aa:	7821      	ldrb	r1, [r4, #0]
   b51ac:	f3bf 8f5b 	dmb	ish
   b51b0:	f011 0101 	ands.w	r1, r1, #1
   b51b4:	d10b      	bne.n	b51ce <pinAvailable+0x3a>
   b51b6:	4620      	mov	r0, r4
   b51b8:	9101      	str	r1, [sp, #4]
   b51ba:	f7ff f95a 	bl	b4472 <__cxa_guard_acquire>
   b51be:	9901      	ldr	r1, [sp, #4]
   b51c0:	b128      	cbz	r0, b51ce <pinAvailable+0x3a>
   b51c2:	4812      	ldr	r0, [pc, #72]	; (b520c <pinAvailable+0x78>)
   b51c4:	f7ff fe10 	bl	b4de8 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b51c8:	4620      	mov	r0, r4
   b51ca:	f7ff f957 	bl	b447c <__cxa_guard_release>
   b51ce:	4b0f      	ldr	r3, [pc, #60]	; (b520c <pinAvailable+0x78>)
   b51d0:	7818      	ldrb	r0, [r3, #0]
   b51d2:	f7ff fab5 	bl	b4740 <hal_spi_is_enabled>
   b51d6:	2800      	cmp	r0, #0
   b51d8:	d1df      	bne.n	b519a <pinAvailable+0x6>
  return true; // 'pin' is available
   b51da:	2001      	movs	r0, #1
   b51dc:	e7de      	b.n	b519c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b51de:	2801      	cmp	r0, #1
   b51e0:	d809      	bhi.n	b51f6 <pinAvailable+0x62>
   b51e2:	f000 f8ab 	bl	b533c <_Z19__fetch_global_Wirev>
   b51e6:	2100      	movs	r1, #0
   b51e8:	7c00      	ldrb	r0, [r0, #16]
   b51ea:	f7ff fa79 	bl	b46e0 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b51ee:	f080 0001 	eor.w	r0, r0, #1
   b51f2:	b2c0      	uxtb	r0, r0
   b51f4:	e7d2      	b.n	b519c <pinAvailable+0x8>
   b51f6:	3809      	subs	r0, #9
   b51f8:	2801      	cmp	r0, #1
   b51fa:	d8ee      	bhi.n	b51da <pinAvailable+0x46>
   b51fc:	f000 f8de 	bl	b53bc <_Z22__fetch_global_Serial1v>
   b5200:	7c00      	ldrb	r0, [r0, #16]
   b5202:	f7ff facd 	bl	b47a0 <hal_usart_is_enabled>
   b5206:	e7f2      	b.n	b51ee <pinAvailable+0x5a>
   b5208:	2003e71c 	.word	0x2003e71c
   b520c:	2003e720 	.word	0x2003e720

000b5210 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5210:	2823      	cmp	r0, #35	; 0x23
{
   b5212:	b538      	push	{r3, r4, r5, lr}
   b5214:	4604      	mov	r4, r0
   b5216:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5218:	d80a      	bhi.n	b5230 <pinMode+0x20>
   b521a:	29ff      	cmp	r1, #255	; 0xff
   b521c:	d008      	beq.n	b5230 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b521e:	f7ff ffb9 	bl	b5194 <pinAvailable>
   b5222:	b128      	cbz	r0, b5230 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
   b5224:	4629      	mov	r1, r5
   b5226:	4620      	mov	r0, r4
}
   b5228:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
   b522c:	f7ff b9f8 	b.w	b4620 <hal_gpio_mode>
}
   b5230:	bd38      	pop	{r3, r4, r5, pc}

000b5232 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
   b5232:	b538      	push	{r3, r4, r5, lr}
   b5234:	4604      	mov	r4, r0
   b5236:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
   b5238:	f7ff f9fa 	bl	b4630 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b523c:	28ff      	cmp	r0, #255	; 0xff
   b523e:	d010      	beq.n	b5262 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b5240:	2806      	cmp	r0, #6
   b5242:	d804      	bhi.n	b524e <digitalWrite+0x1c>
   b5244:	234d      	movs	r3, #77	; 0x4d
   b5246:	fa23 f000 	lsr.w	r0, r3, r0
   b524a:	07c3      	lsls	r3, r0, #31
   b524c:	d409      	bmi.n	b5262 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b524e:	4620      	mov	r0, r4
   b5250:	f7ff ffa0 	bl	b5194 <pinAvailable>
   b5254:	b128      	cbz	r0, b5262 <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
   b5256:	4629      	mov	r1, r5
   b5258:	4620      	mov	r0, r4
}
   b525a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
   b525e:	f7ff b9ef 	b.w	b4640 <hal_gpio_write>
}
   b5262:	bd38      	pop	{r3, r4, r5, pc}

000b5264 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(hal_pin_t pin)
{
   b5264:	b510      	push	{r4, lr}
   b5266:	4604      	mov	r4, r0
    PinMode mode = hal_gpio_get_mode(pin);
   b5268:	f7ff f9e2 	bl	b4630 <hal_gpio_get_mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b526c:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b526e:	b2db      	uxtb	r3, r3
   b5270:	2b01      	cmp	r3, #1
   b5272:	d908      	bls.n	b5286 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b5274:	4620      	mov	r0, r4
   b5276:	f7ff ff8d 	bl	b5194 <pinAvailable>
   b527a:	b120      	cbz	r0, b5286 <digitalRead+0x22>
      return LOW;
    }

    return hal_gpio_read(pin);
   b527c:	4620      	mov	r0, r4
}
   b527e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return hal_gpio_read(pin);
   b5282:	f7ff b9e5 	b.w	b4650 <hal_gpio_read>
}
   b5286:	2000      	movs	r0, #0
   b5288:	bd10      	pop	{r4, pc}

000b528a <analogRead>:
int32_t analogRead(hal_pin_t pin)
{
#if !HAL_PLATFORM_RTL872X
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b528a:	280d      	cmp	r0, #13
{
   b528c:	b510      	push	{r4, lr}
   b528e:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b5290:	bf9c      	itt	ls
   b5292:	340e      	addls	r4, #14
   b5294:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
#endif

  // Safety check
  if( !pinAvailable(pin) ) {
   b5296:	4620      	mov	r0, r4
   b5298:	f7ff ff7c 	bl	b5194 <pinAvailable>
   b529c:	b150      	cbz	r0, b52b4 <analogRead+0x2a>
    return LOW;
  }

  if(hal_pin_validate_function(pin, PF_ADC)!=PF_ADC)
   b529e:	2103      	movs	r1, #3
   b52a0:	4620      	mov	r0, r4
   b52a2:	f7ff f9b5 	bl	b4610 <hal_pin_validate_function>
   b52a6:	2803      	cmp	r0, #3
   b52a8:	d104      	bne.n	b52b4 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b52aa:	4620      	mov	r0, r4
}
   b52ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b52b0:	f7ff b9de 	b.w	b4670 <hal_adc_read>
}
   b52b4:	2000      	movs	r0, #0
   b52b6:	bd10      	pop	{r4, pc}

000b52b8 <_Z11analogWritetm>:

/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 */
void analogWrite(hal_pin_t pin, uint32_t value)
{
   b52b8:	b538      	push	{r3, r4, r5, lr}
   b52ba:	4604      	mov	r4, r0
   b52bc:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
   b52be:	f7ff ff69 	bl	b5194 <pinAvailable>
   b52c2:	b1f0      	cbz	r0, b5302 <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (hal_pin_validate_function(pin, PF_DAC) == PF_DAC)
   b52c4:	2104      	movs	r1, #4
   b52c6:	4620      	mov	r0, r4
   b52c8:	f7ff f9a2 	bl	b4610 <hal_pin_validate_function>
   b52cc:	2804      	cmp	r0, #4
   b52ce:	d105      	bne.n	b52dc <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
   b52d0:	b2a9      	uxth	r1, r5
   b52d2:	4620      	mov	r0, r4
            return;
        }

        hal_pwm_write_ext(pin, value);
    }
}
   b52d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_DAC_Write(pin, value);
   b52d8:	f7ff b9c2 	b.w	b4660 <HAL_DAC_Write>
    else if (hal_pin_validate_function(pin, PF_TIMER) == PF_TIMER)
   b52dc:	2102      	movs	r1, #2
   b52de:	4620      	mov	r0, r4
   b52e0:	f7ff f996 	bl	b4610 <hal_pin_validate_function>
   b52e4:	2802      	cmp	r0, #2
   b52e6:	d10c      	bne.n	b5302 <_Z11analogWritetm+0x4a>
        PinMode mode = hal_gpio_get_mode(pin);
   b52e8:	4620      	mov	r0, r4
   b52ea:	f7ff f9a1 	bl	b4630 <hal_gpio_get_mode>
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   b52ee:	2801      	cmp	r0, #1
   b52f0:	d001      	beq.n	b52f6 <_Z11analogWritetm+0x3e>
   b52f2:	2804      	cmp	r0, #4
   b52f4:	d105      	bne.n	b5302 <_Z11analogWritetm+0x4a>
        hal_pwm_write_ext(pin, value);
   b52f6:	4629      	mov	r1, r5
   b52f8:	4620      	mov	r0, r4
}
   b52fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        hal_pwm_write_ext(pin, value);
   b52fe:	f7ff b9bf 	b.w	b4680 <hal_pwm_write_ext>
}
   b5302:	bd38      	pop	{r3, r4, r5, pc}

000b5304 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5304:	4770      	bx	lr
	...

000b5308 <_Z17acquireWireBufferv>:
{
   b5308:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b530a:	4b0a      	ldr	r3, [pc, #40]	; (b5334 <_Z17acquireWireBufferv+0x2c>)
   b530c:	6003      	str	r3, [r0, #0]
   b530e:	2301      	movs	r3, #1
{
   b5310:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b5312:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5314:	4908      	ldr	r1, [pc, #32]	; (b5338 <_Z17acquireWireBufferv+0x30>)
   b5316:	2020      	movs	r0, #32
   b5318:	f000 f874 	bl	b5404 <_ZnajRKSt9nothrow_t>
	};
   b531c:	2520      	movs	r5, #32
   b531e:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5320:	4905      	ldr	r1, [pc, #20]	; (b5338 <_Z17acquireWireBufferv+0x30>)
	};
   b5322:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5324:	4628      	mov	r0, r5
   b5326:	f000 f86d 	bl	b5404 <_ZnajRKSt9nothrow_t>
	};
   b532a:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b532e:	4620      	mov	r0, r4
   b5330:	bd38      	pop	{r3, r4, r5, pc}
   b5332:	bf00      	nop
   b5334:	00010018 	.word	0x00010018
   b5338:	000b56f8 	.word	0x000b56f8

000b533c <_Z19__fetch_global_Wirev>:
{
   b533c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b533e:	4d0e      	ldr	r5, [pc, #56]	; (b5378 <_Z19__fetch_global_Wirev+0x3c>)
   b5340:	7829      	ldrb	r1, [r5, #0]
   b5342:	f3bf 8f5b 	dmb	ish
   b5346:	f011 0401 	ands.w	r4, r1, #1
{
   b534a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b534c:	d111      	bne.n	b5372 <_Z19__fetch_global_Wirev+0x36>
   b534e:	4628      	mov	r0, r5
   b5350:	f7ff f88f 	bl	b4472 <__cxa_guard_acquire>
   b5354:	b168      	cbz	r0, b5372 <_Z19__fetch_global_Wirev+0x36>
   b5356:	4668      	mov	r0, sp
   b5358:	f7ff ffd6 	bl	b5308 <_Z17acquireWireBufferv>
   b535c:	466a      	mov	r2, sp
   b535e:	4621      	mov	r1, r4
   b5360:	4806      	ldr	r0, [pc, #24]	; (b537c <_Z19__fetch_global_Wirev+0x40>)
   b5362:	f7ff fb8b 	bl	b4a7c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b5366:	4628      	mov	r0, r5
   b5368:	f7ff f888 	bl	b447c <__cxa_guard_release>
   b536c:	4804      	ldr	r0, [pc, #16]	; (b5380 <_Z19__fetch_global_Wirev+0x44>)
   b536e:	f000 f84b 	bl	b5408 <atexit>
	return wire;
}
   b5372:	4802      	ldr	r0, [pc, #8]	; (b537c <_Z19__fetch_global_Wirev+0x40>)
   b5374:	b007      	add	sp, #28
   b5376:	bd30      	pop	{r4, r5, pc}
   b5378:	2003e72c 	.word	0x2003e72c
   b537c:	2003e730 	.word	0x2003e730
   b5380:	000b5305 	.word	0x000b5305

000b5384 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5384:	4770      	bx	lr
	...

000b5388 <_Z20acquireSerial1Bufferv>:
{
   b5388:	b538      	push	{r3, r4, r5, lr}
   b538a:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b538c:	2514      	movs	r5, #20
   b538e:	462a      	mov	r2, r5
   b5390:	2100      	movs	r1, #0
   b5392:	f000 f84d 	bl	b5430 <memset>
   b5396:	8025      	strh	r5, [r4, #0]
   b5398:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b539a:	4907      	ldr	r1, [pc, #28]	; (b53b8 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b539c:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b539e:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b53a0:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b53a2:	f000 f82f 	bl	b5404 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b53a6:	4904      	ldr	r1, [pc, #16]	; (b53b8 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b53a8:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b53aa:	4628      	mov	r0, r5
   b53ac:	f000 f82a 	bl	b5404 <_ZnajRKSt9nothrow_t>
    };
   b53b0:	60e0      	str	r0, [r4, #12]
}
   b53b2:	4620      	mov	r0, r4
   b53b4:	bd38      	pop	{r3, r4, r5, pc}
   b53b6:	bf00      	nop
   b53b8:	000b56f8 	.word	0x000b56f8

000b53bc <_Z22__fetch_global_Serial1v>:
{
   b53bc:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b53be:	4d0e      	ldr	r5, [pc, #56]	; (b53f8 <_Z22__fetch_global_Serial1v+0x3c>)
   b53c0:	7829      	ldrb	r1, [r5, #0]
   b53c2:	f3bf 8f5b 	dmb	ish
   b53c6:	f011 0401 	ands.w	r4, r1, #1
{
   b53ca:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b53cc:	d111      	bne.n	b53f2 <_Z22__fetch_global_Serial1v+0x36>
   b53ce:	4628      	mov	r0, r5
   b53d0:	f7ff f84f 	bl	b4472 <__cxa_guard_acquire>
   b53d4:	b168      	cbz	r0, b53f2 <_Z22__fetch_global_Serial1v+0x36>
   b53d6:	a801      	add	r0, sp, #4
   b53d8:	f7ff ffd6 	bl	b5388 <_Z20acquireSerial1Bufferv>
   b53dc:	aa01      	add	r2, sp, #4
   b53de:	4621      	mov	r1, r4
   b53e0:	4806      	ldr	r0, [pc, #24]	; (b53fc <_Z22__fetch_global_Serial1v+0x40>)
   b53e2:	f7ff fd65 	bl	b4eb0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b53e6:	4628      	mov	r0, r5
   b53e8:	f7ff f848 	bl	b447c <__cxa_guard_release>
   b53ec:	4804      	ldr	r0, [pc, #16]	; (b5400 <_Z22__fetch_global_Serial1v+0x44>)
   b53ee:	f000 f80b 	bl	b5408 <atexit>
    return serial1;
}
   b53f2:	4802      	ldr	r0, [pc, #8]	; (b53fc <_Z22__fetch_global_Serial1v+0x40>)
   b53f4:	b007      	add	sp, #28
   b53f6:	bd30      	pop	{r4, r5, pc}
   b53f8:	2003e744 	.word	0x2003e744
   b53fc:	2003e748 	.word	0x2003e748
   b5400:	000b5385 	.word	0x000b5385

000b5404 <_ZnajRKSt9nothrow_t>:
   b5404:	f7ff b831 	b.w	b446a <_Znaj>

000b5408 <atexit>:
   b5408:	2300      	movs	r3, #0
   b540a:	4601      	mov	r1, r0
   b540c:	461a      	mov	r2, r3
   b540e:	4618      	mov	r0, r3
   b5410:	f000 b844 	b.w	b549c <__register_exitproc>

000b5414 <memcpy>:
   b5414:	440a      	add	r2, r1
   b5416:	4291      	cmp	r1, r2
   b5418:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b541c:	d100      	bne.n	b5420 <memcpy+0xc>
   b541e:	4770      	bx	lr
   b5420:	b510      	push	{r4, lr}
   b5422:	f811 4b01 	ldrb.w	r4, [r1], #1
   b5426:	f803 4f01 	strb.w	r4, [r3, #1]!
   b542a:	4291      	cmp	r1, r2
   b542c:	d1f9      	bne.n	b5422 <memcpy+0xe>
   b542e:	bd10      	pop	{r4, pc}

000b5430 <memset>:
   b5430:	4402      	add	r2, r0
   b5432:	4603      	mov	r3, r0
   b5434:	4293      	cmp	r3, r2
   b5436:	d100      	bne.n	b543a <memset+0xa>
   b5438:	4770      	bx	lr
   b543a:	f803 1b01 	strb.w	r1, [r3], #1
   b543e:	e7f9      	b.n	b5434 <memset+0x4>

000b5440 <srand>:
   b5440:	b538      	push	{r3, r4, r5, lr}
   b5442:	4b10      	ldr	r3, [pc, #64]	; (b5484 <srand+0x44>)
   b5444:	681d      	ldr	r5, [r3, #0]
   b5446:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b5448:	4604      	mov	r4, r0
   b544a:	b9b3      	cbnz	r3, b547a <srand+0x3a>
   b544c:	2018      	movs	r0, #24
   b544e:	f7ff fa83 	bl	b4958 <malloc>
   b5452:	4602      	mov	r2, r0
   b5454:	63a8      	str	r0, [r5, #56]	; 0x38
   b5456:	b920      	cbnz	r0, b5462 <srand+0x22>
   b5458:	4b0b      	ldr	r3, [pc, #44]	; (b5488 <srand+0x48>)
   b545a:	480c      	ldr	r0, [pc, #48]	; (b548c <srand+0x4c>)
   b545c:	2142      	movs	r1, #66	; 0x42
   b545e:	f7ff fa8b 	bl	b4978 <__assert_func>
   b5462:	490b      	ldr	r1, [pc, #44]	; (b5490 <srand+0x50>)
   b5464:	4b0b      	ldr	r3, [pc, #44]	; (b5494 <srand+0x54>)
   b5466:	e9c0 1300 	strd	r1, r3, [r0]
   b546a:	4b0b      	ldr	r3, [pc, #44]	; (b5498 <srand+0x58>)
   b546c:	6083      	str	r3, [r0, #8]
   b546e:	230b      	movs	r3, #11
   b5470:	8183      	strh	r3, [r0, #12]
   b5472:	2100      	movs	r1, #0
   b5474:	2001      	movs	r0, #1
   b5476:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b547a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b547c:	2200      	movs	r2, #0
   b547e:	611c      	str	r4, [r3, #16]
   b5480:	615a      	str	r2, [r3, #20]
   b5482:	bd38      	pop	{r3, r4, r5, pc}
   b5484:	2003e634 	.word	0x2003e634
   b5488:	000b56f9 	.word	0x000b56f9
   b548c:	000b5710 	.word	0x000b5710
   b5490:	abcd330e 	.word	0xabcd330e
   b5494:	e66d1234 	.word	0xe66d1234
   b5498:	0005deec 	.word	0x0005deec

000b549c <__register_exitproc>:
   b549c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b54a0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b555c <__register_exitproc+0xc0>
   b54a4:	4606      	mov	r6, r0
   b54a6:	f8d8 0000 	ldr.w	r0, [r8]
   b54aa:	461f      	mov	r7, r3
   b54ac:	460d      	mov	r5, r1
   b54ae:	4691      	mov	r9, r2
   b54b0:	f000 f856 	bl	b5560 <__retarget_lock_acquire_recursive>
   b54b4:	4b25      	ldr	r3, [pc, #148]	; (b554c <__register_exitproc+0xb0>)
   b54b6:	681c      	ldr	r4, [r3, #0]
   b54b8:	b934      	cbnz	r4, b54c8 <__register_exitproc+0x2c>
   b54ba:	4c25      	ldr	r4, [pc, #148]	; (b5550 <__register_exitproc+0xb4>)
   b54bc:	601c      	str	r4, [r3, #0]
   b54be:	4b25      	ldr	r3, [pc, #148]	; (b5554 <__register_exitproc+0xb8>)
   b54c0:	b113      	cbz	r3, b54c8 <__register_exitproc+0x2c>
   b54c2:	681b      	ldr	r3, [r3, #0]
   b54c4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b54c8:	6863      	ldr	r3, [r4, #4]
   b54ca:	2b1f      	cmp	r3, #31
   b54cc:	dd07      	ble.n	b54de <__register_exitproc+0x42>
   b54ce:	f8d8 0000 	ldr.w	r0, [r8]
   b54d2:	f000 f847 	bl	b5564 <__retarget_lock_release_recursive>
   b54d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b54da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b54de:	b34e      	cbz	r6, b5534 <__register_exitproc+0x98>
   b54e0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b54e4:	b988      	cbnz	r0, b550a <__register_exitproc+0x6e>
   b54e6:	4b1c      	ldr	r3, [pc, #112]	; (b5558 <__register_exitproc+0xbc>)
   b54e8:	b923      	cbnz	r3, b54f4 <__register_exitproc+0x58>
   b54ea:	f8d8 0000 	ldr.w	r0, [r8]
   b54ee:	f000 f838 	bl	b5562 <__retarget_lock_release>
   b54f2:	e7f0      	b.n	b54d6 <__register_exitproc+0x3a>
   b54f4:	f44f 7084 	mov.w	r0, #264	; 0x108
   b54f8:	f7ff fa2e 	bl	b4958 <malloc>
   b54fc:	2800      	cmp	r0, #0
   b54fe:	d0f4      	beq.n	b54ea <__register_exitproc+0x4e>
   b5500:	2300      	movs	r3, #0
   b5502:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b5506:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b550a:	6863      	ldr	r3, [r4, #4]
   b550c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b5510:	2201      	movs	r2, #1
   b5512:	409a      	lsls	r2, r3
   b5514:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b5518:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b551c:	4313      	orrs	r3, r2
   b551e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b5522:	2e02      	cmp	r6, #2
   b5524:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b5528:	bf02      	ittt	eq
   b552a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b552e:	4313      	orreq	r3, r2
   b5530:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b5534:	6863      	ldr	r3, [r4, #4]
   b5536:	f8d8 0000 	ldr.w	r0, [r8]
   b553a:	1c5a      	adds	r2, r3, #1
   b553c:	3302      	adds	r3, #2
   b553e:	6062      	str	r2, [r4, #4]
   b5540:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b5544:	f000 f80e 	bl	b5564 <__retarget_lock_release_recursive>
   b5548:	2000      	movs	r0, #0
   b554a:	e7c6      	b.n	b54da <__register_exitproc+0x3e>
   b554c:	2003e7e8 	.word	0x2003e7e8
   b5550:	2003e75c 	.word	0x2003e75c
   b5554:	00000000 	.word	0x00000000
   b5558:	000b4959 	.word	0x000b4959
   b555c:	2003e698 	.word	0x2003e698

000b5560 <__retarget_lock_acquire_recursive>:
   b5560:	4770      	bx	lr

000b5562 <__retarget_lock_release>:
   b5562:	4770      	bx	lr

000b5564 <__retarget_lock_release_recursive>:
   b5564:	4770      	bx	lr

000b5566 <link_code_end>:
	...

000b5568 <dynalib_user>:
   b5568:	43f5 000b 4431 000b 4459 000b 445d 000b     .C..1D..YD..]D..
   b5578:	0000 0000 7542 7474 6e6f 4420 776f 006e     ....Button Down.

000b5588 <_ZTVN5spark13EthernetClassE>:
	...
   b5590:	4a07 000b 49fd 000b 49f3 000b 49e9 000b     .J...I...I...I..
   b55a0:	49dd 000b 49d1 000b 4bf9 000b 4c01 000b     .I...I...K...L..
   b55b0:	49c5 000b 49bd 000b 49b3 000b 49a9 000b     .I...I...I...I..
   b55c0:	4c31 000b                                   1L..

000b55c4 <_ZTV7TwoWire>:
	...
   b55cc:	4a25 000b 4a6f 000b 4a47 000b 4a27 000b     %J..oJ..GJ..'J..
   b55dc:	4a4f 000b 4a57 000b 4a5f 000b 4a67 000b     OJ..WJ.._J..gJ..

000b55ec <_ZTV9IPAddress>:
	...
   b55f4:	4ac9 000b 4ab9 000b 4abb 000b 7061 0070     .J...J...J..app.

000b5604 <_ZTVN5spark12NetworkClassE>:
	...
   b560c:	4bb9 000b 4bc3 000b 4bcd 000b 4bd7 000b     .K...K...K...K..
   b561c:	4be1 000b 4bed 000b 4bf9 000b 4c01 000b     .K...K...K...L..
   b562c:	4c09 000b 4c15 000b 4c1d 000b 4c27 000b     .L...L...L..'L..
   b563c:	4c31 000b 5925 252d 2d6d 6425 2554 3a48     1L..%Y-%m-%dT%H:
   b564c:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000b565c <_ZTV11USARTSerial>:
	...
   b5664:	4e35 000b 4ea1 000b 4e79 000b 4d1d 000b     5N...N..yN...M..
   b5674:	4e49 000b 4e65 000b 4e57 000b 4e73 000b     IN..eN..WN..sN..
   b5684:	4e37 000b 4e3b 000b                         7N..;N..

000b568c <_ZTV9USBSerial>:
	...
   b5694:	4edf 000b 4f47 000b 4f1d 000b 4d1d 000b     .N..GO...O...M..
   b56a4:	4f0f 000b 4ee1 000b 4ef1 000b 4f41 000b     .O...N...N..AO..
   b56b4:	4f01 000b 4ed9 000b                         .O...N..

000b56bc <_ZTVN5spark9WiFiClassE>:
	...
   b56c4:	503f 000b 5035 000b 502b 000b 4fe1 000b     ?P..5P..+P...O..
   b56d4:	501f 000b 5013 000b 4bf9 000b 4c01 000b     .P...P...K...L..
   b56e4:	5007 000b 4fff 000b 4ff5 000b 4feb 000b     .P...O...O...O..
   b56f4:	4c31 000b                                   1L..

000b56f8 <_ZSt7nothrow>:
   b56f8:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b5708:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
   b5718:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b5728:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b5738:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
   b5748:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b5758:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b5769 <link_const_data_end>:
   b5769:	00          	.byte	0x00
	...

000b576c <link_constructors_location>:
   b576c:	000b45b9 	.word	0x000b45b9
   b5770:	000b4999 	.word	0x000b4999
   b5774:	000b4a11 	.word	0x000b4a11
   b5778:	000b4ba9 	.word	0x000b4ba9
   b577c:	000b4d09 	.word	0x000b4d09
   b5780:	000b4ddd 	.word	0x000b4ddd
   b5784:	000b4dfd 	.word	0x000b4dfd
   b5788:	000b4e21 	.word	0x000b4e21
   b578c:	000b5049 	.word	0x000b5049

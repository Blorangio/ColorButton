
/Users/admin/Documents/CTD_2023/Personal_Projects/ColorButton/target/5.3.0/argon/ColorButton.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000017c8  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b57e4  000b57e4  000057e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         0000006c  2003e62c  000b5808  0000e62c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000158  2003e698  2003e698  0001e698  2**2
                  ALLOC
  6 .backup       00000004  2003f400  000b5874  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000b5878  000b5878  00015878  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000b587e  000b587e  0001587e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000b58a2  000b58a2  000158a2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   000f30be  00000000  00000000  000158a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000f4af  00000000  00000000  00108964  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    00032ab9  00000000  00000000  00117e13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002668  00000000  00000000  0014a8cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00009848  00000000  00000000  0014cf34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000335d9  00000000  00000000  0015677c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00033f50  00000000  00000000  00189d55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001352b4  00000000  00000000  001bdca5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00006b70  00000000  00000000  002f2f5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <__aeabi_drsub>:
   b401c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b4020:	e002      	b.n	b4028 <__adddf3>
   b4022:	bf00      	nop

000b4024 <__aeabi_dsub>:
   b4024:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b4028 <__adddf3>:
   b4028:	b530      	push	{r4, r5, lr}
   b402a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b402e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b4032:	ea94 0f05 	teq	r4, r5
   b4036:	bf08      	it	eq
   b4038:	ea90 0f02 	teqeq	r0, r2
   b403c:	bf1f      	itttt	ne
   b403e:	ea54 0c00 	orrsne.w	ip, r4, r0
   b4042:	ea55 0c02 	orrsne.w	ip, r5, r2
   b4046:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b404a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b404e:	f000 80e2 	beq.w	b4216 <__adddf3+0x1ee>
   b4052:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b4056:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b405a:	bfb8      	it	lt
   b405c:	426d      	neglt	r5, r5
   b405e:	dd0c      	ble.n	b407a <__adddf3+0x52>
   b4060:	442c      	add	r4, r5
   b4062:	ea80 0202 	eor.w	r2, r0, r2
   b4066:	ea81 0303 	eor.w	r3, r1, r3
   b406a:	ea82 0000 	eor.w	r0, r2, r0
   b406e:	ea83 0101 	eor.w	r1, r3, r1
   b4072:	ea80 0202 	eor.w	r2, r0, r2
   b4076:	ea81 0303 	eor.w	r3, r1, r3
   b407a:	2d36      	cmp	r5, #54	; 0x36
   b407c:	bf88      	it	hi
   b407e:	bd30      	pophi	{r4, r5, pc}
   b4080:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b4084:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b4088:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b408c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b4090:	d002      	beq.n	b4098 <__adddf3+0x70>
   b4092:	4240      	negs	r0, r0
   b4094:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4098:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b409c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b40a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b40a4:	d002      	beq.n	b40ac <__adddf3+0x84>
   b40a6:	4252      	negs	r2, r2
   b40a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b40ac:	ea94 0f05 	teq	r4, r5
   b40b0:	f000 80a7 	beq.w	b4202 <__adddf3+0x1da>
   b40b4:	f1a4 0401 	sub.w	r4, r4, #1
   b40b8:	f1d5 0e20 	rsbs	lr, r5, #32
   b40bc:	db0d      	blt.n	b40da <__adddf3+0xb2>
   b40be:	fa02 fc0e 	lsl.w	ip, r2, lr
   b40c2:	fa22 f205 	lsr.w	r2, r2, r5
   b40c6:	1880      	adds	r0, r0, r2
   b40c8:	f141 0100 	adc.w	r1, r1, #0
   b40cc:	fa03 f20e 	lsl.w	r2, r3, lr
   b40d0:	1880      	adds	r0, r0, r2
   b40d2:	fa43 f305 	asr.w	r3, r3, r5
   b40d6:	4159      	adcs	r1, r3
   b40d8:	e00e      	b.n	b40f8 <__adddf3+0xd0>
   b40da:	f1a5 0520 	sub.w	r5, r5, #32
   b40de:	f10e 0e20 	add.w	lr, lr, #32
   b40e2:	2a01      	cmp	r2, #1
   b40e4:	fa03 fc0e 	lsl.w	ip, r3, lr
   b40e8:	bf28      	it	cs
   b40ea:	f04c 0c02 	orrcs.w	ip, ip, #2
   b40ee:	fa43 f305 	asr.w	r3, r3, r5
   b40f2:	18c0      	adds	r0, r0, r3
   b40f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b40f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b40fc:	d507      	bpl.n	b410e <__adddf3+0xe6>
   b40fe:	f04f 0e00 	mov.w	lr, #0
   b4102:	f1dc 0c00 	rsbs	ip, ip, #0
   b4106:	eb7e 0000 	sbcs.w	r0, lr, r0
   b410a:	eb6e 0101 	sbc.w	r1, lr, r1
   b410e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b4112:	d31b      	bcc.n	b414c <__adddf3+0x124>
   b4114:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b4118:	d30c      	bcc.n	b4134 <__adddf3+0x10c>
   b411a:	0849      	lsrs	r1, r1, #1
   b411c:	ea5f 0030 	movs.w	r0, r0, rrx
   b4120:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b4124:	f104 0401 	add.w	r4, r4, #1
   b4128:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b412c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b4130:	f080 809a 	bcs.w	b4268 <__adddf3+0x240>
   b4134:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b4138:	bf08      	it	eq
   b413a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b413e:	f150 0000 	adcs.w	r0, r0, #0
   b4142:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b4146:	ea41 0105 	orr.w	r1, r1, r5
   b414a:	bd30      	pop	{r4, r5, pc}
   b414c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b4150:	4140      	adcs	r0, r0
   b4152:	eb41 0101 	adc.w	r1, r1, r1
   b4156:	3c01      	subs	r4, #1
   b4158:	bf28      	it	cs
   b415a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b415e:	d2e9      	bcs.n	b4134 <__adddf3+0x10c>
   b4160:	f091 0f00 	teq	r1, #0
   b4164:	bf04      	itt	eq
   b4166:	4601      	moveq	r1, r0
   b4168:	2000      	moveq	r0, #0
   b416a:	fab1 f381 	clz	r3, r1
   b416e:	bf08      	it	eq
   b4170:	3320      	addeq	r3, #32
   b4172:	f1a3 030b 	sub.w	r3, r3, #11
   b4176:	f1b3 0220 	subs.w	r2, r3, #32
   b417a:	da0c      	bge.n	b4196 <__adddf3+0x16e>
   b417c:	320c      	adds	r2, #12
   b417e:	dd08      	ble.n	b4192 <__adddf3+0x16a>
   b4180:	f102 0c14 	add.w	ip, r2, #20
   b4184:	f1c2 020c 	rsb	r2, r2, #12
   b4188:	fa01 f00c 	lsl.w	r0, r1, ip
   b418c:	fa21 f102 	lsr.w	r1, r1, r2
   b4190:	e00c      	b.n	b41ac <__adddf3+0x184>
   b4192:	f102 0214 	add.w	r2, r2, #20
   b4196:	bfd8      	it	le
   b4198:	f1c2 0c20 	rsble	ip, r2, #32
   b419c:	fa01 f102 	lsl.w	r1, r1, r2
   b41a0:	fa20 fc0c 	lsr.w	ip, r0, ip
   b41a4:	bfdc      	itt	le
   b41a6:	ea41 010c 	orrle.w	r1, r1, ip
   b41aa:	4090      	lslle	r0, r2
   b41ac:	1ae4      	subs	r4, r4, r3
   b41ae:	bfa2      	ittt	ge
   b41b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b41b4:	4329      	orrge	r1, r5
   b41b6:	bd30      	popge	{r4, r5, pc}
   b41b8:	ea6f 0404 	mvn.w	r4, r4
   b41bc:	3c1f      	subs	r4, #31
   b41be:	da1c      	bge.n	b41fa <__adddf3+0x1d2>
   b41c0:	340c      	adds	r4, #12
   b41c2:	dc0e      	bgt.n	b41e2 <__adddf3+0x1ba>
   b41c4:	f104 0414 	add.w	r4, r4, #20
   b41c8:	f1c4 0220 	rsb	r2, r4, #32
   b41cc:	fa20 f004 	lsr.w	r0, r0, r4
   b41d0:	fa01 f302 	lsl.w	r3, r1, r2
   b41d4:	ea40 0003 	orr.w	r0, r0, r3
   b41d8:	fa21 f304 	lsr.w	r3, r1, r4
   b41dc:	ea45 0103 	orr.w	r1, r5, r3
   b41e0:	bd30      	pop	{r4, r5, pc}
   b41e2:	f1c4 040c 	rsb	r4, r4, #12
   b41e6:	f1c4 0220 	rsb	r2, r4, #32
   b41ea:	fa20 f002 	lsr.w	r0, r0, r2
   b41ee:	fa01 f304 	lsl.w	r3, r1, r4
   b41f2:	ea40 0003 	orr.w	r0, r0, r3
   b41f6:	4629      	mov	r1, r5
   b41f8:	bd30      	pop	{r4, r5, pc}
   b41fa:	fa21 f004 	lsr.w	r0, r1, r4
   b41fe:	4629      	mov	r1, r5
   b4200:	bd30      	pop	{r4, r5, pc}
   b4202:	f094 0f00 	teq	r4, #0
   b4206:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b420a:	bf06      	itte	eq
   b420c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b4210:	3401      	addeq	r4, #1
   b4212:	3d01      	subne	r5, #1
   b4214:	e74e      	b.n	b40b4 <__adddf3+0x8c>
   b4216:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b421a:	bf18      	it	ne
   b421c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4220:	d029      	beq.n	b4276 <__adddf3+0x24e>
   b4222:	ea94 0f05 	teq	r4, r5
   b4226:	bf08      	it	eq
   b4228:	ea90 0f02 	teqeq	r0, r2
   b422c:	d005      	beq.n	b423a <__adddf3+0x212>
   b422e:	ea54 0c00 	orrs.w	ip, r4, r0
   b4232:	bf04      	itt	eq
   b4234:	4619      	moveq	r1, r3
   b4236:	4610      	moveq	r0, r2
   b4238:	bd30      	pop	{r4, r5, pc}
   b423a:	ea91 0f03 	teq	r1, r3
   b423e:	bf1e      	ittt	ne
   b4240:	2100      	movne	r1, #0
   b4242:	2000      	movne	r0, #0
   b4244:	bd30      	popne	{r4, r5, pc}
   b4246:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b424a:	d105      	bne.n	b4258 <__adddf3+0x230>
   b424c:	0040      	lsls	r0, r0, #1
   b424e:	4149      	adcs	r1, r1
   b4250:	bf28      	it	cs
   b4252:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b4256:	bd30      	pop	{r4, r5, pc}
   b4258:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b425c:	bf3c      	itt	cc
   b425e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b4262:	bd30      	popcc	{r4, r5, pc}
   b4264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4268:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b426c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b4270:	f04f 0000 	mov.w	r0, #0
   b4274:	bd30      	pop	{r4, r5, pc}
   b4276:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b427a:	bf1a      	itte	ne
   b427c:	4619      	movne	r1, r3
   b427e:	4610      	movne	r0, r2
   b4280:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b4284:	bf1c      	itt	ne
   b4286:	460b      	movne	r3, r1
   b4288:	4602      	movne	r2, r0
   b428a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b428e:	bf06      	itte	eq
   b4290:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b4294:	ea91 0f03 	teqeq	r1, r3
   b4298:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b429c:	bd30      	pop	{r4, r5, pc}
   b429e:	bf00      	nop

000b42a0 <__aeabi_ui2d>:
   b42a0:	f090 0f00 	teq	r0, #0
   b42a4:	bf04      	itt	eq
   b42a6:	2100      	moveq	r1, #0
   b42a8:	4770      	bxeq	lr
   b42aa:	b530      	push	{r4, r5, lr}
   b42ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42b4:	f04f 0500 	mov.w	r5, #0
   b42b8:	f04f 0100 	mov.w	r1, #0
   b42bc:	e750      	b.n	b4160 <__adddf3+0x138>
   b42be:	bf00      	nop

000b42c0 <__aeabi_i2d>:
   b42c0:	f090 0f00 	teq	r0, #0
   b42c4:	bf04      	itt	eq
   b42c6:	2100      	moveq	r1, #0
   b42c8:	4770      	bxeq	lr
   b42ca:	b530      	push	{r4, r5, lr}
   b42cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b42d8:	bf48      	it	mi
   b42da:	4240      	negmi	r0, r0
   b42dc:	f04f 0100 	mov.w	r1, #0
   b42e0:	e73e      	b.n	b4160 <__adddf3+0x138>
   b42e2:	bf00      	nop

000b42e4 <__aeabi_f2d>:
   b42e4:	0042      	lsls	r2, r0, #1
   b42e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b42ea:	ea4f 0131 	mov.w	r1, r1, rrx
   b42ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b42f2:	bf1f      	itttt	ne
   b42f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b42f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b42fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b4300:	4770      	bxne	lr
   b4302:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b4306:	bf08      	it	eq
   b4308:	4770      	bxeq	lr
   b430a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b430e:	bf04      	itt	eq
   b4310:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b4314:	4770      	bxeq	lr
   b4316:	b530      	push	{r4, r5, lr}
   b4318:	f44f 7460 	mov.w	r4, #896	; 0x380
   b431c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4320:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b4324:	e71c      	b.n	b4160 <__adddf3+0x138>
   b4326:	bf00      	nop

000b4328 <__aeabi_ul2d>:
   b4328:	ea50 0201 	orrs.w	r2, r0, r1
   b432c:	bf08      	it	eq
   b432e:	4770      	bxeq	lr
   b4330:	b530      	push	{r4, r5, lr}
   b4332:	f04f 0500 	mov.w	r5, #0
   b4336:	e00a      	b.n	b434e <__aeabi_l2d+0x16>

000b4338 <__aeabi_l2d>:
   b4338:	ea50 0201 	orrs.w	r2, r0, r1
   b433c:	bf08      	it	eq
   b433e:	4770      	bxeq	lr
   b4340:	b530      	push	{r4, r5, lr}
   b4342:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b4346:	d502      	bpl.n	b434e <__aeabi_l2d+0x16>
   b4348:	4240      	negs	r0, r0
   b434a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b434e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b4352:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b4356:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b435a:	f43f aed8 	beq.w	b410e <__adddf3+0xe6>
   b435e:	f04f 0203 	mov.w	r2, #3
   b4362:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b4366:	bf18      	it	ne
   b4368:	3203      	addne	r2, #3
   b436a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b436e:	bf18      	it	ne
   b4370:	3203      	addne	r2, #3
   b4372:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b4376:	f1c2 0320 	rsb	r3, r2, #32
   b437a:	fa00 fc03 	lsl.w	ip, r0, r3
   b437e:	fa20 f002 	lsr.w	r0, r0, r2
   b4382:	fa01 fe03 	lsl.w	lr, r1, r3
   b4386:	ea40 000e 	orr.w	r0, r0, lr
   b438a:	fa21 f102 	lsr.w	r1, r1, r2
   b438e:	4414      	add	r4, r2
   b4390:	e6bd      	b.n	b410e <__adddf3+0xe6>
   b4392:	bf00      	nop

000b4394 <__aeabi_d2iz>:
   b4394:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b4398:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b439c:	d215      	bcs.n	b43ca <__aeabi_d2iz+0x36>
   b439e:	d511      	bpl.n	b43c4 <__aeabi_d2iz+0x30>
   b43a0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b43a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b43a8:	d912      	bls.n	b43d0 <__aeabi_d2iz+0x3c>
   b43aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b43ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b43b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b43b6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b43ba:	fa23 f002 	lsr.w	r0, r3, r2
   b43be:	bf18      	it	ne
   b43c0:	4240      	negne	r0, r0
   b43c2:	4770      	bx	lr
   b43c4:	f04f 0000 	mov.w	r0, #0
   b43c8:	4770      	bx	lr
   b43ca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b43ce:	d105      	bne.n	b43dc <__aeabi_d2iz+0x48>
   b43d0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   b43d4:	bf08      	it	eq
   b43d6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   b43da:	4770      	bx	lr
   b43dc:	f04f 0000 	mov.w	r0, #0
   b43e0:	4770      	bx	lr
   b43e2:	bf00      	nop

000b43e4 <strlen>:
   b43e4:	4603      	mov	r3, r0
   b43e6:	f813 2b01 	ldrb.w	r2, [r3], #1
   b43ea:	2a00      	cmp	r2, #0
   b43ec:	d1fb      	bne.n	b43e6 <strlen+0x2>
   b43ee:	1a18      	subs	r0, r3, r0
   b43f0:	3801      	subs	r0, #1
   b43f2:	4770      	bx	lr

000b43f4 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b43f4:	4809      	ldr	r0, [pc, #36]	; (b441c <module_user_pre_init+0x28>)
   b43f6:	490a      	ldr	r1, [pc, #40]	; (b4420 <module_user_pre_init+0x2c>)
   b43f8:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b43fa:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b43fc:	d005      	beq.n	b440a <module_user_pre_init+0x16>
   b43fe:	4a09      	ldr	r2, [pc, #36]	; (b4424 <module_user_pre_init+0x30>)
   b4400:	4282      	cmp	r2, r0
   b4402:	d002      	beq.n	b440a <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4404:	1a12      	subs	r2, r2, r0
   b4406:	f001 f82f 	bl	b5468 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b440a:	4807      	ldr	r0, [pc, #28]	; (b4428 <module_user_pre_init+0x34>)
   b440c:	4a07      	ldr	r2, [pc, #28]	; (b442c <module_user_pre_init+0x38>)
   b440e:	2100      	movs	r1, #0
   b4410:	1a12      	subs	r2, r2, r0
   b4412:	f001 f837 	bl	b5484 <memset>
    return &link_global_data_start;
}
   b4416:	4801      	ldr	r0, [pc, #4]	; (b441c <module_user_pre_init+0x28>)
   b4418:	bd08      	pop	{r3, pc}
   b441a:	bf00      	nop
   b441c:	2003e62c 	.word	0x2003e62c
   b4420:	000b5808 	.word	0x000b5808
   b4424:	2003e698 	.word	0x2003e698
   b4428:	2003e698 	.word	0x2003e698
   b442c:	2003e7f0 	.word	0x2003e7f0

000b4430 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4430:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4432:	4e07      	ldr	r6, [pc, #28]	; (b4450 <module_user_init+0x20>)
   b4434:	4c07      	ldr	r4, [pc, #28]	; (b4454 <module_user_init+0x24>)
    module_user_init_hook();
   b4436:	f000 fea5 	bl	b5184 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b443a:	1ba4      	subs	r4, r4, r6
   b443c:	08a4      	lsrs	r4, r4, #2
   b443e:	2500      	movs	r5, #0
   b4440:	42ac      	cmp	r4, r5
   b4442:	d100      	bne.n	b4446 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4444:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4446:	f856 3b04 	ldr.w	r3, [r6], #4
   b444a:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b444c:	3501      	adds	r5, #1
   b444e:	e7f7      	b.n	b4440 <module_user_init+0x10>
   b4450:	000b57c0 	.word	0x000b57c0
   b4454:	000b57e4 	.word	0x000b57e4

000b4458 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4458:	f000 b828 	b.w	b44ac <setup>

000b445c <module_user_loop>:
}

void module_user_loop() {
   b445c:	b508      	push	{r3, lr}
    loop();
   b445e:	f000 f853 	bl	b4508 <loop>
    _post_loop();
}
   b4462:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4466:	f000 be45 	b.w	b50f4 <_post_loop>

000b446a <_Znaj>:
   b446a:	f000 ba9f 	b.w	b49ac <malloc>

000b446e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b446e:	f000 baa5 	b.w	b49bc <free>

000b4472 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b4472:	7800      	ldrb	r0, [r0, #0]
   b4474:	fab0 f080 	clz	r0, r0
   b4478:	0940      	lsrs	r0, r0, #5
   b447a:	4770      	bx	lr

000b447c <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b447c:	2301      	movs	r3, #1
   b447e:	7003      	strb	r3, [r0, #0]
   b4480:	4770      	bx	lr
	...

000b4484 <_Z5roundIiET_S0_>:
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }

template <typename T>
static inline
T round (T x) { return ((x)>=0?(long)((x)+0.5):(long)((x)-0.5)); }
   b4484:	b510      	push	{r4, lr}
   b4486:	4604      	mov	r4, r0
   b4488:	f7ff ff1a 	bl	b42c0 <__aeabi_i2d>
   b448c:	2c00      	cmp	r4, #0
   b448e:	4b06      	ldr	r3, [pc, #24]	; (b44a8 <_Z5roundIiET_S0_+0x24>)
   b4490:	f04f 0200 	mov.w	r2, #0
   b4494:	db04      	blt.n	b44a0 <_Z5roundIiET_S0_+0x1c>
   b4496:	f7ff fdc7 	bl	b4028 <__adddf3>
   b449a:	f7ff ff7b 	bl	b4394 <__aeabi_d2iz>
   b449e:	bd10      	pop	{r4, pc}
   b44a0:	f7ff fdc0 	bl	b4024 <__aeabi_dsub>
   b44a4:	e7f9      	b.n	b449a <_Z5roundIiET_S0_+0x16>
   b44a6:	bf00      	nop
   b44a8:	3fe00000 	.word	0x3fe00000

000b44ac <setup>:
SYSTEM_MODE(MANUAL);
SYSTEM_THREAD(ENABLED);
void setup() {
   b44ac:	b508      	push	{r3, lr}
  pinMode(D1, INPUT);
   b44ae:	2100      	movs	r1, #0
   b44b0:	2001      	movs	r0, #1
   b44b2:	f000 fed7 	bl	b5264 <pinMode>
  pinMode(A5, INPUT);
   b44b6:	2100      	movs	r1, #0
   b44b8:	200e      	movs	r0, #14
   b44ba:	f000 fed3 	bl	b5264 <pinMode>
  pinMode(D0, INPUT);
   b44be:	2100      	movs	r1, #0
   b44c0:	4608      	mov	r0, r1
   b44c2:	f000 fecf 	bl	b5264 <pinMode>
  pinMode(D4, OUTPUT);
   b44c6:	2101      	movs	r1, #1
   b44c8:	2004      	movs	r0, #4
   b44ca:	f000 fecb 	bl	b5264 <pinMode>
  pinMode(D5, OUTPUT);
   b44ce:	2101      	movs	r1, #1
   b44d0:	2005      	movs	r0, #5
   b44d2:	f000 fec7 	bl	b5264 <pinMode>
  pinMode(D6, OUTPUT);
   b44d6:	2101      	movs	r1, #1
   b44d8:	2006      	movs	r0, #6
   b44da:	f000 fec3 	bl	b5264 <pinMode>
  digitalWrite(D4, HIGH);
   b44de:	2101      	movs	r1, #1
   b44e0:	2004      	movs	r0, #4
   b44e2:	f000 fed0 	bl	b5286 <digitalWrite>
  digitalWrite(D5, HIGH);
   b44e6:	2101      	movs	r1, #1
   b44e8:	2005      	movs	r0, #5
   b44ea:	f000 fecc 	bl	b5286 <digitalWrite>
  digitalWrite(D6, HIGH);
   b44ee:	2101      	movs	r1, #1
   b44f0:	2006      	movs	r0, #6
   b44f2:	f000 fec8 	bl	b5286 <digitalWrite>
  Serial.begin(9600);
   b44f6:	f000 fd77 	bl	b4fe8 <_Z16_fetch_usbserialv>
}
   b44fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Serial.begin(9600);
   b44fe:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4502:	f000 bd65 	b.w	b4fd0 <_ZN9USBSerial5beginEl>
	...

000b4508 <loop>:
int green = 0;
int blue = 0;
int current = 0;
int current2 = 0;
int colors[5][3];
void loop() {
   b4508:	b570      	push	{r4, r5, r6, lr}
  if(current==0) {
   b450a:	4d38      	ldr	r5, [pc, #224]	; (b45ec <loop+0xe4>)
   b450c:	4c38      	ldr	r4, [pc, #224]	; (b45f0 <loop+0xe8>)
   b450e:	682b      	ldr	r3, [r5, #0]
    int analog = analogRead(A5);
   b4510:	200e      	movs	r0, #14
  if(current==0) {
   b4512:	2b00      	cmp	r3, #0
   b4514:	d14b      	bne.n	b45ae <loop+0xa6>
    int analog = analogRead(A5);
   b4516:	f000 fee2 	bl	b52de <analogRead>
    red = round((analog*255/4095));
   b451a:	f640 73ff 	movw	r3, #4095	; 0xfff
   b451e:	ebc0 2000 	rsb	r0, r0, r0, lsl #8
   b4522:	fb90 f0f3 	sdiv	r0, r0, r3
   b4526:	f7ff ffad 	bl	b4484 <_Z5roundIiET_S0_>
   b452a:	4601      	mov	r1, r0
   b452c:	6020      	str	r0, [r4, #0]
    analogWrite(D4, red);
   b452e:	2004      	movs	r0, #4
    red = round((analog*255/4095));
    analogWrite(D5, red);
  } else {
    int analog = analogRead(A5);
    red = round((analog*255/4095));
    analogWrite(D6, red);
   b4530:	f000 feec 	bl	b530c <_Z11analogWritetm>
  }
  if(digitalRead(D0)==HIGH&&!cont) {
   b4534:	2000      	movs	r0, #0
   b4536:	f000 febf 	bl	b52b8 <digitalRead>
   b453a:	2801      	cmp	r0, #1
   b453c:	4604      	mov	r4, r0
   b453e:	d110      	bne.n	b4562 <loop+0x5a>
   b4540:	4e2c      	ldr	r6, [pc, #176]	; (b45f4 <loop+0xec>)
   b4542:	7833      	ldrb	r3, [r6, #0]
   b4544:	b96b      	cbnz	r3, b4562 <loop+0x5a>
    Serial.println("Button Down");
   b4546:	f000 fd4f 	bl	b4fe8 <_Z16_fetch_usbserialv>
   b454a:	492b      	ldr	r1, [pc, #172]	; (b45f8 <loop+0xf0>)
   b454c:	f000 fc47 	bl	b4dde <_ZN5Print7printlnEPKc>
    onOff = !onOff;
   b4550:	4a2a      	ldr	r2, [pc, #168]	; (b45fc <loop+0xf4>)
    current+=1;
    cont=true;
   b4552:	7034      	strb	r4, [r6, #0]
    onOff = !onOff;
   b4554:	7813      	ldrb	r3, [r2, #0]
   b4556:	f083 0301 	eor.w	r3, r3, #1
   b455a:	7013      	strb	r3, [r2, #0]
    current+=1;
   b455c:	682b      	ldr	r3, [r5, #0]
   b455e:	3301      	adds	r3, #1
   b4560:	602b      	str	r3, [r5, #0]
  }
  if(digitalRead(D0)==LOW) {
   b4562:	2000      	movs	r0, #0
   b4564:	f000 fea8 	bl	b52b8 <digitalRead>
   b4568:	b908      	cbnz	r0, b456e <loop+0x66>
    cont = false;
   b456a:	4b22      	ldr	r3, [pc, #136]	; (b45f4 <loop+0xec>)
   b456c:	7018      	strb	r0, [r3, #0]
  }
  if(digitalRead(D1)==HIGH&&!cont2) {
   b456e:	2001      	movs	r0, #1
   b4570:	f000 fea2 	bl	b52b8 <digitalRead>
   b4574:	2801      	cmp	r0, #1
   b4576:	4604      	mov	r4, r0
   b4578:	d112      	bne.n	b45a0 <loop+0x98>
   b457a:	4d21      	ldr	r5, [pc, #132]	; (b4600 <loop+0xf8>)
   b457c:	782b      	ldrb	r3, [r5, #0]
   b457e:	b97b      	cbnz	r3, b45a0 <loop+0x98>
    Serial.println("Button Down");
   b4580:	f000 fd32 	bl	b4fe8 <_Z16_fetch_usbserialv>
   b4584:	491c      	ldr	r1, [pc, #112]	; (b45f8 <loop+0xf0>)
   b4586:	f000 fc2a 	bl	b4dde <_ZN5Print7printlnEPKc>
    onOff2 = !onOff;
   b458a:	4b1c      	ldr	r3, [pc, #112]	; (b45fc <loop+0xf4>)
   b458c:	4a1d      	ldr	r2, [pc, #116]	; (b4604 <loop+0xfc>)
   b458e:	781b      	ldrb	r3, [r3, #0]
    current2+=1;
    cont2=true;
   b4590:	702c      	strb	r4, [r5, #0]
    onOff2 = !onOff;
   b4592:	f083 0301 	eor.w	r3, r3, #1
   b4596:	7013      	strb	r3, [r2, #0]
    current2+=1;
   b4598:	4a1b      	ldr	r2, [pc, #108]	; (b4608 <loop+0x100>)
   b459a:	6813      	ldr	r3, [r2, #0]
   b459c:	3301      	adds	r3, #1
   b459e:	6013      	str	r3, [r2, #0]
  }
  if(digitalRead(D0)==LOW) {
   b45a0:	2000      	movs	r0, #0
   b45a2:	f000 fe89 	bl	b52b8 <digitalRead>
   b45a6:	b908      	cbnz	r0, b45ac <loop+0xa4>
    cont2 = false;
   b45a8:	4b15      	ldr	r3, [pc, #84]	; (b4600 <loop+0xf8>)
   b45aa:	7018      	strb	r0, [r3, #0]
  }
   b45ac:	bd70      	pop	{r4, r5, r6, pc}
  } else if(current==1) {
   b45ae:	2b01      	cmp	r3, #1
   b45b0:	d10d      	bne.n	b45ce <loop+0xc6>
    int analog = analogRead(A5);
   b45b2:	f000 fe94 	bl	b52de <analogRead>
    red = round((analog*255/4095));
   b45b6:	f640 73ff 	movw	r3, #4095	; 0xfff
   b45ba:	ebc0 2000 	rsb	r0, r0, r0, lsl #8
   b45be:	fb90 f0f3 	sdiv	r0, r0, r3
   b45c2:	f7ff ff5f 	bl	b4484 <_Z5roundIiET_S0_>
   b45c6:	4601      	mov	r1, r0
   b45c8:	6020      	str	r0, [r4, #0]
    analogWrite(D5, red);
   b45ca:	2005      	movs	r0, #5
   b45cc:	e7b0      	b.n	b4530 <loop+0x28>
    int analog = analogRead(A5);
   b45ce:	f000 fe86 	bl	b52de <analogRead>
    red = round((analog*255/4095));
   b45d2:	f640 73ff 	movw	r3, #4095	; 0xfff
   b45d6:	ebc0 2000 	rsb	r0, r0, r0, lsl #8
   b45da:	fb90 f0f3 	sdiv	r0, r0, r3
   b45de:	f7ff ff51 	bl	b4484 <_Z5roundIiET_S0_>
   b45e2:	4601      	mov	r1, r0
   b45e4:	6020      	str	r0, [r4, #0]
    analogWrite(D6, red);
   b45e6:	2006      	movs	r0, #6
   b45e8:	e7a2      	b.n	b4530 <loop+0x28>
   b45ea:	bf00      	nop
   b45ec:	2003e6a8 	.word	0x2003e6a8
   b45f0:	2003e6b4 	.word	0x2003e6b4
   b45f4:	2003e6a4 	.word	0x2003e6a4
   b45f8:	000b55d0 	.word	0x000b55d0
   b45fc:	2003e6b0 	.word	0x2003e6b0
   b4600:	2003e6a5 	.word	0x2003e6a5
   b4604:	2003e6b1 	.word	0x2003e6b1
   b4608:	2003e6ac 	.word	0x2003e6ac

000b460c <_GLOBAL__sub_I_SystemMode>:
   b460c:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b460e:	4b07      	ldr	r3, [pc, #28]	; (b462c <_GLOBAL__sub_I_SystemMode+0x20>)
    SleepResult() {}
   b4610:	4a07      	ldr	r2, [pc, #28]	; (b4630 <_GLOBAL__sub_I_SystemMode+0x24>)
   b4612:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4614:	2400      	movs	r4, #0
   b4616:	e9c3 4400 	strd	r4, r4, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b461a:	2003      	movs	r0, #3
   b461c:	f000 f93a 	bl	b4894 <set_system_mode>
SYSTEM_THREAD(ENABLED);
   b4620:	4621      	mov	r1, r4
   b4622:	2001      	movs	r0, #1
   b4624:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SYSTEM_THREAD(ENABLED);
   b4628:	f000 b93c 	b.w	b48a4 <system_thread_set_state>
   b462c:	2003e698 	.word	0x2003e698
   b4630:	ffff0000 	.word	0xffff0000

000b4634 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4634:	b508      	push	{r3, lr}
   b4636:	4b02      	ldr	r3, [pc, #8]	; (b4640 <os_mutex_recursive_create+0xc>)
   b4638:	681b      	ldr	r3, [r3, #0]
   b463a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b463c:	9301      	str	r3, [sp, #4]
   b463e:	bd08      	pop	{r3, pc}
   b4640:	00030248 	.word	0x00030248

000b4644 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4644:	b508      	push	{r3, lr}
   b4646:	4b02      	ldr	r3, [pc, #8]	; (b4650 <HAL_RNG_GetRandomNumber+0xc>)
   b4648:	681b      	ldr	r3, [r3, #0]
   b464a:	685b      	ldr	r3, [r3, #4]
   b464c:	9301      	str	r3, [sp, #4]
   b464e:	bd08      	pop	{r3, pc}
   b4650:	00030218 	.word	0x00030218

000b4654 <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4654:	b508      	push	{r3, lr}
   b4656:	4b02      	ldr	r3, [pc, #8]	; (b4660 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4658:	681b      	ldr	r3, [r3, #0]
   b465a:	695b      	ldr	r3, [r3, #20]
   b465c:	9301      	str	r3, [sp, #4]
   b465e:	bd08      	pop	{r3, pc}
   b4660:	00030218 	.word	0x00030218

000b4664 <hal_pin_validate_function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
   b4664:	b508      	push	{r3, lr}
   b4666:	4b02      	ldr	r3, [pc, #8]	; (b4670 <hal_pin_validate_function+0xc>)
   b4668:	681b      	ldr	r3, [r3, #0]
   b466a:	685b      	ldr	r3, [r3, #4]
   b466c:	9301      	str	r3, [sp, #4]
   b466e:	bd08      	pop	{r3, pc}
   b4670:	0003022c 	.word	0x0003022c

000b4674 <hal_gpio_mode>:
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
   b4674:	b508      	push	{r3, lr}
   b4676:	4b02      	ldr	r3, [pc, #8]	; (b4680 <hal_gpio_mode+0xc>)
   b4678:	681b      	ldr	r3, [r3, #0]
   b467a:	689b      	ldr	r3, [r3, #8]
   b467c:	9301      	str	r3, [sp, #4]
   b467e:	bd08      	pop	{r3, pc}
   b4680:	0003022c 	.word	0x0003022c

000b4684 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
   b4684:	b508      	push	{r3, lr}
   b4686:	4b02      	ldr	r3, [pc, #8]	; (b4690 <hal_gpio_get_mode+0xc>)
   b4688:	681b      	ldr	r3, [r3, #0]
   b468a:	68db      	ldr	r3, [r3, #12]
   b468c:	9301      	str	r3, [sp, #4]
   b468e:	bd08      	pop	{r3, pc}
   b4690:	0003022c 	.word	0x0003022c

000b4694 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
   b4694:	b508      	push	{r3, lr}
   b4696:	4b02      	ldr	r3, [pc, #8]	; (b46a0 <hal_gpio_write+0xc>)
   b4698:	681b      	ldr	r3, [r3, #0]
   b469a:	691b      	ldr	r3, [r3, #16]
   b469c:	9301      	str	r3, [sp, #4]
   b469e:	bd08      	pop	{r3, pc}
   b46a0:	0003022c 	.word	0x0003022c

000b46a4 <hal_gpio_read>:
DYNALIB_FN(5, hal_gpio, hal_gpio_read, int32_t(hal_pin_t))
   b46a4:	b508      	push	{r3, lr}
   b46a6:	4b02      	ldr	r3, [pc, #8]	; (b46b0 <hal_gpio_read+0xc>)
   b46a8:	681b      	ldr	r3, [r3, #0]
   b46aa:	695b      	ldr	r3, [r3, #20]
   b46ac:	9301      	str	r3, [sp, #4]
   b46ae:	bd08      	pop	{r3, pc}
   b46b0:	0003022c 	.word	0x0003022c

000b46b4 <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, hal_interrupt_attach, int(uint16_t, hal_interrupt_handler_t, void*, InterruptMode, hal_interrupt_extra_configuration_t*))
DYNALIB_FN(7, hal_gpio, hal_interrupt_detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, hal_interrupt_enable_all, void(void))
DYNALIB_FN(9, hal_gpio, hal_interrupt_disable_all, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(hal_pin_t, uint16_t))
   b46b4:	b508      	push	{r3, lr}
   b46b6:	4b02      	ldr	r3, [pc, #8]	; (b46c0 <HAL_DAC_Write+0xc>)
   b46b8:	681b      	ldr	r3, [r3, #0]
   b46ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b46bc:	9301      	str	r3, [sp, #4]
   b46be:	bd08      	pop	{r3, pc}
   b46c0:	0003022c 	.word	0x0003022c

000b46c4 <hal_adc_read>:
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b46c4:	b508      	push	{r3, lr}
   b46c6:	4b02      	ldr	r3, [pc, #8]	; (b46d0 <hal_adc_read+0xc>)
   b46c8:	681b      	ldr	r3, [r3, #0]
   b46ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b46cc:	9301      	str	r3, [sp, #4]
   b46ce:	bd08      	pop	{r3, pc}
   b46d0:	0003022c 	.word	0x0003022c

000b46d4 <hal_pwm_write_ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(hal_pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(hal_pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(hal_pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, hal_pwm_get_resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, hal_pwm_set_resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, hal_pwm_write_ext, void(uint16_t, uint32_t))
   b46d4:	b508      	push	{r3, lr}
   b46d6:	4b02      	ldr	r3, [pc, #8]	; (b46e0 <hal_pwm_write_ext+0xc>)
   b46d8:	681b      	ldr	r3, [r3, #0]
   b46da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b46dc:	9301      	str	r3, [sp, #4]
   b46de:	bd08      	pop	{r3, pc}
   b46e0:	0003022c 	.word	0x0003022c

000b46e4 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b46e4:	b508      	push	{r3, lr}
   b46e6:	4b02      	ldr	r3, [pc, #8]	; (b46f0 <hal_i2c_write+0xc>)
   b46e8:	681b      	ldr	r3, [r3, #0]
   b46ea:	6a1b      	ldr	r3, [r3, #32]
   b46ec:	9301      	str	r3, [sp, #4]
   b46ee:	bd08      	pop	{r3, pc}
   b46f0:	00030228 	.word	0x00030228

000b46f4 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b46f4:	b508      	push	{r3, lr}
   b46f6:	4b02      	ldr	r3, [pc, #8]	; (b4700 <hal_i2c_available+0xc>)
   b46f8:	681b      	ldr	r3, [r3, #0]
   b46fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b46fc:	9301      	str	r3, [sp, #4]
   b46fe:	bd08      	pop	{r3, pc}
   b4700:	00030228 	.word	0x00030228

000b4704 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4704:	b508      	push	{r3, lr}
   b4706:	4b02      	ldr	r3, [pc, #8]	; (b4710 <hal_i2c_read+0xc>)
   b4708:	681b      	ldr	r3, [r3, #0]
   b470a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b470c:	9301      	str	r3, [sp, #4]
   b470e:	bd08      	pop	{r3, pc}
   b4710:	00030228 	.word	0x00030228

000b4714 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4714:	b508      	push	{r3, lr}
   b4716:	4b02      	ldr	r3, [pc, #8]	; (b4720 <hal_i2c_peek+0xc>)
   b4718:	681b      	ldr	r3, [r3, #0]
   b471a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b471c:	9301      	str	r3, [sp, #4]
   b471e:	bd08      	pop	{r3, pc}
   b4720:	00030228 	.word	0x00030228

000b4724 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4724:	b508      	push	{r3, lr}
   b4726:	4b02      	ldr	r3, [pc, #8]	; (b4730 <hal_i2c_flush+0xc>)
   b4728:	681b      	ldr	r3, [r3, #0]
   b472a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b472c:	9301      	str	r3, [sp, #4]
   b472e:	bd08      	pop	{r3, pc}
   b4730:	00030228 	.word	0x00030228

000b4734 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b4734:	b508      	push	{r3, lr}
   b4736:	4b02      	ldr	r3, [pc, #8]	; (b4740 <hal_i2c_is_enabled+0xc>)
   b4738:	681b      	ldr	r3, [r3, #0]
   b473a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b473c:	9301      	str	r3, [sp, #4]
   b473e:	bd08      	pop	{r3, pc}
   b4740:	00030228 	.word	0x00030228

000b4744 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4744:	b508      	push	{r3, lr}
   b4746:	4b02      	ldr	r3, [pc, #8]	; (b4750 <hal_i2c_init+0xc>)
   b4748:	681b      	ldr	r3, [r3, #0]
   b474a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b474c:	9301      	str	r3, [sp, #4]
   b474e:	bd08      	pop	{r3, pc}
   b4750:	00030228 	.word	0x00030228

000b4754 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4754:	b508      	push	{r3, lr}
   b4756:	4b02      	ldr	r3, [pc, #8]	; (b4760 <inet_inet_ntop+0xc>)
   b4758:	681b      	ldr	r3, [r3, #0]
   b475a:	695b      	ldr	r3, [r3, #20]
   b475c:	9301      	str	r3, [sp, #4]
   b475e:	bd08      	pop	{r3, pc}
   b4760:	00030264 	.word	0x00030264

000b4764 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4764:	b508      	push	{r3, lr}
   b4766:	4b02      	ldr	r3, [pc, #8]	; (b4770 <netdb_freeaddrinfo+0xc>)
   b4768:	681b      	ldr	r3, [r3, #0]
   b476a:	689b      	ldr	r3, [r3, #8]
   b476c:	9301      	str	r3, [sp, #4]
   b476e:	bd08      	pop	{r3, pc}
   b4770:	00030268 	.word	0x00030268

000b4774 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4774:	b508      	push	{r3, lr}
   b4776:	4b02      	ldr	r3, [pc, #8]	; (b4780 <netdb_getaddrinfo+0xc>)
   b4778:	681b      	ldr	r3, [r3, #0]
   b477a:	68db      	ldr	r3, [r3, #12]
   b477c:	9301      	str	r3, [sp, #4]
   b477e:	bd08      	pop	{r3, pc}
   b4780:	00030268 	.word	0x00030268

000b4784 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b4784:	b508      	push	{r3, lr}
   b4786:	4b02      	ldr	r3, [pc, #8]	; (b4790 <hal_spi_init+0xc>)
   b4788:	681b      	ldr	r3, [r3, #0]
   b478a:	69db      	ldr	r3, [r3, #28]
   b478c:	9301      	str	r3, [sp, #4]
   b478e:	bd08      	pop	{r3, pc}
   b4790:	00030230 	.word	0x00030230

000b4794 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b4794:	b508      	push	{r3, lr}
   b4796:	4b02      	ldr	r3, [pc, #8]	; (b47a0 <hal_spi_is_enabled+0xc>)
   b4798:	681b      	ldr	r3, [r3, #0]
   b479a:	6a1b      	ldr	r3, [r3, #32]
   b479c:	9301      	str	r3, [sp, #4]
   b479e:	bd08      	pop	{r3, pc}
   b47a0:	00030230 	.word	0x00030230

000b47a4 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b47a4:	b508      	push	{r3, lr}
   b47a6:	4b02      	ldr	r3, [pc, #8]	; (b47b0 <hal_usart_write+0xc>)
   b47a8:	681b      	ldr	r3, [r3, #0]
   b47aa:	68db      	ldr	r3, [r3, #12]
   b47ac:	9301      	str	r3, [sp, #4]
   b47ae:	bd08      	pop	{r3, pc}
   b47b0:	0003023c 	.word	0x0003023c

000b47b4 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b47b4:	b508      	push	{r3, lr}
   b47b6:	4b02      	ldr	r3, [pc, #8]	; (b47c0 <hal_usart_available+0xc>)
   b47b8:	681b      	ldr	r3, [r3, #0]
   b47ba:	691b      	ldr	r3, [r3, #16]
   b47bc:	9301      	str	r3, [sp, #4]
   b47be:	bd08      	pop	{r3, pc}
   b47c0:	0003023c 	.word	0x0003023c

000b47c4 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b47c4:	b508      	push	{r3, lr}
   b47c6:	4b02      	ldr	r3, [pc, #8]	; (b47d0 <hal_usart_read+0xc>)
   b47c8:	681b      	ldr	r3, [r3, #0]
   b47ca:	695b      	ldr	r3, [r3, #20]
   b47cc:	9301      	str	r3, [sp, #4]
   b47ce:	bd08      	pop	{r3, pc}
   b47d0:	0003023c 	.word	0x0003023c

000b47d4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b47d4:	b508      	push	{r3, lr}
   b47d6:	4b02      	ldr	r3, [pc, #8]	; (b47e0 <hal_usart_peek+0xc>)
   b47d8:	681b      	ldr	r3, [r3, #0]
   b47da:	699b      	ldr	r3, [r3, #24]
   b47dc:	9301      	str	r3, [sp, #4]
   b47de:	bd08      	pop	{r3, pc}
   b47e0:	0003023c 	.word	0x0003023c

000b47e4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b47e4:	b508      	push	{r3, lr}
   b47e6:	4b02      	ldr	r3, [pc, #8]	; (b47f0 <hal_usart_flush+0xc>)
   b47e8:	681b      	ldr	r3, [r3, #0]
   b47ea:	69db      	ldr	r3, [r3, #28]
   b47ec:	9301      	str	r3, [sp, #4]
   b47ee:	bd08      	pop	{r3, pc}
   b47f0:	0003023c 	.word	0x0003023c

000b47f4 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b47f4:	b508      	push	{r3, lr}
   b47f6:	4b02      	ldr	r3, [pc, #8]	; (b4800 <hal_usart_is_enabled+0xc>)
   b47f8:	681b      	ldr	r3, [r3, #0]
   b47fa:	6a1b      	ldr	r3, [r3, #32]
   b47fc:	9301      	str	r3, [sp, #4]
   b47fe:	bd08      	pop	{r3, pc}
   b4800:	0003023c 	.word	0x0003023c

000b4804 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4804:	b508      	push	{r3, lr}
   b4806:	4b02      	ldr	r3, [pc, #8]	; (b4810 <hal_usart_available_data_for_write+0xc>)
   b4808:	681b      	ldr	r3, [r3, #0]
   b480a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b480c:	9301      	str	r3, [sp, #4]
   b480e:	bd08      	pop	{r3, pc}
   b4810:	0003023c 	.word	0x0003023c

000b4814 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4814:	b508      	push	{r3, lr}
   b4816:	4b02      	ldr	r3, [pc, #8]	; (b4820 <hal_usart_init_ex+0xc>)
   b4818:	681b      	ldr	r3, [r3, #0]
   b481a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b481c:	9301      	str	r3, [sp, #4]
   b481e:	bd08      	pop	{r3, pc}
   b4820:	0003023c 	.word	0x0003023c

000b4824 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4824:	b508      	push	{r3, lr}
   b4826:	4b02      	ldr	r3, [pc, #8]	; (b4830 <HAL_USB_USART_Init+0xc>)
   b4828:	681b      	ldr	r3, [r3, #0]
   b482a:	681b      	ldr	r3, [r3, #0]
   b482c:	9301      	str	r3, [sp, #4]
   b482e:	bd08      	pop	{r3, pc}
   b4830:	0003024c 	.word	0x0003024c

000b4834 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b4834:	b508      	push	{r3, lr}
   b4836:	4b02      	ldr	r3, [pc, #8]	; (b4840 <HAL_USB_USART_Begin+0xc>)
   b4838:	681b      	ldr	r3, [r3, #0]
   b483a:	685b      	ldr	r3, [r3, #4]
   b483c:	9301      	str	r3, [sp, #4]
   b483e:	bd08      	pop	{r3, pc}
   b4840:	0003024c 	.word	0x0003024c

000b4844 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4844:	b508      	push	{r3, lr}
   b4846:	4b02      	ldr	r3, [pc, #8]	; (b4850 <HAL_USB_USART_Available_Data+0xc>)
   b4848:	681b      	ldr	r3, [r3, #0]
   b484a:	691b      	ldr	r3, [r3, #16]
   b484c:	9301      	str	r3, [sp, #4]
   b484e:	bd08      	pop	{r3, pc}
   b4850:	0003024c 	.word	0x0003024c

000b4854 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4854:	b508      	push	{r3, lr}
   b4856:	4b02      	ldr	r3, [pc, #8]	; (b4860 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4858:	681b      	ldr	r3, [r3, #0]
   b485a:	695b      	ldr	r3, [r3, #20]
   b485c:	9301      	str	r3, [sp, #4]
   b485e:	bd08      	pop	{r3, pc}
   b4860:	0003024c 	.word	0x0003024c

000b4864 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4864:	b508      	push	{r3, lr}
   b4866:	4b02      	ldr	r3, [pc, #8]	; (b4870 <HAL_USB_USART_Receive_Data+0xc>)
   b4868:	681b      	ldr	r3, [r3, #0]
   b486a:	699b      	ldr	r3, [r3, #24]
   b486c:	9301      	str	r3, [sp, #4]
   b486e:	bd08      	pop	{r3, pc}
   b4870:	0003024c 	.word	0x0003024c

000b4874 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4874:	b508      	push	{r3, lr}
   b4876:	4b02      	ldr	r3, [pc, #8]	; (b4880 <HAL_USB_USART_Send_Data+0xc>)
   b4878:	681b      	ldr	r3, [r3, #0]
   b487a:	69db      	ldr	r3, [r3, #28]
   b487c:	9301      	str	r3, [sp, #4]
   b487e:	bd08      	pop	{r3, pc}
   b4880:	0003024c 	.word	0x0003024c

000b4884 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4884:	b508      	push	{r3, lr}
   b4886:	4b02      	ldr	r3, [pc, #8]	; (b4890 <HAL_USB_USART_Flush_Data+0xc>)
   b4888:	681b      	ldr	r3, [r3, #0]
   b488a:	6a1b      	ldr	r3, [r3, #32]
   b488c:	9301      	str	r3, [sp, #4]
   b488e:	bd08      	pop	{r3, pc}
   b4890:	0003024c 	.word	0x0003024c

000b4894 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4894:	b508      	push	{r3, lr}
   b4896:	4b02      	ldr	r3, [pc, #8]	; (b48a0 <set_system_mode+0xc>)
   b4898:	681b      	ldr	r3, [r3, #0]
   b489a:	685b      	ldr	r3, [r3, #4]
   b489c:	9301      	str	r3, [sp, #4]
   b489e:	bd08      	pop	{r3, pc}
   b48a0:	00030220 	.word	0x00030220

000b48a4 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b48a4:	b508      	push	{r3, lr}
   b48a6:	4b02      	ldr	r3, [pc, #8]	; (b48b0 <system_thread_set_state+0xc>)
   b48a8:	681b      	ldr	r3, [r3, #0]
   b48aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b48ac:	9301      	str	r3, [sp, #4]
   b48ae:	bd08      	pop	{r3, pc}
   b48b0:	00030220 	.word	0x00030220

000b48b4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b48b4:	b508      	push	{r3, lr}
   b48b6:	4b03      	ldr	r3, [pc, #12]	; (b48c4 <system_ctrl_set_app_request_handler+0x10>)
   b48b8:	681b      	ldr	r3, [r3, #0]
   b48ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b48be:	9301      	str	r3, [sp, #4]
   b48c0:	bd08      	pop	{r3, pc}
   b48c2:	0000      	.short	0x0000
   b48c4:	00030220 	.word	0x00030220

000b48c8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b48c8:	b508      	push	{r3, lr}
   b48ca:	4b03      	ldr	r3, [pc, #12]	; (b48d8 <system_ctrl_set_result+0x10>)
   b48cc:	681b      	ldr	r3, [r3, #0]
   b48ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b48d2:	9301      	str	r3, [sp, #4]
   b48d4:	bd08      	pop	{r3, pc}
   b48d6:	0000      	.short	0x0000
   b48d8:	00030220 	.word	0x00030220

000b48dc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b48dc:	b508      	push	{r3, lr}
   b48de:	4b02      	ldr	r3, [pc, #8]	; (b48e8 <spark_set_random_seed_from_cloud_handler+0xc>)
   b48e0:	681b      	ldr	r3, [r3, #0]
   b48e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b48e4:	9301      	str	r3, [sp, #4]
   b48e6:	bd08      	pop	{r3, pc}
   b48e8:	00030244 	.word	0x00030244

000b48ec <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b48ec:	b508      	push	{r3, lr}
   b48ee:	4b02      	ldr	r3, [pc, #8]	; (b48f8 <network_connect+0xc>)
   b48f0:	681b      	ldr	r3, [r3, #0]
   b48f2:	685b      	ldr	r3, [r3, #4]
   b48f4:	9301      	str	r3, [sp, #4]
   b48f6:	bd08      	pop	{r3, pc}
   b48f8:	00030240 	.word	0x00030240

000b48fc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b48fc:	b508      	push	{r3, lr}
   b48fe:	4b02      	ldr	r3, [pc, #8]	; (b4908 <network_connecting+0xc>)
   b4900:	681b      	ldr	r3, [r3, #0]
   b4902:	689b      	ldr	r3, [r3, #8]
   b4904:	9301      	str	r3, [sp, #4]
   b4906:	bd08      	pop	{r3, pc}
   b4908:	00030240 	.word	0x00030240

000b490c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b490c:	b508      	push	{r3, lr}
   b490e:	4b02      	ldr	r3, [pc, #8]	; (b4918 <network_disconnect+0xc>)
   b4910:	681b      	ldr	r3, [r3, #0]
   b4912:	68db      	ldr	r3, [r3, #12]
   b4914:	9301      	str	r3, [sp, #4]
   b4916:	bd08      	pop	{r3, pc}
   b4918:	00030240 	.word	0x00030240

000b491c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b491c:	b508      	push	{r3, lr}
   b491e:	4b02      	ldr	r3, [pc, #8]	; (b4928 <network_ready+0xc>)
   b4920:	681b      	ldr	r3, [r3, #0]
   b4922:	691b      	ldr	r3, [r3, #16]
   b4924:	9301      	str	r3, [sp, #4]
   b4926:	bd08      	pop	{r3, pc}
   b4928:	00030240 	.word	0x00030240

000b492c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b492c:	b508      	push	{r3, lr}
   b492e:	4b02      	ldr	r3, [pc, #8]	; (b4938 <network_on+0xc>)
   b4930:	681b      	ldr	r3, [r3, #0]
   b4932:	695b      	ldr	r3, [r3, #20]
   b4934:	9301      	str	r3, [sp, #4]
   b4936:	bd08      	pop	{r3, pc}
   b4938:	00030240 	.word	0x00030240

000b493c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b493c:	b508      	push	{r3, lr}
   b493e:	4b02      	ldr	r3, [pc, #8]	; (b4948 <network_off+0xc>)
   b4940:	681b      	ldr	r3, [r3, #0]
   b4942:	699b      	ldr	r3, [r3, #24]
   b4944:	9301      	str	r3, [sp, #4]
   b4946:	bd08      	pop	{r3, pc}
   b4948:	00030240 	.word	0x00030240

000b494c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b494c:	b508      	push	{r3, lr}
   b494e:	4b02      	ldr	r3, [pc, #8]	; (b4958 <network_listen+0xc>)
   b4950:	681b      	ldr	r3, [r3, #0]
   b4952:	69db      	ldr	r3, [r3, #28]
   b4954:	9301      	str	r3, [sp, #4]
   b4956:	bd08      	pop	{r3, pc}
   b4958:	00030240 	.word	0x00030240

000b495c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b495c:	b508      	push	{r3, lr}
   b495e:	4b02      	ldr	r3, [pc, #8]	; (b4968 <network_listening+0xc>)
   b4960:	681b      	ldr	r3, [r3, #0]
   b4962:	6a1b      	ldr	r3, [r3, #32]
   b4964:	9301      	str	r3, [sp, #4]
   b4966:	bd08      	pop	{r3, pc}
   b4968:	00030240 	.word	0x00030240

000b496c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b496c:	b508      	push	{r3, lr}
   b496e:	4b02      	ldr	r3, [pc, #8]	; (b4978 <network_set_listen_timeout+0xc>)
   b4970:	681b      	ldr	r3, [r3, #0]
   b4972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4974:	9301      	str	r3, [sp, #4]
   b4976:	bd08      	pop	{r3, pc}
   b4978:	00030240 	.word	0x00030240

000b497c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b497c:	b508      	push	{r3, lr}
   b497e:	4b02      	ldr	r3, [pc, #8]	; (b4988 <network_get_listen_timeout+0xc>)
   b4980:	681b      	ldr	r3, [r3, #0]
   b4982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4984:	9301      	str	r3, [sp, #4]
   b4986:	bd08      	pop	{r3, pc}
   b4988:	00030240 	.word	0x00030240

000b498c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b498c:	b508      	push	{r3, lr}
   b498e:	4b02      	ldr	r3, [pc, #8]	; (b4998 <network_is_on+0xc>)
   b4990:	681b      	ldr	r3, [r3, #0]
   b4992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4994:	9301      	str	r3, [sp, #4]
   b4996:	bd08      	pop	{r3, pc}
   b4998:	00030240 	.word	0x00030240

000b499c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b499c:	b508      	push	{r3, lr}
   b499e:	4b02      	ldr	r3, [pc, #8]	; (b49a8 <network_is_off+0xc>)
   b49a0:	681b      	ldr	r3, [r3, #0]
   b49a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b49a4:	9301      	str	r3, [sp, #4]
   b49a6:	bd08      	pop	{r3, pc}
   b49a8:	00030240 	.word	0x00030240

000b49ac <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b49ac:	b508      	push	{r3, lr}
   b49ae:	4b02      	ldr	r3, [pc, #8]	; (b49b8 <malloc+0xc>)
   b49b0:	681b      	ldr	r3, [r3, #0]
   b49b2:	681b      	ldr	r3, [r3, #0]
   b49b4:	9301      	str	r3, [sp, #4]
   b49b6:	bd08      	pop	{r3, pc}
   b49b8:	0003021c 	.word	0x0003021c

000b49bc <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b49bc:	b508      	push	{r3, lr}
   b49be:	4b02      	ldr	r3, [pc, #8]	; (b49c8 <free+0xc>)
   b49c0:	681b      	ldr	r3, [r3, #0]
   b49c2:	685b      	ldr	r3, [r3, #4]
   b49c4:	9301      	str	r3, [sp, #4]
   b49c6:	bd08      	pop	{r3, pc}
   b49c8:	0003021c 	.word	0x0003021c

000b49cc <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b49cc:	b508      	push	{r3, lr}
   b49ce:	4b02      	ldr	r3, [pc, #8]	; (b49d8 <__assert_func+0xc>)
   b49d0:	681b      	ldr	r3, [r3, #0]
   b49d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b49d4:	9301      	str	r3, [sp, #4]
   b49d6:	bd08      	pop	{r3, pc}
   b49d8:	0003021c 	.word	0x0003021c

000b49dc <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b49dc:	b508      	push	{r3, lr}
   b49de:	4b02      	ldr	r3, [pc, #8]	; (b49e8 <newlib_impure_ptr_callback+0xc>)
   b49e0:	681b      	ldr	r3, [r3, #0]
   b49e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b49e4:	9301      	str	r3, [sp, #4]
   b49e6:	bd08      	pop	{r3, pc}
   b49e8:	0003021c 	.word	0x0003021c

000b49ec <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b49ec:	4802      	ldr	r0, [pc, #8]	; (b49f8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b49ee:	2300      	movs	r3, #0
   b49f0:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b49f2:	f7ff be1f 	b.w	b4634 <os_mutex_recursive_create>
   b49f6:	bf00      	nop
   b49f8:	2003e6b8 	.word	0x2003e6b8

000b49fc <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b49fc:	2200      	movs	r2, #0
   b49fe:	6840      	ldr	r0, [r0, #4]
   b4a00:	4611      	mov	r1, r2
   b4a02:	f7ff bfab 	b.w	b495c <network_listening>

000b4a06 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4a06:	2200      	movs	r2, #0
   b4a08:	6840      	ldr	r0, [r0, #4]
   b4a0a:	4611      	mov	r1, r2
   b4a0c:	f7ff bfb6 	b.w	b497c <network_get_listen_timeout>

000b4a10 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4a10:	6840      	ldr	r0, [r0, #4]
   b4a12:	2200      	movs	r2, #0
   b4a14:	f7ff bfaa 	b.w	b496c <network_set_listen_timeout>

000b4a18 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4a18:	6840      	ldr	r0, [r0, #4]
   b4a1a:	2200      	movs	r2, #0
   b4a1c:	f081 0101 	eor.w	r1, r1, #1
   b4a20:	f7ff bf94 	b.w	b494c <network_listen>

000b4a24 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4a24:	2300      	movs	r3, #0
   b4a26:	6840      	ldr	r0, [r0, #4]
   b4a28:	461a      	mov	r2, r3
   b4a2a:	4619      	mov	r1, r3
   b4a2c:	f7ff bf86 	b.w	b493c <network_off>

000b4a30 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4a30:	2300      	movs	r3, #0
   b4a32:	6840      	ldr	r0, [r0, #4]
   b4a34:	461a      	mov	r2, r3
   b4a36:	4619      	mov	r1, r3
   b4a38:	f7ff bf78 	b.w	b492c <network_on>

000b4a3c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b4a3c:	2200      	movs	r2, #0
   b4a3e:	6840      	ldr	r0, [r0, #4]
   b4a40:	4611      	mov	r1, r2
   b4a42:	f7ff bf6b 	b.w	b491c <network_ready>

000b4a46 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4a46:	2200      	movs	r2, #0
   b4a48:	6840      	ldr	r0, [r0, #4]
   b4a4a:	4611      	mov	r1, r2
   b4a4c:	f7ff bf56 	b.w	b48fc <network_connecting>

000b4a50 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4a50:	6840      	ldr	r0, [r0, #4]
   b4a52:	2200      	movs	r2, #0
   b4a54:	2102      	movs	r1, #2
   b4a56:	f7ff bf59 	b.w	b490c <network_disconnect>

000b4a5a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b4a5a:	2300      	movs	r3, #0
   b4a5c:	6840      	ldr	r0, [r0, #4]
   b4a5e:	461a      	mov	r2, r3
   b4a60:	f7ff bf44 	b.w	b48ec <network_connect>

000b4a64 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b4a64:	4b02      	ldr	r3, [pc, #8]	; (b4a70 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b4a66:	2203      	movs	r2, #3
   b4a68:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b4a6a:	4a02      	ldr	r2, [pc, #8]	; (b4a74 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b4a6c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b4a6e:	4770      	bx	lr
   b4a70:	2003e6bc 	.word	0x2003e6bc
   b4a74:	000b55e4 	.word	0x000b55e4

000b4a78 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b4a78:	4770      	bx	lr

000b4a7a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b4a7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4a7c:	4606      	mov	r6, r0
   b4a7e:	4615      	mov	r5, r2
   b4a80:	460c      	mov	r4, r1
   b4a82:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b4a84:	42bc      	cmp	r4, r7
   b4a86:	d006      	beq.n	b4a96 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b4a88:	6833      	ldr	r3, [r6, #0]
   b4a8a:	f814 1b01 	ldrb.w	r1, [r4], #1
   b4a8e:	689b      	ldr	r3, [r3, #8]
   b4a90:	4630      	mov	r0, r6
   b4a92:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b4a94:	e7f6      	b.n	b4a84 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b4a96:	4628      	mov	r0, r5
   b4a98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4a9a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b4a9a:	7c00      	ldrb	r0, [r0, #16]
   b4a9c:	2200      	movs	r2, #0
   b4a9e:	f7ff be21 	b.w	b46e4 <hal_i2c_write>

000b4aa2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b4aa2:	7c00      	ldrb	r0, [r0, #16]
   b4aa4:	2100      	movs	r1, #0
   b4aa6:	f7ff be25 	b.w	b46f4 <hal_i2c_available>

000b4aaa <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b4aaa:	7c00      	ldrb	r0, [r0, #16]
   b4aac:	2100      	movs	r1, #0
   b4aae:	f7ff be29 	b.w	b4704 <hal_i2c_read>

000b4ab2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b4ab2:	7c00      	ldrb	r0, [r0, #16]
   b4ab4:	2100      	movs	r1, #0
   b4ab6:	f7ff be2d 	b.w	b4714 <hal_i2c_peek>

000b4aba <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b4aba:	7c00      	ldrb	r0, [r0, #16]
   b4abc:	2100      	movs	r1, #0
   b4abe:	f7ff be31 	b.w	b4724 <hal_i2c_flush>

000b4ac2 <_ZN7TwoWireD0Ev>:
   b4ac2:	b510      	push	{r4, lr}
   b4ac4:	2114      	movs	r1, #20
   b4ac6:	4604      	mov	r4, r0
   b4ac8:	f7ff fcd1 	bl	b446e <_ZdlPvj>
   b4acc:	4620      	mov	r0, r4
   b4ace:	bd10      	pop	{r4, pc}

000b4ad0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b4ad0:	b538      	push	{r3, r4, r5, lr}
   b4ad2:	4604      	mov	r4, r0
   b4ad4:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b4ad6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4ada:	2200      	movs	r2, #0
   b4adc:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b4ae0:	4b09      	ldr	r3, [pc, #36]	; (b4b08 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b4ae2:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b4ae4:	4608      	mov	r0, r1
   b4ae6:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b4ae8:	4629      	mov	r1, r5
   b4aea:	f7ff fe2b 	bl	b4744 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b4aee:	30bf      	adds	r0, #191	; 0xbf
   b4af0:	d108      	bne.n	b4b04 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b4af2:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b4af4:	07db      	lsls	r3, r3, #31
   b4af6:	d505      	bpl.n	b4b04 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b4af8:	6868      	ldr	r0, [r5, #4]
   b4afa:	f7ff ff5f 	bl	b49bc <free>
    free(conf.tx_buffer);
   b4afe:	68e8      	ldr	r0, [r5, #12]
   b4b00:	f7ff ff5c 	bl	b49bc <free>
}
   b4b04:	4620      	mov	r0, r4
   b4b06:	bd38      	pop	{r3, r4, r5, pc}
   b4b08:	000b5620 	.word	0x000b5620

000b4b0c <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b4b0c:	4770      	bx	lr

000b4b0e <_ZN9IPAddressD0Ev>:
   b4b0e:	b510      	push	{r4, lr}
   b4b10:	2118      	movs	r1, #24
   b4b12:	4604      	mov	r4, r0
   b4b14:	f7ff fcab 	bl	b446e <_ZdlPvj>
   b4b18:	4620      	mov	r0, r4
   b4b1a:	bd10      	pop	{r4, pc}

000b4b1c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b4b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b4b1e:	7d03      	ldrb	r3, [r0, #20]
   b4b20:	2b06      	cmp	r3, #6
{
   b4b22:	b08d      	sub	sp, #52	; 0x34
   b4b24:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4b26:	f100 0704 	add.w	r7, r0, #4
   b4b2a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b4b2e:	d012      	beq.n	b4b56 <_ZNK9IPAddress7printToER5Print+0x3a>
   b4b30:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4b34:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b4b38:	220a      	movs	r2, #10
   b4b3a:	4630      	mov	r0, r6
   b4b3c:	f000 f959 	bl	b4df2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b4b40:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b4b42:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b4b44:	d019      	beq.n	b4b7a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b4b46:	2c00      	cmp	r4, #0
   b4b48:	d0f4      	beq.n	b4b34 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b4b4a:	212e      	movs	r1, #46	; 0x2e
   b4b4c:	4630      	mov	r0, r6
   b4b4e:	f000 f937 	bl	b4dc0 <_ZN5Print5printEc>
   b4b52:	4404      	add	r4, r0
   b4b54:	e7ee      	b.n	b4b34 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4b56:	232f      	movs	r3, #47	; 0x2f
   b4b58:	466a      	mov	r2, sp
   b4b5a:	4639      	mov	r1, r7
   b4b5c:	200a      	movs	r0, #10
		buf[0] = 0;
   b4b5e:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4b62:	f7ff fdf7 	bl	b4754 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b4b66:	4668      	mov	r0, sp
   b4b68:	f7ff fc3c 	bl	b43e4 <strlen>
   b4b6c:	6833      	ldr	r3, [r6, #0]
   b4b6e:	4602      	mov	r2, r0
   b4b70:	68db      	ldr	r3, [r3, #12]
   b4b72:	4669      	mov	r1, sp
   b4b74:	4630      	mov	r0, r6
   b4b76:	4798      	blx	r3
   b4b78:	4604      	mov	r4, r0
    }
    return n;
}
   b4b7a:	4620      	mov	r0, r4
   b4b7c:	b00d      	add	sp, #52	; 0x34
   b4b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b4b80 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b4b80:	b510      	push	{r4, lr}
   b4b82:	4b05      	ldr	r3, [pc, #20]	; (b4b98 <_ZN9IPAddressC1Ev+0x18>)
   b4b84:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b4b86:	2211      	movs	r2, #17
   b4b88:	f840 3b04 	str.w	r3, [r0], #4
   b4b8c:	2100      	movs	r1, #0
   b4b8e:	f000 fc79 	bl	b5484 <memset>
}
   b4b92:	4620      	mov	r0, r4
   b4b94:	bd10      	pop	{r4, pc}
   b4b96:	bf00      	nop
   b4b98:	000b5648 	.word	0x000b5648

000b4b9c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b4b9c:	4603      	mov	r3, r0
   b4b9e:	4a07      	ldr	r2, [pc, #28]	; (b4bbc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b4ba0:	b510      	push	{r4, lr}
   b4ba2:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b4ba6:	f101 0210 	add.w	r2, r1, #16
   b4baa:	f851 4b04 	ldr.w	r4, [r1], #4
   b4bae:	f843 4b04 	str.w	r4, [r3], #4
   b4bb2:	4291      	cmp	r1, r2
   b4bb4:	d1f9      	bne.n	b4baa <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b4bb6:	780a      	ldrb	r2, [r1, #0]
   b4bb8:	701a      	strb	r2, [r3, #0]
}
   b4bba:	bd10      	pop	{r4, pc}
   b4bbc:	000b5648 	.word	0x000b5648

000b4bc0 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b4bc0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b4bc2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b4bc6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b4bca:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b4bce:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b4bd2:	2304      	movs	r3, #4
   b4bd4:	6041      	str	r1, [r0, #4]
   b4bd6:	7503      	strb	r3, [r0, #20]
}
   b4bd8:	bd10      	pop	{r4, pc}
	...

000b4bdc <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b4bdc:	b507      	push	{r0, r1, r2, lr}
   b4bde:	4b06      	ldr	r3, [pc, #24]	; (b4bf8 <_ZN9IPAddressC1EPKh+0x1c>)
   b4be0:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b4be2:	78cb      	ldrb	r3, [r1, #3]
   b4be4:	9300      	str	r3, [sp, #0]
   b4be6:	788b      	ldrb	r3, [r1, #2]
   b4be8:	784a      	ldrb	r2, [r1, #1]
   b4bea:	7809      	ldrb	r1, [r1, #0]
   b4bec:	f7ff ffe8 	bl	b4bc0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b4bf0:	b003      	add	sp, #12
   b4bf2:	f85d fb04 	ldr.w	pc, [sp], #4
   b4bf6:	bf00      	nop
   b4bf8:	000b5648 	.word	0x000b5648

000b4bfc <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b4bfc:	4b01      	ldr	r3, [pc, #4]	; (b4c04 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b4bfe:	4a02      	ldr	r2, [pc, #8]	; (b4c08 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b4c00:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b4c02:	4770      	bx	lr
   b4c04:	2003e6c4 	.word	0x2003e6c4
   b4c08:	000b5654 	.word	0x000b5654

000b4c0c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b4c0c:	2300      	movs	r3, #0
   b4c0e:	6840      	ldr	r0, [r0, #4]
   b4c10:	461a      	mov	r2, r3
   b4c12:	f7ff be6b 	b.w	b48ec <network_connect>

000b4c16 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b4c16:	6840      	ldr	r0, [r0, #4]
   b4c18:	2200      	movs	r2, #0
   b4c1a:	2102      	movs	r1, #2
   b4c1c:	f7ff be76 	b.w	b490c <network_disconnect>

000b4c20 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b4c20:	2200      	movs	r2, #0
   b4c22:	6840      	ldr	r0, [r0, #4]
   b4c24:	4611      	mov	r1, r2
   b4c26:	f7ff be69 	b.w	b48fc <network_connecting>

000b4c2a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b4c2a:	2200      	movs	r2, #0
   b4c2c:	6840      	ldr	r0, [r0, #4]
   b4c2e:	4611      	mov	r1, r2
   b4c30:	f7ff be74 	b.w	b491c <network_ready>

000b4c34 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b4c34:	2300      	movs	r3, #0
   b4c36:	6840      	ldr	r0, [r0, #4]
   b4c38:	461a      	mov	r2, r3
   b4c3a:	4619      	mov	r1, r3
   b4c3c:	f7ff be76 	b.w	b492c <network_on>

000b4c40 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b4c40:	2300      	movs	r3, #0
   b4c42:	6840      	ldr	r0, [r0, #4]
   b4c44:	461a      	mov	r2, r3
   b4c46:	4619      	mov	r1, r3
   b4c48:	f7ff be78 	b.w	b493c <network_off>

000b4c4c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b4c4c:	6840      	ldr	r0, [r0, #4]
   b4c4e:	2100      	movs	r1, #0
   b4c50:	f7ff be9c 	b.w	b498c <network_is_on>

000b4c54 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b4c54:	6840      	ldr	r0, [r0, #4]
   b4c56:	2100      	movs	r1, #0
   b4c58:	f7ff bea0 	b.w	b499c <network_is_off>

000b4c5c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b4c5c:	6840      	ldr	r0, [r0, #4]
   b4c5e:	2200      	movs	r2, #0
   b4c60:	f081 0101 	eor.w	r1, r1, #1
   b4c64:	f7ff be72 	b.w	b494c <network_listen>

000b4c68 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b4c68:	6840      	ldr	r0, [r0, #4]
   b4c6a:	2200      	movs	r2, #0
   b4c6c:	f7ff be7e 	b.w	b496c <network_set_listen_timeout>

000b4c70 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b4c70:	2200      	movs	r2, #0
   b4c72:	6840      	ldr	r0, [r0, #4]
   b4c74:	4611      	mov	r1, r2
   b4c76:	f7ff be81 	b.w	b497c <network_get_listen_timeout>

000b4c7a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b4c7a:	2200      	movs	r2, #0
   b4c7c:	6840      	ldr	r0, [r0, #4]
   b4c7e:	4611      	mov	r1, r2
   b4c80:	f7ff be6c 	b.w	b495c <network_listening>

000b4c84 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b4c84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b4c88:	b095      	sub	sp, #84	; 0x54
   b4c8a:	4614      	mov	r4, r2
   b4c8c:	460d      	mov	r5, r1
   b4c8e:	4607      	mov	r7, r0
    IPAddress addr;
   b4c90:	f7ff ff76 	bl	b4b80 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b4c94:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b4c96:	221c      	movs	r2, #28
   b4c98:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b4c9a:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b4c9c:	f000 fbf2 	bl	b5484 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b4ca0:	2340      	movs	r3, #64	; 0x40
   b4ca2:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b4ca4:	4620      	mov	r0, r4
   b4ca6:	466b      	mov	r3, sp
   b4ca8:	aa0c      	add	r2, sp, #48	; 0x30
   b4caa:	2100      	movs	r1, #0
   b4cac:	f7ff fd62 	bl	b4774 <netdb_getaddrinfo>
    if (!r) {
   b4cb0:	4604      	mov	r4, r0
   b4cb2:	2800      	cmp	r0, #0
   b4cb4:	d14b      	bne.n	b4d4e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b4cb6:	4602      	mov	r2, r0
   b4cb8:	2101      	movs	r1, #1
   b4cba:	6868      	ldr	r0, [r5, #4]
   b4cbc:	f7ff fe2e 	bl	b491c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b4cc0:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b4cc2:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b4cc4:	4622      	mov	r2, r4
   b4cc6:	6868      	ldr	r0, [r5, #4]
   b4cc8:	f7ff fe28 	bl	b491c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4ccc:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b4cce:	4681      	mov	r9, r0
        bool ok = false;
   b4cd0:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4cd2:	2e00      	cmp	r6, #0
   b4cd4:	d03b      	beq.n	b4d4e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b4cd6:	2900      	cmp	r1, #0
   b4cd8:	d139      	bne.n	b4d4e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b4cda:	6873      	ldr	r3, [r6, #4]
   b4cdc:	2b02      	cmp	r3, #2
   b4cde:	d003      	beq.n	b4ce8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b4ce0:	2b0a      	cmp	r3, #10
   b4ce2:	d011      	beq.n	b4d08 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4ce4:	69f6      	ldr	r6, [r6, #28]
   b4ce6:	e7f4      	b.n	b4cd2 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b4ce8:	f1b8 0f00 	cmp.w	r8, #0
   b4cec:	d0fa      	beq.n	b4ce4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b4cee:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b4cf0:	a806      	add	r0, sp, #24
   b4cf2:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b4cf4:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b4cf6:	f7ff ff71 	bl	b4bdc <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b4cfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4cfc:	1d3c      	adds	r4, r7, #4
   b4cfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4d00:	682b      	ldr	r3, [r5, #0]
   b4d02:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b4d04:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b4d06:	e7ed      	b.n	b4ce4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b4d08:	f1b9 0f00 	cmp.w	r9, #0
   b4d0c:	d0ea      	beq.n	b4ce4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b4d0e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b4d10:	2210      	movs	r2, #16
   b4d12:	a801      	add	r0, sp, #4
   b4d14:	f000 fbb6 	bl	b5484 <memset>
                    a.v = 6;
   b4d18:	2306      	movs	r3, #6
   b4d1a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b4d1e:	ad01      	add	r5, sp, #4
   b4d20:	f104 0308 	add.w	r3, r4, #8
   b4d24:	3418      	adds	r4, #24
   b4d26:	6818      	ldr	r0, [r3, #0]
   b4d28:	6859      	ldr	r1, [r3, #4]
   b4d2a:	462a      	mov	r2, r5
   b4d2c:	c203      	stmia	r2!, {r0, r1}
   b4d2e:	3308      	adds	r3, #8
   b4d30:	42a3      	cmp	r3, r4
   b4d32:	4615      	mov	r5, r2
   b4d34:	d1f7      	bne.n	b4d26 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b4d36:	a901      	add	r1, sp, #4
   b4d38:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b4d3a:	ad07      	add	r5, sp, #28
   b4d3c:	f7ff ff2e 	bl	b4b9c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b4d40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4d42:	1d3c      	adds	r4, r7, #4
   b4d44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4d46:	682b      	ldr	r3, [r5, #0]
   b4d48:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b4d4a:	4649      	mov	r1, r9
   b4d4c:	e7ca      	b.n	b4ce4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b4d4e:	9800      	ldr	r0, [sp, #0]
   b4d50:	f7ff fd08 	bl	b4764 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b4d54:	4638      	mov	r0, r7
   b4d56:	b015      	add	sp, #84	; 0x54
   b4d58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b4d5c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b4d5c:	4b02      	ldr	r3, [pc, #8]	; (b4d68 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b4d5e:	4a03      	ldr	r2, [pc, #12]	; (b4d6c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b4d60:	601a      	str	r2, [r3, #0]
   b4d62:	2200      	movs	r2, #0
   b4d64:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
   b4d66:	4770      	bx	lr
   b4d68:	2003e6c8 	.word	0x2003e6c8
   b4d6c:	000b5660 	.word	0x000b5660

000b4d70 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b4d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4d72:	4606      	mov	r6, r0
   b4d74:	460d      	mov	r5, r1
  size_t n = 0;
   b4d76:	188f      	adds	r7, r1, r2
   b4d78:	2400      	movs	r4, #0
  while (size--) {
   b4d7a:	42bd      	cmp	r5, r7
   b4d7c:	d00c      	beq.n	b4d98 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b4d7e:	6833      	ldr	r3, [r6, #0]
   b4d80:	f815 1b01 	ldrb.w	r1, [r5], #1
   b4d84:	689b      	ldr	r3, [r3, #8]
   b4d86:	4630      	mov	r0, r6
   b4d88:	4798      	blx	r3
     if (chunk>=0)
   b4d8a:	1e03      	subs	r3, r0, #0
   b4d8c:	db01      	blt.n	b4d92 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b4d8e:	441c      	add	r4, r3
  while (size--) {
   b4d90:	e7f3      	b.n	b4d7a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b4d92:	2c00      	cmp	r4, #0
   b4d94:	bf08      	it	eq
   b4d96:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b4d98:	4620      	mov	r0, r4
   b4d9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4d9c <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b4d9c:	b513      	push	{r0, r1, r4, lr}
   b4d9e:	4604      	mov	r4, r0
    }
   b4da0:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b4da2:	b159      	cbz	r1, b4dbc <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b4da4:	9101      	str	r1, [sp, #4]
   b4da6:	f7ff fb1d 	bl	b43e4 <strlen>
   b4daa:	6823      	ldr	r3, [r4, #0]
   b4dac:	9901      	ldr	r1, [sp, #4]
   b4dae:	68db      	ldr	r3, [r3, #12]
   b4db0:	4602      	mov	r2, r0
   b4db2:	4620      	mov	r0, r4
    }
   b4db4:	b002      	add	sp, #8
   b4db6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b4dba:	4718      	bx	r3
    }
   b4dbc:	b002      	add	sp, #8
   b4dbe:	bd10      	pop	{r4, pc}

000b4dc0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b4dc0:	6803      	ldr	r3, [r0, #0]
   b4dc2:	689b      	ldr	r3, [r3, #8]
   b4dc4:	4718      	bx	r3

000b4dc6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b4dc6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b4dc8:	210d      	movs	r1, #13
{
   b4dca:	4605      	mov	r5, r0
  size_t n = print('\r');
   b4dcc:	f7ff fff8 	bl	b4dc0 <_ZN5Print5printEc>
  n += print('\n');
   b4dd0:	210a      	movs	r1, #10
  size_t n = print('\r');
   b4dd2:	4604      	mov	r4, r0
  n += print('\n');
   b4dd4:	4628      	mov	r0, r5
   b4dd6:	f7ff fff3 	bl	b4dc0 <_ZN5Print5printEc>
  return n;
}
   b4dda:	4420      	add	r0, r4
   b4ddc:	bd38      	pop	{r3, r4, r5, pc}

000b4dde <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b4dde:	b538      	push	{r3, r4, r5, lr}
   b4de0:	4605      	mov	r5, r0
  return write(str);
   b4de2:	f7ff ffdb 	bl	b4d9c <_ZN5Print5writeEPKc>
   b4de6:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b4de8:	4628      	mov	r0, r5
   b4dea:	f7ff ffec 	bl	b4dc6 <_ZN5Print7printlnEv>
  return n;
}
   b4dee:	4420      	add	r0, r4
   b4df0:	bd38      	pop	{r3, r4, r5, pc}

000b4df2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b4df2:	b530      	push	{r4, r5, lr}
   b4df4:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b4df6:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b4df8:	2a01      	cmp	r2, #1
  *str = '\0';
   b4dfa:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b4dfe:	bf98      	it	ls
   b4e00:	220a      	movls	r2, #10
   b4e02:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b4e04:	460d      	mov	r5, r1
   b4e06:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b4e0a:	fb01 5312 	mls	r3, r1, r2, r5
   b4e0e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4e12:	2b09      	cmp	r3, #9
   b4e14:	bf94      	ite	ls
   b4e16:	3330      	addls	r3, #48	; 0x30
   b4e18:	3337      	addhi	r3, #55	; 0x37
   b4e1a:	b2db      	uxtb	r3, r3
  } while(n);
   b4e1c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4e1e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b4e22:	d9ef      	bls.n	b4e04 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b4e24:	4621      	mov	r1, r4
   b4e26:	f7ff ffb9 	bl	b4d9c <_ZN5Print5writeEPKc>
}
   b4e2a:	b00b      	add	sp, #44	; 0x2c
   b4e2c:	bd30      	pop	{r4, r5, pc}
	...

000b4e30 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b4e30:	4b01      	ldr	r3, [pc, #4]	; (b4e38 <_GLOBAL__sub_I_RGB+0x8>)
   b4e32:	2200      	movs	r2, #0
   b4e34:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b4e36:	4770      	bx	lr
   b4e38:	2003e6d0 	.word	0x2003e6d0

000b4e3c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b4e3c:	b510      	push	{r4, lr}
   b4e3e:	4604      	mov	r4, r0
   b4e40:	4608      	mov	r0, r1
{
    _spi = spi;
   b4e42:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b4e44:	f7ff fc9e 	bl	b4784 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b4e48:	2300      	movs	r3, #0
   b4e4a:	6063      	str	r3, [r4, #4]
}
   b4e4c:	4620      	mov	r0, r4
   b4e4e:	bd10      	pop	{r4, pc}

000b4e50 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b4e50:	4b05      	ldr	r3, [pc, #20]	; (b4e68 <_GLOBAL__sub_I_System+0x18>)
   b4e52:	2202      	movs	r2, #2
   b4e54:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4e56:	4b05      	ldr	r3, [pc, #20]	; (b4e6c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b4e58:	4a05      	ldr	r2, [pc, #20]	; (b4e70 <_GLOBAL__sub_I_System+0x20>)
   b4e5a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4e5c:	2000      	movs	r0, #0
   b4e5e:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4e62:	f7ff bd17 	b.w	b4894 <set_system_mode>
   b4e66:	bf00      	nop
   b4e68:	2003e6ec 	.word	0x2003e6ec
   b4e6c:	2003e6e0 	.word	0x2003e6e0
   b4e70:	ffff0000 	.word	0xffff0000

000b4e74 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b4e74:	4b02      	ldr	r3, [pc, #8]	; (b4e80 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b4e76:	681a      	ldr	r2, [r3, #0]
   b4e78:	4b02      	ldr	r3, [pc, #8]	; (b4e84 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b4e7a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b4e7c:	4770      	bx	lr
   b4e7e:	bf00      	nop
   b4e80:	2003e62c 	.word	0x2003e62c
   b4e84:	2003e6f0 	.word	0x2003e6f0

000b4e88 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b4e88:	4770      	bx	lr

000b4e8a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b4e8a:	7441      	strb	r1, [r0, #17]
}
   b4e8c:	4770      	bx	lr

000b4e8e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b4e8e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b4e90:	7c00      	ldrb	r0, [r0, #16]
   b4e92:	f7ff fcb7 	bl	b4804 <hal_usart_available_data_for_write>
}
   b4e96:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4e9a:	bd08      	pop	{r3, pc}

000b4e9c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b4e9c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b4e9e:	7c00      	ldrb	r0, [r0, #16]
   b4ea0:	f7ff fc88 	bl	b47b4 <hal_usart_available>
}
   b4ea4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4ea8:	bd08      	pop	{r3, pc}

000b4eaa <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b4eaa:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b4eac:	7c00      	ldrb	r0, [r0, #16]
   b4eae:	f7ff fc91 	bl	b47d4 <hal_usart_peek>
}
   b4eb2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4eb6:	bd08      	pop	{r3, pc}

000b4eb8 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b4eb8:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b4eba:	7c00      	ldrb	r0, [r0, #16]
   b4ebc:	f7ff fc82 	bl	b47c4 <hal_usart_read>
}
   b4ec0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4ec4:	bd08      	pop	{r3, pc}

000b4ec6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b4ec6:	7c00      	ldrb	r0, [r0, #16]
   b4ec8:	f7ff bc8c 	b.w	b47e4 <hal_usart_flush>

000b4ecc <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b4ecc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b4ece:	7c45      	ldrb	r5, [r0, #17]
{
   b4ed0:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b4ed2:	b12d      	cbz	r5, b4ee0 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b4ed4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b4ed6:	b003      	add	sp, #12
   b4ed8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b4edc:	f7ff bc62 	b.w	b47a4 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b4ee0:	7c00      	ldrb	r0, [r0, #16]
   b4ee2:	9101      	str	r1, [sp, #4]
   b4ee4:	f7ff fc8e 	bl	b4804 <hal_usart_available_data_for_write>
   b4ee8:	2800      	cmp	r0, #0
   b4eea:	9901      	ldr	r1, [sp, #4]
   b4eec:	dcf2      	bgt.n	b4ed4 <_ZN11USARTSerial5writeEh+0x8>
}
   b4eee:	4628      	mov	r0, r5
   b4ef0:	b003      	add	sp, #12
   b4ef2:	bd30      	pop	{r4, r5, pc}

000b4ef4 <_ZN11USARTSerialD0Ev>:
   b4ef4:	b510      	push	{r4, lr}
   b4ef6:	2114      	movs	r1, #20
   b4ef8:	4604      	mov	r4, r0
   b4efa:	f7ff fab8 	bl	b446e <_ZdlPvj>
   b4efe:	4620      	mov	r0, r4
   b4f00:	bd10      	pop	{r4, pc}
	...

000b4f04 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b4f04:	b510      	push	{r4, lr}
   b4f06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4f0a:	4604      	mov	r4, r0
   b4f0c:	4608      	mov	r0, r1
   b4f0e:	4611      	mov	r1, r2
   b4f10:	2200      	movs	r2, #0
   b4f12:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b4f16:	4b04      	ldr	r3, [pc, #16]	; (b4f28 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b4f18:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b4f1a:	2301      	movs	r3, #1
  _serial = serial;
   b4f1c:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b4f1e:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b4f20:	f7ff fc78 	bl	b4814 <hal_usart_init_ex>
}
   b4f24:	4620      	mov	r0, r4
   b4f26:	bd10      	pop	{r4, pc}
   b4f28:	000b56b8 	.word	0x000b56b8

000b4f2c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b4f2c:	7441      	strb	r1, [r0, #17]
}
   b4f2e:	4770      	bx	lr

000b4f30 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4f30:	4770      	bx	lr

000b4f32 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b4f32:	4770      	bx	lr

000b4f34 <_ZN9USBSerial4readEv>:
{
   b4f34:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b4f36:	2100      	movs	r1, #0
   b4f38:	7c00      	ldrb	r0, [r0, #16]
   b4f3a:	f7ff fc93 	bl	b4864 <HAL_USB_USART_Receive_Data>
}
   b4f3e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4f42:	bd08      	pop	{r3, pc}

000b4f44 <_ZN9USBSerial4peekEv>:
{
   b4f44:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b4f46:	2101      	movs	r1, #1
   b4f48:	7c00      	ldrb	r0, [r0, #16]
   b4f4a:	f7ff fc8b 	bl	b4864 <HAL_USB_USART_Receive_Data>
}
   b4f4e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4f52:	bd08      	pop	{r3, pc}

000b4f54 <_ZN9USBSerial17availableForWriteEv>:
{
   b4f54:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b4f56:	7c00      	ldrb	r0, [r0, #16]
   b4f58:	f7ff fc7c 	bl	b4854 <HAL_USB_USART_Available_Data_For_Write>
}
   b4f5c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4f60:	bd08      	pop	{r3, pc}

000b4f62 <_ZN9USBSerial9availableEv>:
{
   b4f62:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b4f64:	7c00      	ldrb	r0, [r0, #16]
   b4f66:	f7ff fc6d 	bl	b4844 <HAL_USB_USART_Available_Data>
}
   b4f6a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4f6e:	bd08      	pop	{r3, pc}

000b4f70 <_ZN9USBSerial5writeEh>:
{
   b4f70:	b513      	push	{r0, r1, r4, lr}
   b4f72:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b4f74:	7c00      	ldrb	r0, [r0, #16]
{
   b4f76:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b4f78:	f7ff fc6c 	bl	b4854 <HAL_USB_USART_Available_Data_For_Write>
   b4f7c:	2800      	cmp	r0, #0
   b4f7e:	9901      	ldr	r1, [sp, #4]
   b4f80:	dc01      	bgt.n	b4f86 <_ZN9USBSerial5writeEh+0x16>
   b4f82:	7c60      	ldrb	r0, [r4, #17]
   b4f84:	b120      	cbz	r0, b4f90 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b4f86:	7c20      	ldrb	r0, [r4, #16]
   b4f88:	f7ff fc74 	bl	b4874 <HAL_USB_USART_Send_Data>
   b4f8c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b4f90:	b002      	add	sp, #8
   b4f92:	bd10      	pop	{r4, pc}

000b4f94 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b4f94:	7c00      	ldrb	r0, [r0, #16]
   b4f96:	f7ff bc75 	b.w	b4884 <HAL_USB_USART_Flush_Data>

000b4f9a <_ZN9USBSerialD0Ev>:
   b4f9a:	b510      	push	{r4, lr}
   b4f9c:	2114      	movs	r1, #20
   b4f9e:	4604      	mov	r4, r0
   b4fa0:	f7ff fa65 	bl	b446e <_ZdlPvj>
   b4fa4:	4620      	mov	r0, r4
   b4fa6:	bd10      	pop	{r4, pc}

000b4fa8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b4fa8:	b510      	push	{r4, lr}
   b4faa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4fae:	4604      	mov	r4, r0
   b4fb0:	4608      	mov	r0, r1
   b4fb2:	2100      	movs	r1, #0
   b4fb4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b4fb8:	4b04      	ldr	r3, [pc, #16]	; (b4fcc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b4fba:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b4fbc:	2301      	movs	r3, #1
  _serial = serial;
   b4fbe:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b4fc0:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b4fc2:	4611      	mov	r1, r2
   b4fc4:	f7ff fc2e 	bl	b4824 <HAL_USB_USART_Init>
}
   b4fc8:	4620      	mov	r0, r4
   b4fca:	bd10      	pop	{r4, pc}
   b4fcc:	000b56e8 	.word	0x000b56e8

000b4fd0 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b4fd0:	7c00      	ldrb	r0, [r0, #16]
   b4fd2:	2200      	movs	r2, #0
   b4fd4:	f7ff bc2e 	b.w	b4834 <HAL_USB_USART_Begin>

000b4fd8 <_Z19acquireSerialBufferv>:
{
   b4fd8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b4fda:	2214      	movs	r2, #20
{
   b4fdc:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b4fde:	2100      	movs	r1, #0
   b4fe0:	f000 fa50 	bl	b5484 <memset>
}
   b4fe4:	4620      	mov	r0, r4
   b4fe6:	bd10      	pop	{r4, pc}

000b4fe8 <_Z16_fetch_usbserialv>:
{
   b4fe8:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4fea:	4c0f      	ldr	r4, [pc, #60]	; (b5028 <_Z16_fetch_usbserialv+0x40>)
{
   b4fec:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b4fee:	a803      	add	r0, sp, #12
   b4ff0:	f7ff fff2 	bl	b4fd8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4ff4:	7821      	ldrb	r1, [r4, #0]
   b4ff6:	f3bf 8f5b 	dmb	ish
   b4ffa:	f011 0101 	ands.w	r1, r1, #1
   b4ffe:	d10f      	bne.n	b5020 <_Z16_fetch_usbserialv+0x38>
   b5000:	4620      	mov	r0, r4
   b5002:	9101      	str	r1, [sp, #4]
   b5004:	f7ff fa35 	bl	b4472 <__cxa_guard_acquire>
   b5008:	9901      	ldr	r1, [sp, #4]
   b500a:	b148      	cbz	r0, b5020 <_Z16_fetch_usbserialv+0x38>
   b500c:	aa03      	add	r2, sp, #12
   b500e:	4807      	ldr	r0, [pc, #28]	; (b502c <_Z16_fetch_usbserialv+0x44>)
   b5010:	f7ff ffca 	bl	b4fa8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b5014:	4620      	mov	r0, r4
   b5016:	f7ff fa31 	bl	b447c <__cxa_guard_release>
   b501a:	4805      	ldr	r0, [pc, #20]	; (b5030 <_Z16_fetch_usbserialv+0x48>)
   b501c:	f000 fa1e 	bl	b545c <atexit>
	return _usbserial;
}
   b5020:	4802      	ldr	r0, [pc, #8]	; (b502c <_Z16_fetch_usbserialv+0x44>)
   b5022:	b008      	add	sp, #32
   b5024:	bd10      	pop	{r4, pc}
   b5026:	bf00      	nop
   b5028:	2003e6f4 	.word	0x2003e6f4
   b502c:	2003e6f8 	.word	0x2003e6f8
   b5030:	000b4f31 	.word	0x000b4f31

000b5034 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b5034:	2200      	movs	r2, #0
   b5036:	6840      	ldr	r0, [r0, #4]
   b5038:	4611      	mov	r1, r2
   b503a:	f7ff bc6f 	b.w	b491c <network_ready>

000b503e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b503e:	2200      	movs	r2, #0
   b5040:	6840      	ldr	r0, [r0, #4]
   b5042:	4611      	mov	r1, r2
   b5044:	f7ff bc8a 	b.w	b495c <network_listening>

000b5048 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5048:	2200      	movs	r2, #0
   b504a:	6840      	ldr	r0, [r0, #4]
   b504c:	4611      	mov	r1, r2
   b504e:	f7ff bc95 	b.w	b497c <network_get_listen_timeout>

000b5052 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5052:	6840      	ldr	r0, [r0, #4]
   b5054:	2200      	movs	r2, #0
   b5056:	f7ff bc89 	b.w	b496c <network_set_listen_timeout>

000b505a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b505a:	6840      	ldr	r0, [r0, #4]
   b505c:	2200      	movs	r2, #0
   b505e:	f081 0101 	eor.w	r1, r1, #1
   b5062:	f7ff bc73 	b.w	b494c <network_listen>

000b5066 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5066:	2300      	movs	r3, #0
   b5068:	6840      	ldr	r0, [r0, #4]
   b506a:	461a      	mov	r2, r3
   b506c:	4619      	mov	r1, r3
   b506e:	f7ff bc65 	b.w	b493c <network_off>

000b5072 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5072:	2300      	movs	r3, #0
   b5074:	6840      	ldr	r0, [r0, #4]
   b5076:	461a      	mov	r2, r3
   b5078:	4619      	mov	r1, r3
   b507a:	f7ff bc57 	b.w	b492c <network_on>

000b507e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b507e:	2200      	movs	r2, #0
   b5080:	6840      	ldr	r0, [r0, #4]
   b5082:	4611      	mov	r1, r2
   b5084:	f7ff bc3a 	b.w	b48fc <network_connecting>

000b5088 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5088:	6840      	ldr	r0, [r0, #4]
   b508a:	2200      	movs	r2, #0
   b508c:	2102      	movs	r1, #2
   b508e:	f7ff bc3d 	b.w	b490c <network_disconnect>

000b5092 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5092:	2300      	movs	r3, #0
   b5094:	6840      	ldr	r0, [r0, #4]
   b5096:	461a      	mov	r2, r3
   b5098:	f7ff bc28 	b.w	b48ec <network_connect>

000b509c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b509c:	4b02      	ldr	r3, [pc, #8]	; (b50a8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b509e:	2204      	movs	r2, #4
   b50a0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b50a2:	4a02      	ldr	r2, [pc, #8]	; (b50ac <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b50a4:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b50a6:	4770      	bx	lr
   b50a8:	2003e70c 	.word	0x2003e70c
   b50ac:	000b5718 	.word	0x000b5718

000b50b0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b50b0:	4b01      	ldr	r3, [pc, #4]	; (b50b8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b50b2:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b50b4:	4770      	bx	lr
   b50b6:	bf00      	nop
   b50b8:	2003e630 	.word	0x2003e630

000b50bc <serialEventRun>:
{
   b50bc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b50be:	4b0b      	ldr	r3, [pc, #44]	; (b50ec <serialEventRun+0x30>)
   b50c0:	b143      	cbz	r3, b50d4 <serialEventRun+0x18>
   b50c2:	f7ff ff91 	bl	b4fe8 <_Z16_fetch_usbserialv>
   b50c6:	6803      	ldr	r3, [r0, #0]
   b50c8:	691b      	ldr	r3, [r3, #16]
   b50ca:	4798      	blx	r3
   b50cc:	2800      	cmp	r0, #0
   b50ce:	dd01      	ble.n	b50d4 <serialEventRun+0x18>
        serialEvent();
   b50d0:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b50d4:	4b06      	ldr	r3, [pc, #24]	; (b50f0 <serialEventRun+0x34>)
   b50d6:	b143      	cbz	r3, b50ea <serialEventRun+0x2e>
   b50d8:	f000 f99a 	bl	b5410 <_Z22__fetch_global_Serial1v>
   b50dc:	6803      	ldr	r3, [r0, #0]
   b50de:	691b      	ldr	r3, [r3, #16]
   b50e0:	4798      	blx	r3
   b50e2:	2800      	cmp	r0, #0
   b50e4:	dd01      	ble.n	b50ea <serialEventRun+0x2e>
        serialEvent1();
   b50e6:	f3af 8000 	nop.w
}
   b50ea:	bd08      	pop	{r3, pc}
	...

000b50f4 <_post_loop>:
{
   b50f4:	b508      	push	{r3, lr}
	serialEventRun();
   b50f6:	f7ff ffe1 	bl	b50bc <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b50fa:	f7ff faab 	bl	b4654 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b50fe:	4b01      	ldr	r3, [pc, #4]	; (b5104 <_post_loop+0x10>)
   b5100:	6018      	str	r0, [r3, #0]
}
   b5102:	bd08      	pop	{r3, pc}
   b5104:	2003e728 	.word	0x2003e728

000b5108 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5108:	4805      	ldr	r0, [pc, #20]	; (b5120 <_Z33system_initialize_user_backup_ramv+0x18>)
   b510a:	4a06      	ldr	r2, [pc, #24]	; (b5124 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b510c:	4906      	ldr	r1, [pc, #24]	; (b5128 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b510e:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5110:	1a12      	subs	r2, r2, r0
   b5112:	f000 f9a9 	bl	b5468 <memcpy>
    __backup_sram_signature = signature;
   b5116:	4b05      	ldr	r3, [pc, #20]	; (b512c <_Z33system_initialize_user_backup_ramv+0x24>)
   b5118:	4a05      	ldr	r2, [pc, #20]	; (b5130 <_Z33system_initialize_user_backup_ramv+0x28>)
   b511a:	601a      	str	r2, [r3, #0]
}
   b511c:	bd08      	pop	{r3, pc}
   b511e:	bf00      	nop
   b5120:	2003f400 	.word	0x2003f400
   b5124:	2003f404 	.word	0x2003f404
   b5128:	000b5874 	.word	0x000b5874
   b512c:	2003f400 	.word	0x2003f400
   b5130:	9a271c1e 	.word	0x9a271c1e

000b5134 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b5134:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5136:	2300      	movs	r3, #0
   b5138:	9300      	str	r3, [sp, #0]
   b513a:	461a      	mov	r2, r3
   b513c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5140:	f7ff fbc2 	bl	b48c8 <system_ctrl_set_result>
}
   b5144:	b003      	add	sp, #12
   b5146:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b514c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b514c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b514e:	8843      	ldrh	r3, [r0, #2]
   b5150:	2b0a      	cmp	r3, #10
   b5152:	d008      	beq.n	b5166 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b5154:	2b50      	cmp	r3, #80	; 0x50
   b5156:	d10b      	bne.n	b5170 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b5158:	4b09      	ldr	r3, [pc, #36]	; (b5180 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b515a:	681b      	ldr	r3, [r3, #0]
   b515c:	b14b      	cbz	r3, b5172 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b515e:	b003      	add	sp, #12
   b5160:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b5164:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b5166:	f7ff ffe5 	bl	b5134 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b516a:	b003      	add	sp, #12
   b516c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5170:	2300      	movs	r3, #0
   b5172:	9300      	str	r3, [sp, #0]
   b5174:	461a      	mov	r2, r3
   b5176:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b517a:	f7ff fba5 	bl	b48c8 <system_ctrl_set_result>
}
   b517e:	e7f4      	b.n	b516a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b5180:	2003e718 	.word	0x2003e718

000b5184 <module_user_init_hook>:
{
   b5184:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b5186:	4812      	ldr	r0, [pc, #72]	; (b51d0 <module_user_init_hook+0x4c>)
   b5188:	2100      	movs	r1, #0
   b518a:	f7ff fc27 	bl	b49dc <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b518e:	4b11      	ldr	r3, [pc, #68]	; (b51d4 <module_user_init_hook+0x50>)
   b5190:	681a      	ldr	r2, [r3, #0]
   b5192:	4b11      	ldr	r3, [pc, #68]	; (b51d8 <module_user_init_hook+0x54>)
   b5194:	429a      	cmp	r2, r3
   b5196:	4b11      	ldr	r3, [pc, #68]	; (b51dc <module_user_init_hook+0x58>)
   b5198:	bf0c      	ite	eq
   b519a:	2201      	moveq	r2, #1
   b519c:	2200      	movne	r2, #0
   b519e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b51a0:	d001      	beq.n	b51a6 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b51a2:	f7ff ffb1 	bl	b5108 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b51a6:	f7ff fa4d 	bl	b4644 <HAL_RNG_GetRandomNumber>
   b51aa:	4604      	mov	r4, r0
    srand(seed);
   b51ac:	f000 f972 	bl	b5494 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b51b0:	4b0b      	ldr	r3, [pc, #44]	; (b51e0 <module_user_init_hook+0x5c>)
   b51b2:	b113      	cbz	r3, b51ba <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b51b4:	4620      	mov	r0, r4
   b51b6:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b51ba:	2100      	movs	r1, #0
   b51bc:	4808      	ldr	r0, [pc, #32]	; (b51e0 <module_user_init_hook+0x5c>)
   b51be:	f7ff fb8d 	bl	b48dc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b51c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b51c6:	4807      	ldr	r0, [pc, #28]	; (b51e4 <module_user_init_hook+0x60>)
   b51c8:	2100      	movs	r1, #0
   b51ca:	f7ff bb73 	b.w	b48b4 <system_ctrl_set_app_request_handler>
   b51ce:	bf00      	nop
   b51d0:	000b50b1 	.word	0x000b50b1
   b51d4:	2003f400 	.word	0x2003f400
   b51d8:	9a271c1e 	.word	0x9a271c1e
   b51dc:	2003e714 	.word	0x2003e714
   b51e0:	00000000 	.word	0x00000000
   b51e4:	000b514d 	.word	0x000b514d

000b51e8 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b51e8:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b51ea:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b51ec:	d902      	bls.n	b51f4 <pinAvailable+0xc>
    return false;
   b51ee:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b51f0:	b002      	add	sp, #8
   b51f2:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b51f4:	f1a0 030b 	sub.w	r3, r0, #11
   b51f8:	2b02      	cmp	r3, #2
   b51fa:	d81a      	bhi.n	b5232 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b51fc:	4c17      	ldr	r4, [pc, #92]	; (b525c <pinAvailable+0x74>)
   b51fe:	7821      	ldrb	r1, [r4, #0]
   b5200:	f3bf 8f5b 	dmb	ish
   b5204:	f011 0101 	ands.w	r1, r1, #1
   b5208:	d10b      	bne.n	b5222 <pinAvailable+0x3a>
   b520a:	4620      	mov	r0, r4
   b520c:	9101      	str	r1, [sp, #4]
   b520e:	f7ff f930 	bl	b4472 <__cxa_guard_acquire>
   b5212:	9901      	ldr	r1, [sp, #4]
   b5214:	b128      	cbz	r0, b5222 <pinAvailable+0x3a>
   b5216:	4812      	ldr	r0, [pc, #72]	; (b5260 <pinAvailable+0x78>)
   b5218:	f7ff fe10 	bl	b4e3c <_ZN8SPIClassC1E19hal_spi_interface_t>
   b521c:	4620      	mov	r0, r4
   b521e:	f7ff f92d 	bl	b447c <__cxa_guard_release>
   b5222:	4b0f      	ldr	r3, [pc, #60]	; (b5260 <pinAvailable+0x78>)
   b5224:	7818      	ldrb	r0, [r3, #0]
   b5226:	f7ff fab5 	bl	b4794 <hal_spi_is_enabled>
   b522a:	2800      	cmp	r0, #0
   b522c:	d1df      	bne.n	b51ee <pinAvailable+0x6>
  return true; // 'pin' is available
   b522e:	2001      	movs	r0, #1
   b5230:	e7de      	b.n	b51f0 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b5232:	2801      	cmp	r0, #1
   b5234:	d809      	bhi.n	b524a <pinAvailable+0x62>
   b5236:	f000 f8ab 	bl	b5390 <_Z19__fetch_global_Wirev>
   b523a:	2100      	movs	r1, #0
   b523c:	7c00      	ldrb	r0, [r0, #16]
   b523e:	f7ff fa79 	bl	b4734 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b5242:	f080 0001 	eor.w	r0, r0, #1
   b5246:	b2c0      	uxtb	r0, r0
   b5248:	e7d2      	b.n	b51f0 <pinAvailable+0x8>
   b524a:	3809      	subs	r0, #9
   b524c:	2801      	cmp	r0, #1
   b524e:	d8ee      	bhi.n	b522e <pinAvailable+0x46>
   b5250:	f000 f8de 	bl	b5410 <_Z22__fetch_global_Serial1v>
   b5254:	7c00      	ldrb	r0, [r0, #16]
   b5256:	f7ff facd 	bl	b47f4 <hal_usart_is_enabled>
   b525a:	e7f2      	b.n	b5242 <pinAvailable+0x5a>
   b525c:	2003e71c 	.word	0x2003e71c
   b5260:	2003e720 	.word	0x2003e720

000b5264 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5264:	2823      	cmp	r0, #35	; 0x23
{
   b5266:	b538      	push	{r3, r4, r5, lr}
   b5268:	4604      	mov	r4, r0
   b526a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b526c:	d80a      	bhi.n	b5284 <pinMode+0x20>
   b526e:	29ff      	cmp	r1, #255	; 0xff
   b5270:	d008      	beq.n	b5284 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b5272:	f7ff ffb9 	bl	b51e8 <pinAvailable>
   b5276:	b128      	cbz	r0, b5284 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
   b5278:	4629      	mov	r1, r5
   b527a:	4620      	mov	r0, r4
}
   b527c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
   b5280:	f7ff b9f8 	b.w	b4674 <hal_gpio_mode>
}
   b5284:	bd38      	pop	{r3, r4, r5, pc}

000b5286 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
   b5286:	b538      	push	{r3, r4, r5, lr}
   b5288:	4604      	mov	r4, r0
   b528a:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
   b528c:	f7ff f9fa 	bl	b4684 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b5290:	28ff      	cmp	r0, #255	; 0xff
   b5292:	d010      	beq.n	b52b6 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b5294:	2806      	cmp	r0, #6
   b5296:	d804      	bhi.n	b52a2 <digitalWrite+0x1c>
   b5298:	234d      	movs	r3, #77	; 0x4d
   b529a:	fa23 f000 	lsr.w	r0, r3, r0
   b529e:	07c3      	lsls	r3, r0, #31
   b52a0:	d409      	bmi.n	b52b6 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b52a2:	4620      	mov	r0, r4
   b52a4:	f7ff ffa0 	bl	b51e8 <pinAvailable>
   b52a8:	b128      	cbz	r0, b52b6 <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
   b52aa:	4629      	mov	r1, r5
   b52ac:	4620      	mov	r0, r4
}
   b52ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
   b52b2:	f7ff b9ef 	b.w	b4694 <hal_gpio_write>
}
   b52b6:	bd38      	pop	{r3, r4, r5, pc}

000b52b8 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(hal_pin_t pin)
{
   b52b8:	b510      	push	{r4, lr}
   b52ba:	4604      	mov	r4, r0
    PinMode mode = hal_gpio_get_mode(pin);
   b52bc:	f7ff f9e2 	bl	b4684 <hal_gpio_get_mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b52c0:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b52c2:	b2db      	uxtb	r3, r3
   b52c4:	2b01      	cmp	r3, #1
   b52c6:	d908      	bls.n	b52da <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b52c8:	4620      	mov	r0, r4
   b52ca:	f7ff ff8d 	bl	b51e8 <pinAvailable>
   b52ce:	b120      	cbz	r0, b52da <digitalRead+0x22>
      return LOW;
    }

    return hal_gpio_read(pin);
   b52d0:	4620      	mov	r0, r4
}
   b52d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return hal_gpio_read(pin);
   b52d6:	f7ff b9e5 	b.w	b46a4 <hal_gpio_read>
}
   b52da:	2000      	movs	r0, #0
   b52dc:	bd10      	pop	{r4, pc}

000b52de <analogRead>:
int32_t analogRead(hal_pin_t pin)
{
#if !HAL_PLATFORM_RTL872X
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b52de:	280d      	cmp	r0, #13
{
   b52e0:	b510      	push	{r4, lr}
   b52e2:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b52e4:	bf9c      	itt	ls
   b52e6:	340e      	addls	r4, #14
   b52e8:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
#endif

  // Safety check
  if( !pinAvailable(pin) ) {
   b52ea:	4620      	mov	r0, r4
   b52ec:	f7ff ff7c 	bl	b51e8 <pinAvailable>
   b52f0:	b150      	cbz	r0, b5308 <analogRead+0x2a>
    return LOW;
  }

  if(hal_pin_validate_function(pin, PF_ADC)!=PF_ADC)
   b52f2:	2103      	movs	r1, #3
   b52f4:	4620      	mov	r0, r4
   b52f6:	f7ff f9b5 	bl	b4664 <hal_pin_validate_function>
   b52fa:	2803      	cmp	r0, #3
   b52fc:	d104      	bne.n	b5308 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b52fe:	4620      	mov	r0, r4
}
   b5300:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b5304:	f7ff b9de 	b.w	b46c4 <hal_adc_read>
}
   b5308:	2000      	movs	r0, #0
   b530a:	bd10      	pop	{r4, pc}

000b530c <_Z11analogWritetm>:

/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 */
void analogWrite(hal_pin_t pin, uint32_t value)
{
   b530c:	b538      	push	{r3, r4, r5, lr}
   b530e:	4604      	mov	r4, r0
   b5310:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
   b5312:	f7ff ff69 	bl	b51e8 <pinAvailable>
   b5316:	b1f0      	cbz	r0, b5356 <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (hal_pin_validate_function(pin, PF_DAC) == PF_DAC)
   b5318:	2104      	movs	r1, #4
   b531a:	4620      	mov	r0, r4
   b531c:	f7ff f9a2 	bl	b4664 <hal_pin_validate_function>
   b5320:	2804      	cmp	r0, #4
   b5322:	d105      	bne.n	b5330 <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
   b5324:	b2a9      	uxth	r1, r5
   b5326:	4620      	mov	r0, r4
            return;
        }

        hal_pwm_write_ext(pin, value);
    }
}
   b5328:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_DAC_Write(pin, value);
   b532c:	f7ff b9c2 	b.w	b46b4 <HAL_DAC_Write>
    else if (hal_pin_validate_function(pin, PF_TIMER) == PF_TIMER)
   b5330:	2102      	movs	r1, #2
   b5332:	4620      	mov	r0, r4
   b5334:	f7ff f996 	bl	b4664 <hal_pin_validate_function>
   b5338:	2802      	cmp	r0, #2
   b533a:	d10c      	bne.n	b5356 <_Z11analogWritetm+0x4a>
        PinMode mode = hal_gpio_get_mode(pin);
   b533c:	4620      	mov	r0, r4
   b533e:	f7ff f9a1 	bl	b4684 <hal_gpio_get_mode>
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   b5342:	2801      	cmp	r0, #1
   b5344:	d001      	beq.n	b534a <_Z11analogWritetm+0x3e>
   b5346:	2804      	cmp	r0, #4
   b5348:	d105      	bne.n	b5356 <_Z11analogWritetm+0x4a>
        hal_pwm_write_ext(pin, value);
   b534a:	4629      	mov	r1, r5
   b534c:	4620      	mov	r0, r4
}
   b534e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        hal_pwm_write_ext(pin, value);
   b5352:	f7ff b9bf 	b.w	b46d4 <hal_pwm_write_ext>
}
   b5356:	bd38      	pop	{r3, r4, r5, pc}

000b5358 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5358:	4770      	bx	lr
	...

000b535c <_Z17acquireWireBufferv>:
{
   b535c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b535e:	4b0a      	ldr	r3, [pc, #40]	; (b5388 <_Z17acquireWireBufferv+0x2c>)
   b5360:	6003      	str	r3, [r0, #0]
   b5362:	2301      	movs	r3, #1
{
   b5364:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b5366:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5368:	4908      	ldr	r1, [pc, #32]	; (b538c <_Z17acquireWireBufferv+0x30>)
   b536a:	2020      	movs	r0, #32
   b536c:	f000 f874 	bl	b5458 <_ZnajRKSt9nothrow_t>
	};
   b5370:	2520      	movs	r5, #32
   b5372:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5374:	4905      	ldr	r1, [pc, #20]	; (b538c <_Z17acquireWireBufferv+0x30>)
	};
   b5376:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5378:	4628      	mov	r0, r5
   b537a:	f000 f86d 	bl	b5458 <_ZnajRKSt9nothrow_t>
	};
   b537e:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b5382:	4620      	mov	r0, r4
   b5384:	bd38      	pop	{r3, r4, r5, pc}
   b5386:	bf00      	nop
   b5388:	00010018 	.word	0x00010018
   b538c:	000b574c 	.word	0x000b574c

000b5390 <_Z19__fetch_global_Wirev>:
{
   b5390:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5392:	4d0e      	ldr	r5, [pc, #56]	; (b53cc <_Z19__fetch_global_Wirev+0x3c>)
   b5394:	7829      	ldrb	r1, [r5, #0]
   b5396:	f3bf 8f5b 	dmb	ish
   b539a:	f011 0401 	ands.w	r4, r1, #1
{
   b539e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b53a0:	d111      	bne.n	b53c6 <_Z19__fetch_global_Wirev+0x36>
   b53a2:	4628      	mov	r0, r5
   b53a4:	f7ff f865 	bl	b4472 <__cxa_guard_acquire>
   b53a8:	b168      	cbz	r0, b53c6 <_Z19__fetch_global_Wirev+0x36>
   b53aa:	4668      	mov	r0, sp
   b53ac:	f7ff ffd6 	bl	b535c <_Z17acquireWireBufferv>
   b53b0:	466a      	mov	r2, sp
   b53b2:	4621      	mov	r1, r4
   b53b4:	4806      	ldr	r0, [pc, #24]	; (b53d0 <_Z19__fetch_global_Wirev+0x40>)
   b53b6:	f7ff fb8b 	bl	b4ad0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b53ba:	4628      	mov	r0, r5
   b53bc:	f7ff f85e 	bl	b447c <__cxa_guard_release>
   b53c0:	4804      	ldr	r0, [pc, #16]	; (b53d4 <_Z19__fetch_global_Wirev+0x44>)
   b53c2:	f000 f84b 	bl	b545c <atexit>
	return wire;
}
   b53c6:	4802      	ldr	r0, [pc, #8]	; (b53d0 <_Z19__fetch_global_Wirev+0x40>)
   b53c8:	b007      	add	sp, #28
   b53ca:	bd30      	pop	{r4, r5, pc}
   b53cc:	2003e72c 	.word	0x2003e72c
   b53d0:	2003e730 	.word	0x2003e730
   b53d4:	000b5359 	.word	0x000b5359

000b53d8 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b53d8:	4770      	bx	lr
	...

000b53dc <_Z20acquireSerial1Bufferv>:
{
   b53dc:	b538      	push	{r3, r4, r5, lr}
   b53de:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b53e0:	2514      	movs	r5, #20
   b53e2:	462a      	mov	r2, r5
   b53e4:	2100      	movs	r1, #0
   b53e6:	f000 f84d 	bl	b5484 <memset>
   b53ea:	8025      	strh	r5, [r4, #0]
   b53ec:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b53ee:	4907      	ldr	r1, [pc, #28]	; (b540c <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b53f0:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b53f2:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b53f4:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b53f6:	f000 f82f 	bl	b5458 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b53fa:	4904      	ldr	r1, [pc, #16]	; (b540c <_Z20acquireSerial1Bufferv+0x30>)
    };
   b53fc:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b53fe:	4628      	mov	r0, r5
   b5400:	f000 f82a 	bl	b5458 <_ZnajRKSt9nothrow_t>
    };
   b5404:	60e0      	str	r0, [r4, #12]
}
   b5406:	4620      	mov	r0, r4
   b5408:	bd38      	pop	{r3, r4, r5, pc}
   b540a:	bf00      	nop
   b540c:	000b574c 	.word	0x000b574c

000b5410 <_Z22__fetch_global_Serial1v>:
{
   b5410:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5412:	4d0e      	ldr	r5, [pc, #56]	; (b544c <_Z22__fetch_global_Serial1v+0x3c>)
   b5414:	7829      	ldrb	r1, [r5, #0]
   b5416:	f3bf 8f5b 	dmb	ish
   b541a:	f011 0401 	ands.w	r4, r1, #1
{
   b541e:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5420:	d111      	bne.n	b5446 <_Z22__fetch_global_Serial1v+0x36>
   b5422:	4628      	mov	r0, r5
   b5424:	f7ff f825 	bl	b4472 <__cxa_guard_acquire>
   b5428:	b168      	cbz	r0, b5446 <_Z22__fetch_global_Serial1v+0x36>
   b542a:	a801      	add	r0, sp, #4
   b542c:	f7ff ffd6 	bl	b53dc <_Z20acquireSerial1Bufferv>
   b5430:	aa01      	add	r2, sp, #4
   b5432:	4621      	mov	r1, r4
   b5434:	4806      	ldr	r0, [pc, #24]	; (b5450 <_Z22__fetch_global_Serial1v+0x40>)
   b5436:	f7ff fd65 	bl	b4f04 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b543a:	4628      	mov	r0, r5
   b543c:	f7ff f81e 	bl	b447c <__cxa_guard_release>
   b5440:	4804      	ldr	r0, [pc, #16]	; (b5454 <_Z22__fetch_global_Serial1v+0x44>)
   b5442:	f000 f80b 	bl	b545c <atexit>
    return serial1;
}
   b5446:	4802      	ldr	r0, [pc, #8]	; (b5450 <_Z22__fetch_global_Serial1v+0x40>)
   b5448:	b007      	add	sp, #28
   b544a:	bd30      	pop	{r4, r5, pc}
   b544c:	2003e744 	.word	0x2003e744
   b5450:	2003e748 	.word	0x2003e748
   b5454:	000b53d9 	.word	0x000b53d9

000b5458 <_ZnajRKSt9nothrow_t>:
   b5458:	f7ff b807 	b.w	b446a <_Znaj>

000b545c <atexit>:
   b545c:	2300      	movs	r3, #0
   b545e:	4601      	mov	r1, r0
   b5460:	461a      	mov	r2, r3
   b5462:	4618      	mov	r0, r3
   b5464:	f000 b844 	b.w	b54f0 <__register_exitproc>

000b5468 <memcpy>:
   b5468:	440a      	add	r2, r1
   b546a:	4291      	cmp	r1, r2
   b546c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b5470:	d100      	bne.n	b5474 <memcpy+0xc>
   b5472:	4770      	bx	lr
   b5474:	b510      	push	{r4, lr}
   b5476:	f811 4b01 	ldrb.w	r4, [r1], #1
   b547a:	f803 4f01 	strb.w	r4, [r3, #1]!
   b547e:	4291      	cmp	r1, r2
   b5480:	d1f9      	bne.n	b5476 <memcpy+0xe>
   b5482:	bd10      	pop	{r4, pc}

000b5484 <memset>:
   b5484:	4402      	add	r2, r0
   b5486:	4603      	mov	r3, r0
   b5488:	4293      	cmp	r3, r2
   b548a:	d100      	bne.n	b548e <memset+0xa>
   b548c:	4770      	bx	lr
   b548e:	f803 1b01 	strb.w	r1, [r3], #1
   b5492:	e7f9      	b.n	b5488 <memset+0x4>

000b5494 <srand>:
   b5494:	b538      	push	{r3, r4, r5, lr}
   b5496:	4b10      	ldr	r3, [pc, #64]	; (b54d8 <srand+0x44>)
   b5498:	681d      	ldr	r5, [r3, #0]
   b549a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b549c:	4604      	mov	r4, r0
   b549e:	b9b3      	cbnz	r3, b54ce <srand+0x3a>
   b54a0:	2018      	movs	r0, #24
   b54a2:	f7ff fa83 	bl	b49ac <malloc>
   b54a6:	4602      	mov	r2, r0
   b54a8:	63a8      	str	r0, [r5, #56]	; 0x38
   b54aa:	b920      	cbnz	r0, b54b6 <srand+0x22>
   b54ac:	4b0b      	ldr	r3, [pc, #44]	; (b54dc <srand+0x48>)
   b54ae:	480c      	ldr	r0, [pc, #48]	; (b54e0 <srand+0x4c>)
   b54b0:	2142      	movs	r1, #66	; 0x42
   b54b2:	f7ff fa8b 	bl	b49cc <__assert_func>
   b54b6:	490b      	ldr	r1, [pc, #44]	; (b54e4 <srand+0x50>)
   b54b8:	4b0b      	ldr	r3, [pc, #44]	; (b54e8 <srand+0x54>)
   b54ba:	e9c0 1300 	strd	r1, r3, [r0]
   b54be:	4b0b      	ldr	r3, [pc, #44]	; (b54ec <srand+0x58>)
   b54c0:	6083      	str	r3, [r0, #8]
   b54c2:	230b      	movs	r3, #11
   b54c4:	8183      	strh	r3, [r0, #12]
   b54c6:	2100      	movs	r1, #0
   b54c8:	2001      	movs	r0, #1
   b54ca:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b54ce:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b54d0:	2200      	movs	r2, #0
   b54d2:	611c      	str	r4, [r3, #16]
   b54d4:	615a      	str	r2, [r3, #20]
   b54d6:	bd38      	pop	{r3, r4, r5, pc}
   b54d8:	2003e630 	.word	0x2003e630
   b54dc:	000b574d 	.word	0x000b574d
   b54e0:	000b5764 	.word	0x000b5764
   b54e4:	abcd330e 	.word	0xabcd330e
   b54e8:	e66d1234 	.word	0xe66d1234
   b54ec:	0005deec 	.word	0x0005deec

000b54f0 <__register_exitproc>:
   b54f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b54f4:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b55b0 <__register_exitproc+0xc0>
   b54f8:	4606      	mov	r6, r0
   b54fa:	f8d8 0000 	ldr.w	r0, [r8]
   b54fe:	461f      	mov	r7, r3
   b5500:	460d      	mov	r5, r1
   b5502:	4691      	mov	r9, r2
   b5504:	f000 f856 	bl	b55b4 <__retarget_lock_acquire_recursive>
   b5508:	4b25      	ldr	r3, [pc, #148]	; (b55a0 <__register_exitproc+0xb0>)
   b550a:	681c      	ldr	r4, [r3, #0]
   b550c:	b934      	cbnz	r4, b551c <__register_exitproc+0x2c>
   b550e:	4c25      	ldr	r4, [pc, #148]	; (b55a4 <__register_exitproc+0xb4>)
   b5510:	601c      	str	r4, [r3, #0]
   b5512:	4b25      	ldr	r3, [pc, #148]	; (b55a8 <__register_exitproc+0xb8>)
   b5514:	b113      	cbz	r3, b551c <__register_exitproc+0x2c>
   b5516:	681b      	ldr	r3, [r3, #0]
   b5518:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b551c:	6863      	ldr	r3, [r4, #4]
   b551e:	2b1f      	cmp	r3, #31
   b5520:	dd07      	ble.n	b5532 <__register_exitproc+0x42>
   b5522:	f8d8 0000 	ldr.w	r0, [r8]
   b5526:	f000 f847 	bl	b55b8 <__retarget_lock_release_recursive>
   b552a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b552e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b5532:	b34e      	cbz	r6, b5588 <__register_exitproc+0x98>
   b5534:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b5538:	b988      	cbnz	r0, b555e <__register_exitproc+0x6e>
   b553a:	4b1c      	ldr	r3, [pc, #112]	; (b55ac <__register_exitproc+0xbc>)
   b553c:	b923      	cbnz	r3, b5548 <__register_exitproc+0x58>
   b553e:	f8d8 0000 	ldr.w	r0, [r8]
   b5542:	f000 f838 	bl	b55b6 <__retarget_lock_release>
   b5546:	e7f0      	b.n	b552a <__register_exitproc+0x3a>
   b5548:	f44f 7084 	mov.w	r0, #264	; 0x108
   b554c:	f7ff fa2e 	bl	b49ac <malloc>
   b5550:	2800      	cmp	r0, #0
   b5552:	d0f4      	beq.n	b553e <__register_exitproc+0x4e>
   b5554:	2300      	movs	r3, #0
   b5556:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b555a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b555e:	6863      	ldr	r3, [r4, #4]
   b5560:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b5564:	2201      	movs	r2, #1
   b5566:	409a      	lsls	r2, r3
   b5568:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b556c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b5570:	4313      	orrs	r3, r2
   b5572:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b5576:	2e02      	cmp	r6, #2
   b5578:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b557c:	bf02      	ittt	eq
   b557e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b5582:	4313      	orreq	r3, r2
   b5584:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b5588:	6863      	ldr	r3, [r4, #4]
   b558a:	f8d8 0000 	ldr.w	r0, [r8]
   b558e:	1c5a      	adds	r2, r3, #1
   b5590:	3302      	adds	r3, #2
   b5592:	6062      	str	r2, [r4, #4]
   b5594:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b5598:	f000 f80e 	bl	b55b8 <__retarget_lock_release_recursive>
   b559c:	2000      	movs	r0, #0
   b559e:	e7c6      	b.n	b552e <__register_exitproc+0x3e>
   b55a0:	2003e7e8 	.word	0x2003e7e8
   b55a4:	2003e75c 	.word	0x2003e75c
   b55a8:	00000000 	.word	0x00000000
   b55ac:	000b49ad 	.word	0x000b49ad
   b55b0:	2003e694 	.word	0x2003e694

000b55b4 <__retarget_lock_acquire_recursive>:
   b55b4:	4770      	bx	lr

000b55b6 <__retarget_lock_release>:
   b55b6:	4770      	bx	lr

000b55b8 <__retarget_lock_release_recursive>:
   b55b8:	4770      	bx	lr

000b55ba <link_code_end>:
	...

000b55bc <dynalib_user>:
   b55bc:	43f5 000b 4431 000b 4459 000b 445d 000b     .C..1D..YD..]D..
   b55cc:	0000 0000 7542 7474 6e6f 4420 776f 006e     ....Button Down.

000b55dc <_ZTVN5spark13EthernetClassE>:
	...
   b55e4:	4a5b 000b 4a51 000b 4a47 000b 4a3d 000b     [J..QJ..GJ..=J..
   b55f4:	4a31 000b 4a25 000b 4c4d 000b 4c55 000b     1J..%J..ML..UL..
   b5604:	4a19 000b 4a11 000b 4a07 000b 49fd 000b     .J...J...J...I..
   b5614:	4c85 000b                                   .L..

000b5618 <_ZTV7TwoWire>:
	...
   b5620:	4a79 000b 4ac3 000b 4a9b 000b 4a7b 000b     yJ...J...J..{J..
   b5630:	4aa3 000b 4aab 000b 4ab3 000b 4abb 000b     .J...J...J...J..

000b5640 <_ZTV9IPAddress>:
	...
   b5648:	4b1d 000b 4b0d 000b 4b0f 000b 7061 0070     .K...K...K..app.

000b5658 <_ZTVN5spark12NetworkClassE>:
	...
   b5660:	4c0d 000b 4c17 000b 4c21 000b 4c2b 000b     .L...L..!L..+L..
   b5670:	4c35 000b 4c41 000b 4c4d 000b 4c55 000b     5L..AL..ML..UL..
   b5680:	4c5d 000b 4c69 000b 4c71 000b 4c7b 000b     ]L..iL..qL..{L..
   b5690:	4c85 000b 5925 252d 2d6d 6425 2554 3a48     .L..%Y-%m-%dT%H:
   b56a0:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000b56b0 <_ZTV11USARTSerial>:
	...
   b56b8:	4e89 000b 4ef5 000b 4ecd 000b 4d71 000b     .N...N...N..qM..
   b56c8:	4e9d 000b 4eb9 000b 4eab 000b 4ec7 000b     .N...N...N...N..
   b56d8:	4e8b 000b 4e8f 000b                         .N...N..

000b56e0 <_ZTV9USBSerial>:
	...
   b56e8:	4f33 000b 4f9b 000b 4f71 000b 4d71 000b     3O...O..qO..qM..
   b56f8:	4f63 000b 4f35 000b 4f45 000b 4f95 000b     cO..5O..EO...O..
   b5708:	4f55 000b 4f2d 000b                         UO..-O..

000b5710 <_ZTVN5spark9WiFiClassE>:
	...
   b5718:	5093 000b 5089 000b 507f 000b 5035 000b     .P...P...P..5P..
   b5728:	5073 000b 5067 000b 4c4d 000b 4c55 000b     sP..gP..ML..UL..
   b5738:	505b 000b 5053 000b 5049 000b 503f 000b     [P..SP..IP..?P..
   b5748:	4c85 000b                                   .L..

000b574c <_ZSt7nothrow>:
   b574c:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b575c:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
   b576c:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b577c:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b578c:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
   b579c:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b57ac:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b57bd <link_const_data_end>:
   b57bd:	00          	.byte	0x00
	...

000b57c0 <link_constructors_location>:
   b57c0:	000b460d 	.word	0x000b460d
   b57c4:	000b49ed 	.word	0x000b49ed
   b57c8:	000b4a65 	.word	0x000b4a65
   b57cc:	000b4bfd 	.word	0x000b4bfd
   b57d0:	000b4d5d 	.word	0x000b4d5d
   b57d4:	000b4e31 	.word	0x000b4e31
   b57d8:	000b4e51 	.word	0x000b4e51
   b57dc:	000b4e75 	.word	0x000b4e75
   b57e0:	000b509d 	.word	0x000b509d
